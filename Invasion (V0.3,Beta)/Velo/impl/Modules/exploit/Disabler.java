package Velo.impl.Modules.exploit;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.lang3.RandomUtils;
import org.lwjgl.input.Keyboard;

import Velo.api.Module.Module;
import Velo.api.Module.Module.Category;
import Velo.api.Util.Other.Timer;
import Velo.impl.Event.EventPreMotion;
import Velo.impl.Event.EventReceivePacket;
import Velo.impl.Event.EventSendPacket;
import Velo.impl.Event.EventUpdate;
import Velo.impl.Settings.ModeSetting;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

public class Disabler extends Module {
	
	public static ModeSetting mode = new ModeSetting("Mode", "Transaction", "Transaction", "Ghostly", "Vicnix", "Redesky", "Mineplex", "Ping Spoof", "Verus", "Funcraft Semi", "AAC5");
	  public ArrayList<Packet> packetList = new ArrayList<Packet>();
	  public ArrayList<Packet> packetList2 = new ArrayList<Packet>();
	public Disabler() {
		super("Disabler", "Disabler", Keyboard.KEY_NONE, Category.EXPLOITS);
		this.loadSettings(mode);
	}
	
	
	private final ArrayDeque<Packet> list = new ArrayDeque<>();
	public static List<C03PacketPlayer> list2 = new ArrayList<C03PacketPlayer>();
	
	private int watchdogCounter, currentTrans;
	private double watchdogMovement;
	private boolean groundCheck, watchdogPacket;
	
	public Timer timer = new Timer();
	


	public void onEventSendPacket(EventSendPacket event) {
		if(mode.equalsIgnorecase("AAC5")) {
			if(mc.thePlayer != null) {
				if(event.getPacket() instanceof C03PacketPlayer) {
					C03PacketPlayer c03 = (C03PacketPlayer) event.getPacket();
					c03.onGround = true;
					list2.add(c03);
					event.setCancelled(true);
				}
			}
		}
		
		if(mode.equalsIgnorecase("Mineplex")) {
			 if (event.getPacket () instanceof C00PacketKeepAlive) {
                 C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive) event.getPacket ();
                 packetKeepAlive.key -= RandomUtils.nextInt ( 3, 128 );
                 event.setCancelled ( true );
             }
             if (event.getPacket () instanceof C0CPacketInput) {
                 C0CPacketInput C0C = (C0CPacketInput) event.getPacket ();
                 C0C.strafeSpeed -= RandomUtils.nextInt ( 32324, 242352 );
                 C0C.jumping = true;
                 C0C.forwardSpeed -= RandomUtils.nextInt ( 14 / 100, 43 / 100 );
             }
             if (event.getPacket () instanceof C0FPacketConfirmTransaction) {
                 C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction) event.getPacket ();
                 packetConfirmTransaction.uid -= RandomUtils.nextInt ( 4, 130 );
                 event.setCancelled ( true );
             }
		}
		
        double x;
        double y;
        S08PacketPlayerPosLook packet;
		if(mode.equalsIgnorecase("Verus")) {

			
			if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted < 8) {
	               this.packetQueue.clear();
	            }

	            if (event.getPacket() instanceof C00PacketKeepAlive) {
	               this.packetQueue.add(event.getPacket());
	               event.setCancelled(true);
	            }
	            if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted == 0) {
	                this.packetQueue.clear();
	             }

	             if (event.getPacket() instanceof C03PacketPlayer) {
	                double yPos = (double)Math.round(this.mc.thePlayer.posY / 0.015625D) * 0.015625D;
	                this.mc.thePlayer.setPosition(this.mc.thePlayer.posX, yPos, this.mc.thePlayer.posZ);
	                if (this.mc.thePlayer.ticksExisted % 45 == 0) {
	               //    mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
	                   //   mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, 1.0E159D, this.mc.thePlayer.posZ, false));
	                  //    mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
	                }
	             } else if (event.getPacket() instanceof S08PacketPlayerPosLook) {
	                packet = (S08PacketPlayerPosLook)event.getPacket();
	                x = packet.getX() - this.mc.thePlayer.posX;
	                y = packet.getY() - this.mc.thePlayer.posY;
	                double z = packet.getZ() - this.mc.thePlayer.posZ;
	                double diff = Math.sqrt(x * x + y * y + z * z);
	                if (diff <= 8.0D) {
	                    event.setCancelled(true);
	                      mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
	                }
	             } else if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
	                C0FPacketConfirmTransaction packet1 = (C0FPacketConfirmTransaction)event.getPacket();

	                for(int i = 0; i < 4; ++i) {
	                   this.packetQueue.add(packet1);
	                }

	                event.setCancelled(true);
	             }
	          }
	
		if(event.getPacket() instanceof C03PacketPlayer) {
			C03PacketPlayer c03 = (C03PacketPlayer) event.getPacket();
		}
		if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
			if(mode.equalsIgnorecase("Transaction")) {
				event.setCancelled(true);
			}
		}
		
		if(mode.equalsIgnorecase("Ping Spoof")) {
			   if (this.packetList.size() > 10) {
	               this.packetList.clear();
	               event.setCancelled(true);
	    
	              
	           }
	             if (event.getPacket() instanceof C00PacketKeepAlive && mc.thePlayer.isEntityAlive()) {
	                   C00PacketKeepAlive packet1 = (C00PacketKeepAlive) event.getPacket();
	                   this.packetList.add(packet1);
	                   event.setCancelled(true);
	                   if (this.timer.elapsed(2050)) {
	                       this.timer.reset1();
	                   }
	               }
	             if (this.timer.elapsed(2050) && !this.packetList.isEmpty()) {
	                   C00PacketKeepAlive packet1 = (C00PacketKeepAlive) this.packetList.get(0);
	                   if (packet1 != null && packetList.contains(packet1)) {
	                       mc.getNetHandler().getNetworkManager().sendPacket(packet1);
	                       this.packetList.remove(packet1);
	                       this.timer.reset1();
	                   }
		}
		}
	}
	
	public void onEventReceivePacket(EventReceivePacket event) {
        double x;
        double y;
        S08PacketPlayerPosLook packet;
		if(mode.equalsIgnorecase("Redesky")) {
			   if(event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition) {
				   event.setCancelled(true);
				   }
				   if(event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
					   event.setCancelled(true);
				   }
				   if(event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook) {
					   event.setCancelled(true);
				   }
				   if(event.getPacket() instanceof C00PacketKeepAlive) {
					   event.setCancelled(true);
				   }
				   if(event.getPacket() instanceof C17PacketCustomPayload) {
					   event.setCancelled(true);
				   }
				   if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
					   event.setCancelled(true);
				   }
				   if(event.getPacket() instanceof C13PacketPlayerAbilities) {
					   event.setCancelled(true);
				   }
		}
		
		if(mode.equalsIgnorecase("Mineplex")) {
		
		}
		if(mode.equalsIgnorecase("Verus")) {

	
			if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted < 8) {
	               this.packetQueue.clear();
	            }

	            if (event.getPacket() instanceof C00PacketKeepAlive) {
	               this.packetQueue.add(event.getPacket());
	               event.setCancelled(true);
	            }
	            if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted == 0) {
	                this.packetQueue.clear();
	             }

	             if (event.getPacket() instanceof C03PacketPlayer) {
	                double yPos = (double)Math.round(this.mc.thePlayer.posY / 0.015625D) * 0.015625D;
	                this.mc.thePlayer.setPosition(this.mc.thePlayer.posX, yPos, this.mc.thePlayer.posZ);
	                if (this.mc.thePlayer.ticksExisted % 45 == 0) {
	                      mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
	                      mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, 1.0E159D, this.mc.thePlayer.posZ, false));
	                      mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
	                }
	             } else if (event.getPacket() instanceof S08PacketPlayerPosLook) {
	                packet = (S08PacketPlayerPosLook)event.getPacket();
	                x = packet.getX() - this.mc.thePlayer.posX;
	                y = packet.getY() - this.mc.thePlayer.posY;
	                double z = packet.getZ() - this.mc.thePlayer.posZ;
	                double diff = Math.sqrt(x * x + y * y + z * z);
	                if (diff <= 8.0D) {
	                    event.setCancelled(true);
	                      mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
	                }
	             } else if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
	                C0FPacketConfirmTransaction packet1 = (C0FPacketConfirmTransaction)event.getPacket();

	                for(int i = 0; i < 4; ++i) {
	                   this.packetQueue.add(packet1);
	                }

	                event.setCancelled(true);
	             }
	          }
		}
	
	
	public void onEventPreMotion(EventPreMotion event) {
		
	}
	@Override
	public void onEnable() {
		packetQueue.clear();
		super.onEnable();
	}
	   private LinkedList<Packet> packetQueue = new LinkedList();
	public void onUpdate(EventUpdate event) {
		this.setDisplayName("Disabler " + mode.modes.get(mode.index));
		if(mode.equalsIgnorecase("Ghostly")) {
			//mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
			//
		//	if(mc.thePlayer.ticksExisted % 3 == 0) {
			//	mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook());
			//}
			  mc.getNetHandler().addToSendQueue(new C00PacketKeepAlive());
		}
		if(mode.equalsIgnorecase("Funcraft Semi")) {
			if(mc.thePlayer.ticksExisted % 1 == 0) {
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 1.0E-10, mc.thePlayer.posZ, false));
			}
		}
		
		if(mode.equalsIgnorecase("AAC5")) {
			if(!list2.isEmpty() && mc.thePlayer.ticksExisted % 15 == 0) {
				for(C03PacketPlayer p : list2) {
					mc.thePlayer.sendQueue.getNetworkManager().sendPacketNoEvent(p);
					mc.thePlayer.sendQueue.getNetworkManager().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(((C03PacketPlayer) p).getPositionX(), 1.04E250, ((C03PacketPlayer) p).getPositionZ(), true));
					mc.thePlayer.sendQueue.getNetworkManager().sendPacketNoEvent(p);
				}
				list2.clear();
			}
		}
		
		if(mode.equalsIgnorecase("Vicnix")) {
		     mc.getNetHandler().addToSendQueue(new C00PacketKeepAlive());
		     
		  //   mc.getNetHandler().addToSendQueue(new C0CPacketInput());
		 
		}
	
	if(mode.equalsIgnorecase("Verus")) {
	       if (this.mc.thePlayer.ticksExisted % 180 == 0) {
               while(this.packetQueue.size() > 25) {
                     mc.thePlayer.sendQueue.addToSendQueueSilent((Packet)this.packetQueue.poll());
               }
            }
	       
	         if (this.mc.thePlayer.ticksExisted % 180 == 0) {
	               while(this.packetQueue.size() > 22) {
	                     mc.thePlayer.sendQueue.addToSendQueueSilent((Packet)this.packetQueue.poll());
	               }
	            }
	}
	}
	}
