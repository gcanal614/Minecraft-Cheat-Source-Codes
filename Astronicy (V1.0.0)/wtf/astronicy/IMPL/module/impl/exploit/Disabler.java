package wtf.astronicy.IMPL.module.impl.exploit;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;

import wtf.astronicy.API.events.api.basicbus.api.annotations.Listener;
import wtf.astronicy.API.events.game.RespawnEvent;
import wtf.astronicy.API.events.packet.ReceivePacketEvent;
import wtf.astronicy.API.events.packet.SendPacketEvent;
import wtf.astronicy.API.events.player.MotionUpdateEvent;
import wtf.astronicy.IMPL.module.ModuleCategory;
import wtf.astronicy.IMPL.module.impl.Module;
import wtf.astronicy.IMPL.module.registery.Aliases;
import wtf.astronicy.IMPL.module.registery.Category;
import wtf.astronicy.IMPL.module.registery.ModName;
import wtf.astronicy.IMPL.utils.TimerUtility;
import wtf.astronicy.UIs.Notifications.NotificationManager;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import static wtf.astronicy.API.Utils.impl.Player.ExploitUtil.*;

@ModName("Disabler")
@Aliases({"disabler", "memer"})
@Category(ModuleCategory.EXPLOIT)
public class Disabler extends Module {

    Queue<C0FPacketConfirmTransaction> confirmTransactionQueue = new ConcurrentLinkedQueue<>();
    Queue<C00PacketKeepAlive> keepAliveQueue = new ConcurrentLinkedQueue<>();
    public static TimerUtility timer2 = new TimerUtility();
    TimerUtility lastRelease = new TimerUtility();

    int lastUid, cancelledPackets;
    public static boolean hasDisabled;
    
    public CopyOnWriteArrayList<C0EPacketClickWindow> clickWindowPackets = new CopyOnWriteArrayList<>();

    public boolean isCraftingItem = false;
    
    public boolean notified = true;

    @Listener(RespawnEvent.class)
    public void onLoadWorld(RespawnEvent event) {
    	NotificationManager.show("Disabler", "Don't use speed for 20 seconds!", 2000);
        confirmTransactionQueue.clear();
        keepAliveQueue.clear();

        hasDisabled = false;
        notified = true;
        lastUid = cancelledPackets = 0;

        clickWindowPackets.clear();
        isCraftingItem = false;
        timer2.reset();
    }
    
    @Listener(SendPacketEvent.class)
    public void onSendPacket(SendPacketEvent e){
        if (hasDisabled) {
            if (e.getPacket() instanceof C03PacketPlayer && !(e.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition || e.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook || e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook)) {
                cancelledPackets ++;
                e.setCancelled(true);
            }
        }

        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
            processConfirmTransactionPacket(e);
        } else if (e.getPacket() instanceof C00PacketKeepAlive) {
            processKeepAlivePacket(e);
        } else if (e.getPacket() instanceof C03PacketPlayer) {
            processPlayerPosLooksPacket(e);
        }
    }
    
    @Listener(ReceivePacketEvent.class)
    public void onReceivePack(ReceivePacketEvent e){
        if (e.getPacket() instanceof S08PacketPlayerPosLook) {
            S08PacketPlayerPosLook packet = ((S08PacketPlayerPosLook) e.getPacket());
            if (!hasDisabled && mc.thePlayer.ticksExisted > 20) {
                e.setCancelled(true);
            }
        }
    }
    
    @Listener(MotionUpdateEvent.class)
    public void onNigerian(MotionUpdateEvent e) {
    	
    	if(notified) {
    		if(timer2.elapsed(20000)) {
    			NotificationManager.show("Disabler", "Hypixel Disabled!", 2000);
    			notified = false;
    		}
    	}
    	
        if (mc.thePlayer.ticksExisted % 40 == 0) {
            int rate = (int) ((cancelledPackets / 40f) * 100);
            cancelledPackets = 0;
        }

        if (hasDisabled) {
            if (confirmTransactionQueue.isEmpty()) {
                lastRelease.reset();
            } else {
                if (confirmTransactionQueue.size() >= 6) {
                    while (!keepAliveQueue.isEmpty())
                        mc.getNetHandler().getNetworkManager().sendPacketNoEvent(keepAliveQueue.poll());

                    while (!confirmTransactionQueue.isEmpty()) {
                        C0FPacketConfirmTransaction poll = confirmTransactionQueue.poll();
                        mc.getNetHandler().getNetworkManager().sendPacketNoEvent(poll);
                    }
                }
            }
        }
    }
    
    @Override
    public void onEnabled() {
        super.onEnabled();
        timer2.reset();
        confirmTransactionQueue.clear();
        keepAliveQueue.clear();

        hasDisabled = false;
        lastUid = cancelledPackets = 0;

        clickWindowPackets.clear();
        isCraftingItem = false;
    }
}
