package wtf.astronicy.IMPL.module.impl.exploit;

import java.util.ArrayList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;

import wtf.astronicy.API.events.api.basicbus.api.annotations.Listener;
import wtf.astronicy.API.events.packet.ReceivePacketEvent;
import wtf.astronicy.API.events.packet.SendPacketEvent;
import wtf.astronicy.API.events.player.MotionUpdateEvent;
import wtf.astronicy.IMPL.module.ModuleCategory;
import wtf.astronicy.IMPL.module.impl.Module;
import wtf.astronicy.IMPL.module.registery.Category;
import wtf.astronicy.IMPL.module.registery.ModName;
import wtf.astronicy.IMPL.utils.TimerUtility;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C18PacketSpectate;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

@ModName("VerusMemer")
@Category(ModuleCategory.EXPLOIT)
public class VerusThingie extends Module {

	  public boolean expectedTeleport;
	  private final ArrayList<Packet> packets;
	  private final TimerUtility blocksWatch = new TimerUtility();
	  private final TimerUtility timer = new TimerUtility();
	  private final Queue<Packet<?>> retardQueue = new ConcurrentLinkedDeque<>();

	  public VerusThingie() {
		  this.packets = new ArrayList<>();
	  }
	  
	  public void onEnable() {
	      this.expectedTeleport = false;
	      this.retardQueue.clear();
	      this.blocksWatch.reset();
	  }

	  public void onDisable() {
	  }

	  @Listener(MotionUpdateEvent.class)
	  public void onUpdate(MotionUpdateEvent event) {

	  }

	  @Listener(ReceivePacketEvent.class)
	  public void onPacketReceived(ReceivePacketEvent e) {
		  if (this.packets.size() > 10)
	          this.packets.clear();
	        if (this.timer.elapsed(650L) && !this.packets.isEmpty()) {
	          Packet packet = this.packets.get(0);
	          mc.getNetHandler().getNetworkManager().sendPacket(packet);
	          this.packets.remove(packet);
	          this.timer.reset();
	        }
	        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
	          int AGC_REACH_AUTOBAN_CHANNEL = 65536;
	          short AGC_DISABLE_AUTOBAN_ID = Short.MAX_VALUE;
	          C0FPacketConfirmTransaction c0FPacketConfirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
	        }
	        if (e.getPacket() instanceof net.minecraft.network.play.client.C0BPacketEntityAction)
	          e.setCancelled(true);
	        if (e.getPacket() instanceof C03PacketPlayer) {
	          C03PacketPlayer c03PacketPlayer = (C03PacketPlayer)e.getPacket();
	          if (mc.thePlayer.ticksExisted % 5 == 0)
	        	  mc.getNetHandler().getNetworkManager().sendPacketNoEvent((Packet)new C0CPacketInput());
	          if (mc.thePlayer.ticksExisted % 40 == 0) {
	            this.expectedTeleport = true;
	            c03PacketPlayer.y = -0.02632525D;
	            c03PacketPlayer.onGround = false;
	            //ChatHelper.addChat("SEX");
	          }
	        }
	        if (e.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
	          S08PacketPlayerPosLook p = (S08PacketPlayerPosLook)e.getPacket();
	          this.expectedTeleport = false;
	          e.setCancelled(true);
	          mc.getNetHandler().getNetworkManager().sendPacketNoEvent((Packet)new C03PacketPlayer.C06PacketPlayerPosLook(p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), true));
	        }

	  }

	  @Listener(SendPacketEvent.class)
	  public void onPacketSent(SendPacketEvent e) {
	        if (e.getPacket() instanceof C00PacketKeepAlive && mc.thePlayer.isEntityAlive()) {
		          this.packets.add(e.getPacket());
		          e.setCancelled(true);
		          if (this.timer.elapsed(650L))
		            this.timer.reset();
		        }
	        if (e.getPacket() instanceof C00PacketKeepAlive)
	        	 mc.getNetHandler().getNetworkManager().sendPacketNoEvent((Packet)new C18PacketSpectate(mc.thePlayer.getUniqueID()));
	  }

}
