package wtf.astronicy.IMPL.module.impl.exploit;

        import wtf.astronicy.API.events.api.basicbus.api.annotations.Listener;
        import wtf.astronicy.API.events.packet.SendPacketEvent;
        import wtf.astronicy.API.events.player.MotionUpdateEvent;
        import wtf.astronicy.IMPL.module.ModuleCategory;
        import wtf.astronicy.IMPL.module.impl.Module;
        import wtf.astronicy.IMPL.module.registery.Aliases;
        import wtf.astronicy.IMPL.module.registery.Category;
        import wtf.astronicy.IMPL.module.registery.ModName;
        import wtf.astronicy.IMPL.module.options.Option;
        import wtf.astronicy.IMPL.module.options.impl.DoubleOption;
        import wtf.astronicy.IMPL.module.options.impl.EnumOption;
        import wtf.astronicy.IMPL.utils.Logger;
        import wtf.astronicy.IMPL.utils.TimerUtility;
        import net.minecraft.network.Packet;
        import net.minecraft.network.play.client.C03PacketPlayer;

        import java.util.List;
        import java.util.concurrent.CopyOnWriteArrayList;


        @ModName("Blink")
        @Category(ModuleCategory.EXPLOIT)
        @Aliases("Blink")
        public class Blink extends Module {
            public EnumOption mode;
            public DoubleOption pulse;
            public DoubleOption delay;
            private final List<Packet<?>> packetsList = new CopyOnWriteArrayList<>();
            public TimerUtility timer = new TimerUtility();


            public Blink() {
                mode = new EnumOption("Mode", modes.Pulse);
                pulse = new DoubleOption("PacketList", 1, 1, 20, 1);
                // delay = new DoubleOption("Delay", 1, 1, 20, 1);

                this.addOptions(new Option[]{mode, pulse});

            }

            @Listener(SendPacketEvent.class)
            public void onSendPacket(SendPacketEvent event) {


                if (event.getPacket() instanceof C03PacketPlayer) {
                    if (event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition) {
                        packetsList.add(event.getPacket());
                        event.setCancelled(true);
                        if (event.isCancelled() == true)
                            Logger.log("C05 Cancelled");

                    }
                    if (event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook) {
                        packetsList.add(event.getPacket());
                        event.setCancelled(true);
                        if (event.isCancelled() == true)
                            Logger.log("C05 Cancelled");


                    }
                    if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                        packetsList.add(event.getPacket());
                        event.setCancelled(true);
                        if (event.isCancelled() == true)
                            Logger.log("C06 Cancelled");


                    }
                }
            }

            @Listener(MotionUpdateEvent.class)
            public void onMotion(MotionUpdateEvent event) {
                if (mode.getValue() == modes.Pulse) {

                    if (timer.elapsed(1000 * ((Double) this.pulse.getValue()).intValue())) {
                        if (!packetsList.isEmpty()) {
                            for (Packet<?> packet : packetsList) {
                                PacketUtils.sendPacketNoEvent(packet);
                                packetsList.remove(packet);
                                Logger.log("Pulsed");

                            }
                        }

                        timer.reset();
                    }
                }
            }

            enum modes {
                Full,
                Pulse;
            }
        }