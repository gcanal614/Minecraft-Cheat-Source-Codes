package wtf.astronicy.API.Utils.impl.Player;

import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import wtf.astronicy.API.Utils.UtilCategory;
import wtf.astronicy.API.Utils.Util;
import wtf.astronicy.API.events.packet.ReceivePacketEvent;
import wtf.astronicy.API.events.packet.SendPacketEvent;
import wtf.astronicy.API.events.player.MotionUpdateEvent;
import wtf.astronicy.IMPL.utils.TimerUtility;
import wtf.astronicy.UIs.Notifications.NotificationManager;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;

public class ExploitUtil extends Util {

    /**
     * TODO: Hypixel
     */
    public static CopyOnWriteArrayList<C0EPacketClickWindow> clickWindowPackets = new CopyOnWriteArrayList<>();
    static Queue<C0FPacketConfirmTransaction> confirmTransactionQueue = new ConcurrentLinkedQueue<>();
    static Queue<C00PacketKeepAlive> keepAliveQueue = new ConcurrentLinkedQueue<>();
    public static TimerUtility timer = new TimerUtility();
    static TimerUtility lastRelease = new TimerUtility();
    public static boolean isCraftingItem = false;
    public static boolean hasDisabled;
    public static boolean notified = true;
    static int lastUid;
    static int cancelledPackets;

    public ExploitUtil() {
        super("Exploit Util", UtilCategory.Player);
    }

    /***
     * TODO: Hypixel
     * @param e
     */
    public static void processConfirmTransactionPacket(SendPacketEvent e) {
        C0FPacketConfirmTransaction packet = ((C0FPacketConfirmTransaction) e.getPacket());
        int windowId = packet.getWindowId();
        int uid = packet.getUid();

        if (windowId != 0 || uid >= 0) {
            NotificationManager.show("Disabler", "Inventory Sync!", 2000);
        } else {
            if (uid == --lastUid) {
                if (!hasDisabled) {
                    //NotificationManager.show("Disabler", "Watchdog Disabled!", 2000);
                    hasDisabled = true;
                }
                confirmTransactionQueue.offer(packet);
                e.setCancelled(true);
            }
            lastUid = uid;
        }
    }

    public static void processKeepAlivePacket(SendPacketEvent e) {
        C00PacketKeepAlive packet = ((C00PacketKeepAlive) e.getPacket());
        if (hasDisabled) {
            keepAliveQueue.offer(packet);
            e.setCancelled(true);
        }
    }

    public static void processPlayerPosLooksPacket(SendPacketEvent e) {
        if (!hasDisabled) {
            e.setCancelled(true);
        }
    }


    public static void disableWatchdogP1(SendPacketEvent e){
        if (hasDisabled) {
            if (e.getPacket() instanceof C03PacketPlayer && !(e.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition || e.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook || e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook)) {
                cancelledPackets ++;
                e.setCancelled(true);
            }
        }

        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
            processConfirmTransactionPacket(e);
        } else if (e.getPacket() instanceof C00PacketKeepAlive) {
            processKeepAlivePacket(e);
        } else if (e.getPacket() instanceof C03PacketPlayer) {
            processPlayerPosLooksPacket(e);
        }
    }

    public static void disableWatchdogP2(ReceivePacketEvent e){
        if (e.getPacket() instanceof S08PacketPlayerPosLook) {
            S08PacketPlayerPosLook packet = ((S08PacketPlayerPosLook) e.getPacket());
            if (!hasDisabled && mc.thePlayer.ticksExisted > 20) {
                e.setCancelled(true);
            }
        }
    }

    public static void disableWatchdogP3(MotionUpdateEvent e){
        if(notified) {
            if(timer.elapsed(20000)) {
                NotificationManager.show("Disabler", "Hypixel Disabled!", 2000);
                notified = false;
            }
        }

        if (mc.thePlayer.ticksExisted % 40 == 0) {
            int rate = (int) ((cancelledPackets / 40f) * 100);
            cancelledPackets = 0;
        }

        if (hasDisabled) {
            if (confirmTransactionQueue.isEmpty()) {
                lastRelease.reset();
            } else {
                if (confirmTransactionQueue.size() >= 6) {
                    while (!keepAliveQueue.isEmpty())
                        mc.getNetHandler().getNetworkManager().sendPacketNoEvent(keepAliveQueue.poll());

                    while (!confirmTransactionQueue.isEmpty()) {
                        C0FPacketConfirmTransaction poll = confirmTransactionQueue.poll();
                        mc.getNetHandler().getNetworkManager().sendPacketNoEvent(poll);
                    }
                }
            }
        }
    }

    public static boolean ticksMore(boolean more, int irc) {
        Minecraft mc = Minecraft.getMinecraft();
            if (!more) {
                  return (mc.thePlayer.ticksExisted <= irc);
            }
            return (mc.thePlayer.ticksExisted > irc);
        }

    public static void resetHypixel(){
        NotificationManager.show("Disabler", "Don't use speed for 20 seconds!", 2000);
        confirmTransactionQueue.clear();
        keepAliveQueue.clear();
        hasDisabled = false;
        notified = true;
        lastUid = cancelledPackets = 0;
        clickWindowPackets.clear();
        isCraftingItem = false;
        timer.reset();
    }

    public static void enabledHypixel(){
        timer.reset();
        confirmTransactionQueue.clear();
        keepAliveQueue.clear();

        hasDisabled = false;
        lastUid = cancelledPackets = 0;

        clickWindowPackets.clear();
        isCraftingItem = false;
    }

}
