// 
// Decompiled by Procyon v0.6.0
// 

package gg.childtrafficking.smokex.module.modules.exploit;

import net.minecraft.network.play.server.S07PacketRespawn;
import java.util.function.Consumer;
import gg.childtrafficking.smokex.utils.system.NetworkUtils;
import java.util.concurrent.ConcurrentLinkedDeque;
import gg.childtrafficking.smokex.event.events.network.EventReceivePacket;
import gg.childtrafficking.smokex.event.events.network.EventSendPacket;
import gg.childtrafficking.smokex.event.EventListener;
import gg.childtrafficking.smokex.utils.system.TimerUtil;
import gg.childtrafficking.smokex.property.properties.NumberProperty;
import gg.childtrafficking.smokex.property.properties.BooleanProperty;
import net.minecraft.network.Packet;
import java.util.Deque;
import gg.childtrafficking.smokex.module.ModuleCategory;
import gg.childtrafficking.smokex.module.ModuleInfo;
import gg.childtrafficking.smokex.module.Module;

@ModuleInfo(name = "Blink", renderName = "Blink", aliases = {}, description = "Stops all packets", category = ModuleCategory.EXPLOIT)
public final class BlinkModule extends Module
{
    private final Deque<Packet<?>> packets;
    private final BooleanProperty pulse;
    private final NumberProperty<Integer> delay;
    private final TimerUtil timerUtil;
    private final EventListener<EventSendPacket> sendPacketEventListener;
    private final EventListener<EventReceivePacket> receivePacketEventListener;
    
    public BlinkModule() {
        this.packets = new ConcurrentLinkedDeque<Packet<?>>();
        this.pulse = new BooleanProperty("Pulse", true);
        this.delay = new NumberProperty<Integer>("Delay", "Delay", 5, 2, 40, 1, this.pulse::getValue);
        this.timerUtil = new TimerUtil();
        this.sendPacketEventListener = (event -> {
            if (this.mc.thePlayer == null || this.mc.theWorld == null) {
                return;
            }
            else {
                if (this.timerUtil.hasElapsed(this.delay.getValue() * 50 + Math.random() * 20.0)) {
                    this.packets.forEach(NetworkUtils::sendPacket);
                    this.packets.clear();
                    this.timerUtil.reset();
                }
                else {
                    this.packets.add(event.getPacket());
                    event.cancel();
                }
                return;
            }
        });
        this.receivePacketEventListener = (event -> {
            if (event.getPacket() instanceof S07PacketRespawn) {
                this.timerUtil.reset();
                this.packets.clear();
            }
        });
    }
    
    private boolean hasMoved() {
        return this.mc.thePlayer.posX != this.mc.thePlayer.prevPosX || this.mc.thePlayer.posY != this.mc.thePlayer.prevPosY || this.mc.thePlayer.posZ != this.mc.thePlayer.prevPosZ;
    }
    
    @Override
    public void onEnable() {
        this.timerUtil.reset();
        this.packets.clear();
        super.onEnable();
    }
    
    @Override
    public void onDisable() {
        this.packets.forEach(NetworkUtils::sendPacket);
        this.packets.clear();
        super.onDisable();
    }
}
