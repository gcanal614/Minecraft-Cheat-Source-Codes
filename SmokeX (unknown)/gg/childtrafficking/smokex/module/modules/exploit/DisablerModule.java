// 
// Decompiled by Procyon v0.6.0
// 

package gg.childtrafficking.smokex.module.modules.exploit;

import java.util.Iterator;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import gg.childtrafficking.smokex.module.modules.visuals.SessionInformationModule;
import gg.childtrafficking.smokex.module.modules.movement.FlightModule;
import gg.childtrafficking.smokex.module.ModuleManager;
import gg.childtrafficking.smokex.module.modules.movement.SpeedModule;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import gg.childtrafficking.smokex.utils.player.ChatUtils;
import net.minecraft.network.Packet;
import gg.childtrafficking.smokex.utils.system.NetworkUtils;
import gg.childtrafficking.smokex.utils.player.PlayerUtils;
import gg.childtrafficking.smokex.utils.system.StringUtils;
import java.util.concurrent.ConcurrentLinkedDeque;
import gg.childtrafficking.smokex.event.events.network.EventReceivePacket;
import gg.childtrafficking.smokex.event.events.network.EventSendPacket;
import gg.childtrafficking.smokex.event.events.player.EventUpdate;
import gg.childtrafficking.smokex.event.EventListener;
import gg.childtrafficking.smokex.utils.system.TimerUtil;
import gg.childtrafficking.smokex.property.properties.BooleanProperty;
import java.util.Queue;
import gg.childtrafficking.smokex.property.properties.EnumProperty;
import gg.childtrafficking.smokex.module.ModuleCategory;
import gg.childtrafficking.smokex.module.ModuleInfo;
import gg.childtrafficking.smokex.module.Module;

@ModuleInfo(name = "Disabler", renderName = "Disabler", aliases = {}, description = "Disables various anticheats", category = ModuleCategory.EXPLOIT)
public final class DisablerModule extends Module
{
    public final EnumProperty<Mode> modeProperty;
    private double posX;
    private double posY;
    private double posZ;
    private int count;
    private boolean disabled;
    private int bypassValue;
    private long lastTransaction;
    private short currentID;
    private final Queue<TimestampedPacket> transactionQueue;
    private final BooleanProperty negativeSafeProperty;
    private final TimerUtil bypassValueChanger;
    private final TimerUtil forceGroundTimer;
    private final EventListener<EventUpdate> eventUpdate;
    private final EventListener<EventSendPacket> eventSendPacket;
    private final EventListener<EventReceivePacket> eventReceivePacket;
    
    public DisablerModule() {
        this.modeProperty = new EnumProperty<Mode>("Mode", Mode.NULLIFY);
        this.bypassValue = 0;
        this.lastTransaction = 0L;
        this.transactionQueue = new ConcurrentLinkedDeque<TimestampedPacket>();
        this.negativeSafeProperty = new BooleanProperty("NegativeSafe", "Negative Safe", true, () -> this.modeProperty.getValue() == Mode.EXPERIMENTAL);
        this.bypassValueChanger = new TimerUtil();
        this.forceGroundTimer = new TimerUtil();
        this.eventUpdate = (event -> {
            this.setSuffix(StringUtils.upperSnakeCaseToPascal(this.modeProperty.getValue().toString()));
            switch (this.modeProperty.getValue()) {
                case EXPERIMENTAL:
                case NULLIFY: {
                    if (this.forceGroundTimer.hasElapsed(5000.0)) {
                        event.setOnGround(false);
                        this.forceGroundTimer.reset();
                        return;
                    }
                    else if (PlayerUtils.isOnServer("hypixel.net")) {
                        if (!event.isPre()) {
                            return;
                        }
                        else {
                            this.transactionQueue.iterator();
                            final Iterator iterator;
                            while (iterator.hasNext()) {
                                final TimestampedPacket timestampedPacket = iterator.next();
                                final long timestamp = timestampedPacket.timestamp;
                                if (Math.abs(timestamp - System.currentTimeMillis()) >= 1000L) {
                                    NetworkUtils.sendPacket(timestampedPacket.packet);
                                    this.transactionQueue.remove(timestampedPacket);
                                }
                            }
                            if (this.count < 6) {
                                event.setPosY(event.getPosY() + 1.0);
                                break;
                            }
                            else if (this.count == 6) {
                                event.setPosX(event.getPosX() + 1.0);
                                event.setPosZ(event.getPosZ() + 1.0);
                                ChatUtils.addChatMessage("Watchdog has successfully been disabled.");
                                ++this.count;
                                break;
                            }
                            else {
                                break;
                            }
                        }
                    }
                    else {
                        break;
                    }
                    break;
                }
                case MEME: {
                    if (PlayerUtils.isOnServer("hypixel.net") && this.mc.thePlayer.ticksExisted % 5 == 0) {
                        for (int i = 0; i < 50; ++i) {
                            NetworkUtils.sendPacket(new C13PacketPlayerAbilities());
                        }
                        break;
                    }
                    else {
                        break;
                    }
                    break;
                }
            }
            return;
        });
        this.eventSendPacket = (event -> {
            switch (this.modeProperty.getValue()) {
                case EXPERIMENTAL:
                case NULLIFY: {
                    if (PlayerUtils.isOnServer("hypixel.net")) {
                        if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                            final C0FPacketConfirmTransaction c0FPacketConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
                            this.lastTransaction = System.currentTimeMillis();
                        }
                        if (event.getPacket() instanceof C00PacketKeepAlive && ((C00PacketKeepAlive)event.getPacket()).getKey() == 1) {
                            this.transactionQueue.clear();
                            this.bypassValue = 200;
                        }
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer packet = (C03PacketPlayer)event.getPacket();
                            packet.setMoving(false);
                            if (packet.getPositionX() == this.posX && packet.getPositionY() == this.posY && packet.getPositionZ() == this.posZ) {
                                NetworkUtils.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(this.posX + 0.0625, this.posY + 0.004 * Math.random(), this.posZ + 0.0625, false));
                                event.cancel();
                                break;
                            }
                            else {
                                break;
                            }
                        }
                        else {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                    break;
                }
            }
            return;
        });
        this.eventReceivePacket = (event -> {
            S08PacketPlayerPosLook packet2;
            switch (this.modeProperty.getValue()) {
                case EXPERIMENTAL:
                case NULLIFY:
                    Label_0347_1: {
                        if (PlayerUtils.isOnServer("hypixel.net")) {
                            if (event.getPacket() instanceof S07PacketRespawn) {
                                this.count = 0;
                                this.currentID = 0;
                                this.transactionQueue.clear();
                                this.forceGroundTimer.reset();
                                this.bypassValueChanger.reset();
                            }
                            if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                                packet2 = (S08PacketPlayerPosLook)event.getPacket();
                                if (ModuleManager.getInstance(SpeedModule.class).flagCheck.getValue()) {
                                    ModuleManager.getInstance(SpeedModule.class).setToggled(false);
                                }
                                if (ModuleManager.getInstance(FlightModule.class).isToggled()) {}
                                if (this.mc.thePlayer != null && this.mc.thePlayer.getDistance(packet2.getX(), packet2.getY(), packet2.getZ()) < 8.0 && (this.posX != packet2.getX() || this.posY != packet2.getY() || this.posZ != packet2.getZ())) {
                                    ModuleManager.getInstance(SessionInformationModule.class).setFlags(ModuleManager.getInstance(SessionInformationModule.class).getFlags() + 1);
                                }
                                if (this.count < 6) {
                                    if (this.posX == packet2.getX() && this.posY == packet2.getY() && this.posZ == packet2.getZ()) {
                                        ++this.count;
                                        event.cancel();
                                        break Label_0347_1;
                                    }
                                    else {
                                        this.posX = packet2.getX();
                                        this.posY = packet2.getY();
                                        this.posZ = packet2.getZ();
                                        break Label_0347_1;
                                    }
                                }
                                else {
                                    break Label_0347_1;
                                }
                            }
                            else {
                                break Label_0347_1;
                            }
                        }
                        else {
                            break Label_0347_1;
                        }
                        break;
                    }
                case WATCHDOG_NEW: {
                    if (event.getPacket() instanceof S32PacketConfirmTransaction) {
                        final S32PacketConfirmTransaction s32PacketConfirmTransaction = (S32PacketConfirmTransaction)event.getPacket();
                        break;
                    }
                    else {
                        break;
                    }
                    break;
                }
            }
        });
    }
    
    @Override
    public void onEnable() {
        this.disabled = false;
        this.count = 0;
        this.bypassValueChanger.reset();
        this.forceGroundTimer.reset();
        this.transactionQueue.clear();
        super.onEnable();
    }
    
    @Override
    public void init() {
    }
    
    public double getPosX() {
        return this.posX;
    }
    
    public double getPosY() {
        return this.posY;
    }
    
    public double getPosZ() {
        return this.posZ;
    }
    
    private boolean checkAction(final short action) {
        return action > 0 && action < 100;
    }
    
    private class TimestampedPacket
    {
        private final Packet<?> packet;
        private final long timestamp;
        
        public TimestampedPacket(final Packet<?> packet, final long timestamp) {
            this.packet = packet;
            this.timestamp = timestamp;
        }
    }
    
    public enum Mode
    {
        NULLIFY, 
        EXPERIMENTAL, 
        MEME, 
        WATCHDOG_NEW;
    }
}
