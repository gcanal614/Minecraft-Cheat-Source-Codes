/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  org.apache.commons.lang3.RandomUtils
 *  store.intent.intentguard.annotation.Native
 */
package me.uncodable.srt.impl.modules.impl.exploits;

import java.util.ArrayList;
import java.util.Random;
import me.uncodable.srt.Ries;
import me.uncodable.srt.impl.events.api.EventTarget;
import me.uncodable.srt.impl.events.events.entity.EventLivingUpdate;
import me.uncodable.srt.impl.events.events.entity.EventMotionUpdate;
import me.uncodable.srt.impl.events.events.packet.EventPacket;
import me.uncodable.srt.impl.events.events.peripheral.EventKeyPress;
import me.uncodable.srt.impl.events.events.render.Event2DRender;
import me.uncodable.srt.impl.modules.api.Module;
import me.uncodable.srt.impl.modules.api.ModuleInfo;
import me.uncodable.srt.impl.modules.api.settings.Setting;
import me.uncodable.srt.impl.utils.MovementUtils;
import me.uncodable.srt.impl.utils.PacketUtils;
import me.uncodable.srt.impl.utils.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.client.C18PacketSpectate;
import org.apache.commons.lang3.RandomUtils;
import store.intent.intentguard.annotation.Native;

@ModuleInfo(internalName="Disabler", name="Anti-Cheat Disabler", desc="Allows you to *literally* handicap an entire anti-cheat.", category=Module.Category.EXPLOIT, exp=true)
public class AntiCheatDisabler
extends Module {
    private static final String COMBO_BOX_SETTING_NAME = "Disabler Mode";
    private static final String SRT = "SRT Multi-Disabler";
    private static final String LEGACY_SRT = "Legacy SRT Multi-Disabler";
    private static final String VOID_TELEPORT = "Void Teleport";
    private static final String LEGACY_VERUS = "Legacy Verus";
    private static final String LEGACY_VERUS_II = "Legacy Verus II";
    private static final String LEGACY_VERUS_III = "Legacy Verus III";
    private static final String LEGACY_VERUS_IV = "Legacy Verus IV";
    private static final String LEGACY_VERUS_V = "Legacy Verus V";
    private static final String PVP_LAND = "PvP Land";
    private static final String VERUS_COMBAT = "Verus Combat";
    private static final String LEGACY_AGC_COMBAT = "Legacy AntiGamingChair Combat";
    private static final String JI_DAMAGE = "JI Janitor Damage";
    private static final String NORULES = "No Rules Partial";
    private static final String RESPAWN = "Respawn";
    private static final String FORCE_POSITION_LOOK = "Force Position Look";
    private static final String SELF_SPECTATE = "Self-Spectate";
    private static final String LEGACY_AGC_FULL = "Legacy AntiGamingChair Full";
    private static final String LEGACY_TROJAN = "Legacy Trojan";
    private static final String AGC_ASCENSION = "AntiGamingChair Ascension";
    private static final String UNKNOWN = "Unknown";
    private static final String GUARDIAN = "Guardian";
    private static final String VERUS_EXPERIMENTAL = "Verus Experimental";
    private static final String CARBON = "Carbon";
    private static final String AREA_51 = "Area 51";
    private static final String WATCHDOG = "Watchdog";
    private final ArrayList<C0FPacketConfirmTransaction> transactions = new ArrayList();
    private final ArrayList<C00PacketKeepAlive> keepAlives = new ArrayList();
    private final ArrayList<C03PacketPlayer> players = new ArrayList();
    private int packetCounter;
    private int stage;
    private final Timer timer = new Timer();
    private final Timer timer2 = new Timer();
    private boolean sentFirstC00;
    private boolean pvpLandToggle;
    private boolean sendHub;
    private float oldTimerSpeed;
    private double x;
    private double y;
    private double z;
    private final Random random = new Random();

    public AntiCheatDisabler(int key, boolean enabled) {
        super(key, enabled);
        Ries.INSTANCE.getSettingManager().addComboBox(this, "INTERNAL_GENERAL_COMBO_BOX", COMBO_BOX_SETTING_NAME, SRT, VOID_TELEPORT, VERUS_COMBAT, LEGACY_VERUS, LEGACY_VERUS_II, LEGACY_VERUS_III, LEGACY_VERUS_IV, LEGACY_VERUS_V, VERUS_EXPERIMENTAL, WATCHDOG, PVP_LAND, LEGACY_AGC_COMBAT, JI_DAMAGE, NORULES, RESPAWN, FORCE_POSITION_LOOK, SELF_SPECTATE, LEGACY_AGC_FULL, LEGACY_TROJAN, AGC_ASCENSION, CARBON, GUARDIAN, UNKNOWN, AREA_51);
    }

    @Override
    public void onEnable() {
        if (AntiCheatDisabler.MC.thePlayer != null) {
            switch (Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo()) {
                case "Verus Experimental": 
                case "Legacy Verus V": {
                    if (AntiCheatDisabler.MC.thePlayer.onGround && !Ries.INSTANCE.getModuleManager().getModuleByName("AirJump").isEnabled()) break;
                    Ries.INSTANCE.msg("You must be on ground to toggle this anti-cheat disabler.");
                    this.toggle();
                }
            }
            this.oldTimerSpeed = AntiCheatDisabler.MC.timer.timerSpeed;
            this.x = AntiCheatDisabler.MC.thePlayer.posX;
            this.y = AntiCheatDisabler.MC.thePlayer.posY;
            this.z = AntiCheatDisabler.MC.thePlayer.posZ;
        }
    }

    @Override
    public void onDisable() {
        this.transactions.clear();
        this.keepAlives.clear();
        this.players.forEach(packet -> AntiCheatDisabler.MC.thePlayer.sendQueue.addToSendQueue((Packet)packet));
        this.players.clear();
        this.timer.reset();
        this.timer2.reset();
        this.stage = 0;
        this.packetCounter = 0;
        this.z = 0.0;
        this.y = 0.0;
        this.x = 0.0;
        this.sendHub = false;
        this.pvpLandToggle = false;
        this.sentFirstC00 = false;
        AntiCheatDisabler.MC.timer.timerSpeed = this.oldTimerSpeed;
    }

    @EventTarget(target=EventKeyPress.class)
    public void onUpdate(EventKeyPress e) {
        switch (Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo()) {
            case "PvP Land": {
                if (e.getKey() != 29) break;
                boolean bl = this.pvpLandToggle = !this.pvpLandToggle;
                if (this.pvpLandToggle || this.sendHub) break;
                AntiCheatDisabler.MC.thePlayer.sendChatMessage("/hub");
                this.sendHub = true;
            }
        }
    }

    @EventTarget(target=EventMotionUpdate.class)
    @Native
    public void onMotion(EventMotionUpdate e) {
        String mode = Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo();
        if (e.getState() == EventMotionUpdate.State.PRE) {
            switch (mode) {
                case "SRT Multi-Disabler": {
                    if (!this.timer.elapsed(5000L)) break;
                    if (this.keepAlives.size() - 1 >= this.packetCounter) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                    }
                    if (this.transactions.size() - 1 >= this.packetCounter) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                    }
                    ++this.packetCounter;
                    this.timer.reset();
                    break;
                }
                case "Legacy Verus III": {
                    if (this.packetCounter == 0) {
                        MovementUtils.zeroMotion();
                    } else if (this.packetCounter > 0 && AntiCheatDisabler.MC.thePlayer.ticksExisted % 20 == 0) {
                        e.setPosY(0.0);
                        e.setOnGround(false);
                    }
                    if (AntiCheatDisabler.MC.thePlayer.ticksExisted % 200 != 0) break;
                    if (this.transactions.size() - 1 >= this.packetCounter) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                    }
                    if (this.keepAlives.size() - 1 >= this.packetCounter) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                    }
                    ++this.packetCounter;
                    Ries.INSTANCE.msg("counter increased, count: " + this.packetCounter);
                    break;
                }
                case "Legacy Verus IV": {
                    AntiCheatDisabler.MC.timer.timerSpeed = 0.4f;
                    if (AntiCheatDisabler.MC.thePlayer.ticksExisted % 5 == 0) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(AntiCheatDisabler.MC.thePlayer.posX, AntiCheatDisabler.MC.thePlayer.posY - 12.0, AntiCheatDisabler.MC.thePlayer.posZ, AntiCheatDisabler.MC.thePlayer.onGround));
                    }
                }
                case "Legacy Verus II": 
                case "Legacy Verus": {
                    if (!this.timer.elapsed(6000L)) break;
                    if (this.transactions.size() - 1 >= this.packetCounter) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter++));
                    }
                    this.timer.reset();
                    break;
                }
                case "PvP Land": {
                    if (this.pvpLandToggle) break;
                    if (!this.transactions.isEmpty()) {
                        this.transactions.forEach(packet -> AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent((Packet)packet));
                        this.transactions.clear();
                    }
                    if (this.keepAlives.isEmpty()) break;
                    this.keepAlives.forEach(packet -> AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent((Packet)packet));
                    this.keepAlives.clear();
                    break;
                }
                case "Legacy AntiGamingChair Full": 
                case "Void Teleport": {
                    if (AntiCheatDisabler.MC.thePlayer.ticksExisted % 20 != 0) break;
                    e.setPosY(0.0);
                    e.setOnGround(false);
                    break;
                }
                case "Verus Combat": {
                    if (!this.timer.elapsed(10000L)) break;
                    if (this.transactions.size() - 1 >= this.packetCounter) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter++));
                    }
                    this.timer.reset();
                    break;
                }
                case "JI Janitor Damage": {
                    if (AntiCheatDisabler.MC.thePlayer.hurtTime != 0) break;
                    for (int i = 0; i < 8; ++i) {
                        AntiCheatDisabler.MC.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(AntiCheatDisabler.MC.thePlayer.posX, AntiCheatDisabler.MC.thePlayer.posY + (double)0.42f, AntiCheatDisabler.MC.thePlayer.posZ, false));
                        AntiCheatDisabler.MC.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(AntiCheatDisabler.MC.thePlayer.posX, AntiCheatDisabler.MC.thePlayer.posY, AntiCheatDisabler.MC.thePlayer.posZ, false));
                    }
                    AntiCheatDisabler.MC.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(AntiCheatDisabler.MC.thePlayer.posX, AntiCheatDisabler.MC.thePlayer.posY, AntiCheatDisabler.MC.thePlayer.posZ, true));
                    break;
                }
                case "Respawn": {
                    AntiCheatDisabler.MC.thePlayer.sendQueue.addToSendQueue(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
                    break;
                }
                case "Legacy Trojan": {
                    if (this.transactions.size() < 300) break;
                    this.transactions.forEach(packet -> AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent((Packet)packet));
                    this.transactions.clear();
                    break;
                }
                case "Guardian": {
                    AntiCheatDisabler.MC.timer.timerSpeed = 0.25f;
                    break;
                }
                case "Self-Spectate": {
                    AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(new C18PacketSpectate(AntiCheatDisabler.MC.thePlayer.getUniqueID()));
                    break;
                }
                case "Legacy Verus V": {
                    if (this.packetCounter < 2) {
                        AntiCheatDisabler.MC.thePlayer.setPositionAndUpdate(this.x, this.y, this.z);
                    } else {
                        AntiCheatDisabler.MC.timer.timerSpeed = 0.4f;
                    }
                    if (AntiCheatDisabler.MC.thePlayer.ticksExisted % 200 != 0) break;
                    if (this.packetCounter < 2) {
                        Ries.INSTANCE.msg(String.format("packetCount %d...", this.packetCounter));
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                        AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                        ++this.packetCounter;
                        break;
                    }
                    this.transactions.clear();
                    this.keepAlives.clear();
                    Ries.INSTANCE.msg("froze ping");
                    break;
                }
                case "Verus Experimental": {
                    if (this.packetCounter < 2) {
                        AntiCheatDisabler.MC.thePlayer.setPositionAndUpdate(this.x, this.y, this.z);
                    }
                    if (this.timer.elapsed(10000L) && this.packetCounter < 2) {
                        if (this.transactions.size() - 1 >= this.packetCounter) {
                            AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                            AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                            ++this.packetCounter;
                        }
                        this.timer.reset();
                    }
                    if (MovementUtils.isMoving2()) {
                        ++this.stage;
                    }
                    if (this.stage <= 10) break;
                    this.stage = 0;
                    this.x = AntiCheatDisabler.MC.thePlayer.posX;
                    this.z = AntiCheatDisabler.MC.thePlayer.posZ;
                    break;
                }
                case "Carbon": {
                    AntiCheatDisabler.MC.timer.timerSpeed = 0.1f;
                    if (AntiCheatDisabler.MC.thePlayer.ticksExisted % 100 != 0) break;
                    this.players.forEach(player -> AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent((Packet)player));
                    this.players.clear();
                    break;
                }
            }
        }
    }

    @EventTarget(target=EventLivingUpdate.class)
    @Native
    public void onLiving(EventLivingUpdate e) {
        switch (Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo()) {
            case "SRT Multi-Disabler": {
                AntiCheatDisabler.MC.thePlayer.sendPlayerAbilities();
            }
        }
    }

    @EventTarget(target=EventPacket.class)
    @Native
    public void onPacket(EventPacket e) {
        switch (Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo()) {
            case "Verus Experimental": {
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    if (this.packetCounter < 2) {
                        this.keepAlives.add((C00PacketKeepAlive)PacketUtils.getPacket(e.getPacket()));
                    }
                    e.setCancelled(true);
                    break;
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    if (this.packetCounter < 2) {
                        this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                    }
                    e.setCancelled(true);
                    break;
                }
                if (!(e.getPacket() instanceof C03PacketPlayer)) break;
                C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                if (this.stage < 6) {
                    AntiCheatDisabler.MC.thePlayer.prevPosX = AntiCheatDisabler.MC.thePlayer.posX = this.x;
                    AntiCheatDisabler.MC.thePlayer.lastTickPosX = AntiCheatDisabler.MC.thePlayer.posX;
                    AntiCheatDisabler.MC.thePlayer.prevPosZ = AntiCheatDisabler.MC.thePlayer.posZ = this.z;
                    AntiCheatDisabler.MC.thePlayer.lastTickPosZ = AntiCheatDisabler.MC.thePlayer.posZ;
                    if (this.stage % 2 == 0) {
                        packet.setY(packet.getPositionY() + 1.1);
                    }
                    packet.setOnGround(false);
                    break;
                }
                if (this.stage != 7) break;
                packet.setOnGround(true);
                break;
            }
            case "SRT Multi-Disabler": {
                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                    if (AntiCheatDisabler.MC.thePlayer.ticksExisted % 4 == 0) {
                        MovementUtils.zeroMotion();
                        AntiCheatDisabler.MC.timer.timerSpeed = 0.3f;
                        packet.setY((int)(packet.getY() + (this.random.nextBoolean() ? AntiCheatDisabler.MC.thePlayer.posY + (double)RandomUtils.nextInt((int)1000, (int)10000) : AntiCheatDisabler.MC.thePlayer.posY - (double)RandomUtils.nextInt((int)1000, (int)10000))));
                        packet.setX((int)(this.random.nextBoolean() ? AntiCheatDisabler.MC.thePlayer.posX + (double)RandomUtils.nextInt((int)5, (int)1000) : AntiCheatDisabler.MC.thePlayer.posX - (double)RandomUtils.nextInt((int)5, (int)1000)));
                        packet.setZ((int)(this.random.nextBoolean() ? AntiCheatDisabler.MC.thePlayer.posZ + (double)RandomUtils.nextInt((int)5, (int)1000) : AntiCheatDisabler.MC.thePlayer.posZ - (double)RandomUtils.nextInt((int)5, (int)1000)));
                    } else {
                        AntiCheatDisabler.MC.timer.timerSpeed = 0.6f;
                        packet.setY((int)packet.getY());
                    }
                    AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(new C0CPacketInput(AntiCheatDisabler.MC.thePlayer.moveStrafing, AntiCheatDisabler.MC.thePlayer.moveForward, AntiCheatDisabler.MC.thePlayer.movementInput.jump, AntiCheatDisabler.MC.thePlayer.movementInput.sneak));
                    break;
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                    e.setCancelled(true);
                    break;
                }
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    if (!this.sentFirstC00) {
                        this.sentFirstC00 = true;
                        break;
                    }
                    this.keepAlives.add((C00PacketKeepAlive)PacketUtils.getPacket(e.getPacket()));
                    e.setCancelled(true);
                    break;
                }
                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    C0BPacketEntityAction packet = (C0BPacketEntityAction)PacketUtils.getPacket(e.getPacket());
                    e.setCancelled(packet.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING || packet.getAction() == C0BPacketEntityAction.Action.START_SPRINTING || packet.getAction() == C0BPacketEntityAction.Action.START_SNEAKING || packet.getAction() == C0BPacketEntityAction.Action.STOP_SNEAKING);
                    break;
                }
                if (!(e.getPacket() instanceof C13PacketPlayerAbilities)) break;
                C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities)PacketUtils.getPacket(e.getPacket());
                packet.setCreativeMode(true);
                packet.setAllowFlying(true);
                packet.setFlying(true);
                packet.setInvulnerable(true);
                packet.setWalkSpeed(Float.MAX_VALUE);
                packet.setFlySpeed(Float.MAX_VALUE);
                break;
            }
            case "PvP Land": {
                if (!this.pvpLandToggle) break;
                this.sendHub = false;
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    this.keepAlives.add((C00PacketKeepAlive)PacketUtils.getPacket(e.getPacket()));
                    e.setCancelled(true);
                    break;
                }
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                e.setCancelled(true);
                break;
            }
            case "Legacy Verus II": {
                Packet<INetHandlerPlayServer> packet;
                if (e.getPacket() instanceof C03PacketPlayer && this.timer2.elapsed(1000L)) {
                    packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                    ((C03PacketPlayer)packet).setY(AntiCheatDisabler.MC.thePlayer.posY - RandomUtils.nextDouble((double)11.0, (double)15.0));
                    this.timer2.reset();
                }
            }
            case "Legacy Verus": {
                if (e.getPacket() instanceof C03PacketPlayer) {
                    AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(new C0CPacketInput());
                    break;
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                    e.setCancelled(true);
                    break;
                }
                if (!(e.getPacket() instanceof C0BPacketEntityAction)) break;
                Packet<INetHandlerPlayServer> packet = (C0BPacketEntityAction)PacketUtils.getPacket(e.getPacket());
                e.setCancelled(((C0BPacketEntityAction)packet).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING || ((C0BPacketEntityAction)packet).getAction() == C0BPacketEntityAction.Action.START_SPRINTING);
                break;
            }
            case "Legacy Verus IV": 
            case "Legacy Verus III": {
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    this.keepAlives.add((C00PacketKeepAlive)PacketUtils.getPacket(e.getPacket()));
                    e.setCancelled(true);
                    break;
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                    e.setCancelled(true);
                    break;
                }
                if (!(e.getPacket() instanceof C03PacketPlayer)) break;
                AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(new C0CPacketInput());
                break;
            }
            case "Legacy AntiGamingChair Combat": {
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket());
                packet.setUid((short)0);
                packet.setWindowId(0);
                break;
            }
            case "Verus Combat": {
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                e.setCancelled(true);
                break;
            }
            case "No Rules Partial": {
                e.setCancelled(e.getPacket() instanceof C03PacketPlayer && AntiCheatDisabler.MC.thePlayer.ticksExisted % 2 == 0);
                break;
            }
            case "Force Position Look": {
                if (!(e.getPacket() instanceof C03PacketPlayer)) break;
                C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                e.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), packet.getYaw(), packet.getPitch(), packet.isOnGround()));
                break;
            }
            case "Legacy AntiGamingChair Full": {
                if (!(e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook)) break;
                C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                AntiCheatDisabler.MC.thePlayer.sendQueue.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), packet.isOnGround()));
                e.setCancelled(true);
                break;
            }
            case "Unknown": {
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                C0FPacketConfirmTransaction packet = (C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket());
                Ries.INSTANCE.msg("I fucking hate this community: u=" + packet.getUid() + ", i=" + packet.getWindowId() + ", a=" + packet.isAccepted());
                e.setCancelled(MovementUtils.isMoving());
                break;
            }
            case "Legacy Trojan": {
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                    e.setCancelled(true);
                }
                if (!(e.getPacket() instanceof C03PacketPlayer)) break;
                C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                packet.setOnGround(true);
                if (this.transactions.size() < 300 && this.transactions.size() % 30 == 0) {
                    packet.setY(packet.getPositionY() - RandomUtils.nextDouble((double)10.1, (double)11.0));
                }
                packet.setY((int)packet.getPositionY());
                break;
            }
            case "AntiGamingChair Ascension": {
                if (!(e.getPacket() instanceof C00PacketKeepAlive)) break;
                try {
                    Thread.sleep(5000L);
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                }
                break;
            }
            case "Guardian": {
                if (!(e.getPacket() instanceof C03PacketPlayer) || AntiCheatDisabler.MC.thePlayer.ticksExisted % 5 != 0) break;
                C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                packet.setY(packet.getPositionY() - (double)RandomUtils.nextFloat((float)10.0f, (float)10.3f));
                break;
            }
            case "Legacy Verus V": {
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    if (this.packetCounter < 2) {
                        this.transactions.add((C0FPacketConfirmTransaction)PacketUtils.getPacket(e.getPacket()));
                    }
                    e.setCancelled(true);
                    break;
                }
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    if (this.packetCounter < 2) {
                        this.keepAlives.add((C00PacketKeepAlive)PacketUtils.getPacket(e.getPacket()));
                    }
                    e.setCancelled(true);
                    break;
                }
                if (!(e.getPacket() instanceof C03PacketPlayer) || this.packetCounter < 2 || AntiCheatDisabler.MC.thePlayer.ticksExisted % 5 != 0) break;
                C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                packet.setY(packet.getPositionY() / 2.0);
                packet.setOnGround(false);
                break;
            }
            case "Carbon": {
                if (!(e.getPacket() instanceof C03PacketPlayer) || AntiCheatDisabler.MC.thePlayer.ticksExisted % 100 == 0) break;
                C03PacketPlayer packet = (C03PacketPlayer)PacketUtils.getPacket(e.getPacket());
                this.players.add(packet);
                e.setCancelled(true);
                break;
            }
            case "Area 51": {
                if (!(e.getPacket() instanceof C00PacketKeepAlive)) break;
                C00PacketKeepAlive packet = (C00PacketKeepAlive)PacketUtils.getPacket(e.getPacket());
                packet.setKey(packet.getKey() - 1);
            }
        }
    }

    @EventTarget(target=Event2DRender.class)
    public void onRender(Event2DRender e) {
        switch (Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo()) {
            case "PvP Land": {
                AntiCheatDisabler.MC.fontRendererObj.drawStringWithShadow(String.format("Press Left CTRL to %s the PvP Land disabler.", this.pvpLandToggle ? "disable" : "enable"), (float)e.getScaledResolution().getScaledWidth() / 2.0f - 130.0f, (float)e.getScaledResolution().getScaledHeight() / 2.0f - 15.0f, 0xFFFFFF);
            }
        }
    }
}

