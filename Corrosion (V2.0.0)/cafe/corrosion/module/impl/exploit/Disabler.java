/*
 * Decompiled with CFR 0.152.
 */
package cafe.corrosion.module.impl.exploit;

import cafe.corrosion.event.impl.EventPacketIn;
import cafe.corrosion.event.impl.EventPacketOut;
import cafe.corrosion.event.impl.EventUpdate;
import cafe.corrosion.module.Module;
import cafe.corrosion.module.attribute.ModuleAttributes;
import cafe.corrosion.property.type.EnumProperty;
import cafe.corrosion.util.nameable.INameable;
import cafe.corrosion.util.packet.PacketUtil;
import cafe.corrosion.util.timer.Stopwatch;
import java.util.concurrent.ConcurrentLinkedQueue;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

@ModuleAttributes(name="Disabler", description="Exploits vulnerabilities within AntiCheats to allow cheats to bypass", tMobileName="Disabled CSR", category=Module.Category.EXPLOIT)
public class Disabler
extends Module {
    private final EnumProperty<Mode> mode = new EnumProperty((Module)this, "Mode", (INameable[])Mode.values());
    private final ConcurrentLinkedQueue<Packet<?>> keepAlives = new ConcurrentLinkedQueue();
    private final ConcurrentLinkedQueue<Packet<?>> transactions = new ConcurrentLinkedQueue();
    private final Stopwatch stopwatch = new Stopwatch();
    private boolean teleporting;

    public Disabler() {
        this.registerEventHandler(EventUpdate.class, eventUpdate -> {
            switch ((Mode)this.mode.getValue()) {
                case VERUS_SEMI: {
                    if (eventUpdate.isPre() && Disabler.mc.thePlayer.ticksExisted % 43 == 0 && !this.transactions.isEmpty()) {
                        PacketUtil.sendNoEvent(this.transactions.poll());
                    }
                    if (eventUpdate.isPre() || Disabler.mc.thePlayer.ticksExisted % 110 != 0) break;
                    double x2 = Disabler.mc.thePlayer.posX;
                    double y2 = Disabler.mc.thePlayer.posY;
                    double z2 = Disabler.mc.thePlayer.posZ;
                    PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x2, y2 - 14.37, z2, false));
                    PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x2, y2, z2, false));
                    this.teleporting = true;
                    break;
                }
                case VERUS_COMBAT: {
                    if (Disabler.mc.thePlayer.ticksExisted % 180 != 0) break;
                    while (this.transactions.size() > 200) {
                        PacketUtil.sendNoEvent(this.transactions.poll());
                    }
                    break;
                }
                case LUNAR: {
                    if (!eventUpdate.isPre()) {
                        return;
                    }
                    C13PacketPlayerAbilities packetPlayerAbilities = new C13PacketPlayerAbilities(Disabler.mc.thePlayer.capabilities);
                    packetPlayerAbilities.setFlying(Disabler.mc.thePlayer.ticksExisted % 2 == 0);
                    PacketUtil.sendNoEvent(packetPlayerAbilities);
                }
            }
        });
        this.registerEventHandler(EventPacketOut.class, eventPacketOut -> {
            if (Disabler.mc.thePlayer != null && Disabler.mc.thePlayer.ticksExisted <= 5) {
                this.keepAlives.clear();
                this.transactions.clear();
                return;
            }
            switch ((Mode)this.mode.getValue()) {
                case WATCHDOG_PING: {
                    if ((eventPacketOut.getPacket() instanceof C00PacketKeepAlive || eventPacketOut.getPacket() instanceof C0FPacketConfirmTransaction) && (Disabler.mc.thePlayer.ticksExisted % 600 <= 3 || Disabler.mc.thePlayer.ticksExisted < 20)) {
                        PacketUtil.sendPacketDelayed(eventPacketOut.getPacket(), 200L);
                        eventPacketOut.setCancelled(true);
                    }
                    if (!(eventPacketOut.getPacket() instanceof C0BPacketEntityAction)) break;
                    eventPacketOut.setCancelled(true);
                    break;
                }
                case MATRIX: {
                    if (eventPacketOut.getPacket() instanceof C03PacketPlayer) {
                        C03PacketPlayer packetPlayer = (C03PacketPlayer)eventPacketOut.getPacket();
                        double x2 = Disabler.mc.thePlayer.posX;
                        double y2 = Disabler.mc.thePlayer.posY;
                        double z2 = Disabler.mc.thePlayer.posZ;
                        float yaw = Disabler.mc.thePlayer.rotationYaw;
                        float pitch = Disabler.mc.thePlayer.rotationPitch;
                        if (packetPlayer.isMoving()) {
                            x2 = packetPlayer.getPositionX();
                            y2 = packetPlayer.getPositionY();
                            z2 = packetPlayer.getPositionZ();
                        }
                        if (packetPlayer.getRotating()) {
                            yaw = packetPlayer.getYaw();
                            pitch = packetPlayer.getPitch();
                        }
                        PacketUtil.sendNoEvent(new C08PacketPlayerBlockPlacement(Disabler.mc.thePlayer.getPosition().down(256), 256, new ItemStack(Blocks.stonebrick, 64), 2.0f, 10.0f, 36.0f));
                        PacketUtil.sendNoEvent(new C08PacketPlayerBlockPlacement(Disabler.mc.thePlayer.getPosition().down(256), 256, new ItemStack(Blocks.stonebrick, 64), 2.0f, 10.0f, 36.0f));
                        eventPacketOut.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(x2, y2, z2, packetPlayer.isOnGround()));
                        PacketUtil.sendNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(x2, y2, z2, yaw, pitch, packetPlayer.isOnGround()));
                        break;
                    }
                    if (!(eventPacketOut.getPacket() instanceof C0BPacketEntityAction)) break;
                    eventPacketOut.setCancelled(true);
                    break;
                }
                case VERUS_SEMI: {
                    if (eventPacketOut.getPacket() instanceof C0BPacketEntityAction) {
                        eventPacketOut.setCancelled(true);
                        break;
                    }
                    if (!(eventPacketOut.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                    short uid = ((C0FPacketConfirmTransaction)eventPacketOut.getPacket()).getUid();
                    if (uid > 0 && uid < 100) {
                        return;
                    }
                    if (this.transactions.size() > 260) {
                        PacketUtil.sendNoEvent(this.transactions.poll());
                    }
                    this.transactions.add((Packet<?>)eventPacketOut.getPacket());
                    eventPacketOut.setCancelled(true);
                    break;
                }
                case VERUS_COMBAT: {
                    if (eventPacketOut.getPacket() instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction)eventPacketOut.getPacket();
                        this.transactions.add(packetConfirmTransaction);
                        eventPacketOut.setCancelled(true);
                        break;
                    }
                    if (!(eventPacketOut.getPacket() instanceof C0BPacketEntityAction)) break;
                    eventPacketOut.setCancelled(true);
                }
            }
        });
        this.registerEventHandler(EventPacketIn.class, eventPacketIn -> {
            switch ((Mode)this.mode.getValue()) {
                case VERUS_SEMI: {
                    double z2;
                    double y2;
                    if (!(eventPacketIn.getPacket() instanceof S08PacketPlayerPosLook) || !this.teleporting) break;
                    S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)eventPacketIn.getPacket();
                    double x2 = packet.getX() - Disabler.mc.thePlayer.posX;
                    double diff = Math.sqrt(x2 * x2 + (y2 = packet.getY() - Disabler.mc.thePlayer.posY) * y2 + (z2 = packet.getZ() - Disabler.mc.thePlayer.posZ) * z2);
                    if (diff > 8.0 || Disabler.mc.thePlayer.ticksExisted <= 35) {
                        Disabler.mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
                    }
                    if (!Disabler.mc.thePlayer.sendQueue.doneLoadingTerrain) {
                        Disabler.mc.thePlayer.prevPosX = Disabler.mc.thePlayer.posX;
                        Disabler.mc.thePlayer.prevPosY = Disabler.mc.thePlayer.posY;
                        Disabler.mc.thePlayer.prevPosZ = Disabler.mc.thePlayer.posZ;
                        Disabler.mc.thePlayer.sendQueue.doneLoadingTerrain = true;
                        mc.displayGuiScreen(null);
                    }
                    eventPacketIn.setCancelled(true);
                    PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getX(), packet.getY(), packet.getZ(), false));
                    this.teleporting = false;
                    break;
                }
                case WATCHDOG_PING: {
                    if (!(eventPacketIn.getPacket() instanceof S08PacketPlayerPosLook)) break;
                    S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)eventPacketIn.getPacket();
                    double x3 = packet.getX() - Disabler.mc.thePlayer.posX;
                    double y3 = packet.getY() - Disabler.mc.thePlayer.posY;
                    double z3 = packet.getZ() - Disabler.mc.thePlayer.posZ;
                    double diff = Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
                    if (Disabler.mc.thePlayer.ticksExisted > 20) {
                        return;
                    }
                    Disabler.mc.thePlayer.motionZ = 0.0;
                    Disabler.mc.thePlayer.motionY = 0.0;
                    Disabler.mc.thePlayer.motionX = 0.0;
                    PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getX(), packet.getY(), packet.getZ(), false));
                    Disabler.mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
                    if (!Disabler.mc.thePlayer.sendQueue.doneLoadingTerrain) {
                        Disabler.mc.thePlayer.prevPosX = Disabler.mc.thePlayer.posX;
                        Disabler.mc.thePlayer.prevPosY = Disabler.mc.thePlayer.posY;
                        Disabler.mc.thePlayer.prevPosZ = Disabler.mc.thePlayer.posZ;
                        Disabler.mc.thePlayer.sendQueue.doneLoadingTerrain = true;
                        mc.displayGuiScreen(null);
                    }
                    eventPacketIn.setCancelled(true);
                }
            }
        });
    }

    @Override
    public void onEnable() {
        this.keepAlives.clear();
        this.transactions.clear();
    }

    @Override
    public void onDisable() {
        while (!this.keepAlives.isEmpty()) {
            PacketUtil.sendNoEvent(this.keepAlives.poll());
        }
        while (!this.transactions.isEmpty()) {
            PacketUtil.sendNoEvent(this.transactions.poll());
        }
        super.onDisable();
    }

    @Override
    public String getMode() {
        return ((Mode)this.mode.getValue()).getName();
    }

    static enum Mode implements INameable
    {
        VERUS_SEMI("Verus Semi"),
        WATCHDOG_PING("Watchdog"),
        VERUS_COMBAT("Verus Combat"),
        MATRIX("Matrix"),
        LUNAR("Lunar");

        private final String name;

        @Override
        public String getName() {
            return this.name;
        }

        private Mode(String name) {
            this.name = name;
        }
    }
}

