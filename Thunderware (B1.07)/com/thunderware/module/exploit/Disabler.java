package com.thunderware.module.exploit;

import java.util.ArrayList;

import org.lwjgl.input.Keyboard;

import com.thunderware.events.Event;
import com.thunderware.events.EventDirection;
import com.thunderware.events.EventType;
import com.thunderware.events.listeners.EventMotion;
import com.thunderware.events.listeners.EventPacket;
import com.thunderware.module.ModuleBase;
import com.thunderware.settings.settings.ModeSetting;
import com.thunderware.utils.MovementUtils;
import com.thunderware.utils.TimerUtils;

import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C02PacketUseEntity.Action;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.AxisAlignedBB;

public class Disabler extends ModuleBase {

	public ModeSetting mode;
	public TimerUtils timer = new TimerUtils();
    private int transactions;
	private ArrayList<Packet> packets = new ArrayList<>();
	
	public Disabler() {
		super("Disabler", Keyboard.KEY_NONE, Category.EXPLOIT);
		setDisplayName("Anticheat Disabler");
		ArrayList<String> modes = new ArrayList<>();
		modes.add("Hypixel High Ping");
		modes.add("Hypixel");
		modes.add("AGC");
		modes.add("OldGhostlySemi");
		modes.add("Test");
		this.mode = new ModeSetting("Mode", modes);
		addSettings(mode);
	}
	
	public void onEvent(Event event) {
		this.setSuffix(mode.getCurrentValue());
		if(event instanceof EventPacket) {
			if(mc.thePlayer == null)
				return;
			EventPacket e = (EventPacket)event;
			switch(mode.getCurrentValue()) {
					
				case "AGC":
					
                    if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                        transactions++;
                        if(transactions % 3 <= 0.5) {
                        	e.setCancelled(true);
                        }
                    }
					
					break;
					
				case "OldGhostlySemi":
					if(e.getPacket() instanceof C00PacketKeepAlive || e.getPacket() instanceof C0FPacketConfirmTransaction) {
						e.setCancelled(true);
						packets.add(e.getPacket());
					}
					break;
					
				case "Hypixel":
					EventPacket eventPacket = (EventPacket) event;
		            if (eventPacket.getDirection() == EventDirection.OUTGOING) {
		            	EventPacket eventPacketOut = e;
		            	if(mc.thePlayer.ticksExisted <= 60 && mc.thePlayer.ticksExisted % 4 == 0) {
		            		e.setCancelled(true);
		            	}
		            	if(mc.thePlayer.ticksExisted > 60 && mc.thePlayer.ticksExisted % 240 == 0 && !(eventPacketOut.getPacket() instanceof C00PacketKeepAlive) && !(eventPacketOut.getPacket() instanceof C0FPacketConfirmTransaction)) {
		            		event.setCancelled(true);
		            	}
						if (eventPacketOut.getPacket() instanceof C0BPacketEntityAction)
	                        eventPacketOut.setCancelled(true);
	                    if (eventPacketOut.getPacket() instanceof C03PacketPlayer) {
	                        C03PacketPlayer packetPlayer = (C03PacketPlayer) eventPacketOut.getPacket();
	                        double x = mc.thePlayer.posX,
	                                y = mc.thePlayer.posY,
	                                z = mc.thePlayer.posZ;
	                        float yaw = mc.thePlayer.rotationYaw,
	                                pitch = mc.thePlayer.rotationPitch;


	                        if (packetPlayer.isMoving()) {
	                            x = packetPlayer.getPositionX();
	                            y = packetPlayer.getPositionY();
	                            z = packetPlayer.getPositionZ();
	                        }
	                        if (packetPlayer.getRotating()) {
	                            yaw = packetPlayer.getYaw();
	                            pitch = packetPlayer.getPitch();
	                        }
	                        if (mc.thePlayer.ticksExisted > 60) {
	                            y += 1.0E-32;
	                            //eventPacketOut.setCancelled(true);
	                            //mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, packetPlayer.isOnGround()));
	                        } else {
	                            for (int i = 0; i < 10; i++) {
	                                double d = i > 2 && i < 8 ? -14.36 : 14.36;
	                                d -= Math.random() / 500;
		                        	if(mc.thePlayer.ticksExisted % 30 == 0)
		                        		mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x, y + d, z, packetPlayer.isOnGround()));
	                            }
	                        }
	                        if(!packetPlayer.isMoving() && !packetPlayer.getRotating() && !mc.thePlayer.isUsingItem()) {
	                        	e.setCancelled(true);
	                        }
	                    }
		            }else {
		            	EventPacket eventPacketIn = e;
		            	if (eventPacketIn.getPacket() instanceof S08PacketPlayerPosLook) {
	                        S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) eventPacketIn.getPacket();
	                        double x = packet.getX() - mc.thePlayer.posX;
	                        double y = packet.getY() - mc.thePlayer.posY;
	                        double z = packet.getZ() - mc.thePlayer.posZ;
	                        double diff = Math.sqrt(x * x + y * y + z * z);
	                        mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
	                        if (mc.thePlayer.ticksExisted > 60) {
	                            mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0;
	                            transactions = 1;
	                        }
	                        mc.thePlayer.sendQueue.addToSendQueueNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
	                        if (!mc.thePlayer.sendQueue.doneLoadingTerrain) {
	                            mc.thePlayer.prevPosX = mc.thePlayer.posX;
	                            mc.thePlayer.prevPosY = mc.thePlayer.posY;
	                            mc.thePlayer.prevPosZ = mc.thePlayer.posZ;
	                            mc.thePlayer.sendQueue.doneLoadingTerrain = true;
	                            mc.thePlayer.ticksExisted = 0;
	                            mc.displayGuiScreen(null);
	                        }
	                        eventPacketIn.setCancelled(true);
	                    }
		            }
					
					break;
					
				case "Hypixel High Ping":
					e.setCancelled(false);
		            if(mc.getNetHandler() == null)
		                return;
		            if(mc.thePlayer.openContainer != null)
		                return;
		            if((mc.thePlayer.ticksExisted < 60 || mc.thePlayer.ticksExisted % 240 == 0) && event.getDirection() == EventDirection.OUTGOING){
		                event.setCancelled(true);
		            }
		            if(event.getDirection() == EventDirection.OUTGOING && ((e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive) || mc.thePlayer.ticksExisted % 60 == 0 && ((EventPacket) e).getPacket() instanceof C03PacketPlayer)){
		                e.setCancelled(true);
		                packets.add(e.getPacket());
		               // mc.thePlayer.addChatComponentMessage(new ChatComponentText("limbo"));
		            }
					break;
					
				case "Test":

					if(e.getPacket() instanceof C0FPacketConfirmTransaction) {
						e.setCancelled(true);
						packets.add(e.getPacket());
					}
					if(e.getPacket() instanceof C03PacketPlayer) {
						if(mc.thePlayer.ticksExisted % 50 == 0) {
							e.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,mc.thePlayer.posY-14.36,mc.thePlayer.posZ,true));
						}
					}
					break;
			}
		}
		
		if(event instanceof EventMotion) {
			if(mc.thePlayer == null)
				return;
			EventMotion e = (EventMotion)event;
			switch(mode.getCurrentValue()) {
					
				case "Hypixel":
					if(transactions == 1) {
                        mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0;
                        transactions = 0;
					}
                    break;
                    
				case "Hypixel High Ping":
		            if(e.type != EventType.PRE || mc.theWorld == null)
		                return;
		            if(timer.hasReached(50) && !packets.isEmpty() && packets.size() > 2){
		                for(Packet p: packets){
		                    mc.thePlayer.sendQueue.addToSendQueueNoEvent(p);
		                    //mc.thePlayer.addChatComponentMessage(new ChatComponentText("semi"));
		                }
		                timer.reset();
		                packets.clear();
		            }
					break;
		            
				case "Test":
					if(packets.size() > 2) {
						for(Packet p: packets) {
							mc.thePlayer.sendQueue.addToSendQueueNoEvent(p);
						}
						packets.clear();
					}
					break;
					
				case "GhostlySemi":
					if(mc.thePlayer.ticksExisted % 45 == 0) {
						for(Packet p : packets) {
							mc.getNetHandler().addToSendQueueNoEvent(p);
						}
						packets.clear();
						C13PacketPlayerAbilities packet = new C13PacketPlayerAbilities();
						packet.setAllowFlying(true);
						packet.setFlying(true);
						mc.getNetHandler().addToSendQueueNoEvent(packet);
					}
					break;
			}
		}
	}
	
	public static boolean isBlockUnder() {
        for (int offset = 0; offset < mc.thePlayer.posY + mc.thePlayer.getEyeHeight(); offset += 2) {
            final AxisAlignedBB boundingBox = mc.thePlayer.getEntityBoundingBox().offset(0, -offset, 0);

            if (!mc.theWorld.getCollidingBoundingBoxes(mc.thePlayer, boundingBox).isEmpty())
                return true;
        }
        return false;
    }
}
