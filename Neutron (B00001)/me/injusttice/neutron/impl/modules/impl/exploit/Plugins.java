package me.injusttice.neutron.impl.modules.impl.exploit;

import me.injusttice.neutron.NeutronMain;
import me.injusttice.neutron.api.events.EventTarget;
import me.injusttice.neutron.api.events.impl.EventMotion;
import me.injusttice.neutron.api.events.impl.EventReceivePacket;
import me.injusttice.neutron.api.events.impl.EventSendPacket;
import me.injusttice.neutron.impl.modules.Category;
import me.injusttice.neutron.impl.modules.Module;
import me.injusttice.neutron.api.settings.impl.DoubleSet;
import me.injusttice.neutron.utils.network.PacketUtil;
import me.injusttice.neutron.utils.player.Timer;
import joptsimple.internal.Strings;
import java.util.Collections;

import net.minecraft.network.play.server.S3APacketTabComplete;
import net.minecraft.network.play.client.C14PacketTabComplete;
import java.util.ArrayList;
import java.util.List;

public class Plugins extends Module {

    private DoubleSet timeout = new DoubleSet("Timeout", 5.0, 0.0, 10.0, 1.0);
    private List<String> plugins;
    private boolean scan;
    private Timer timer;

    public Plugins() {
        super("Plugins", 0, Category.EXPLOIT);
        plugins = new ArrayList<>();
        timer = new Timer();
    }

    @Override
    public void onEnable() {
        super.onEnable();
        if (mc.thePlayer == null) {
            return;
        }
        PacketUtil.sendPacketSilent(new C14PacketTabComplete("/"));
        scan = true;
        plugins.clear();
        timer.reset();
    }

    @Override
    public void onDisable() {
        super.onDisable();
        scan = false;
        timer.reset();
    }
    
    @EventTarget
    public void onMotion(EventMotion e) {
        if(e.isPre() && timer.hasReached((long)(timeout.getValue() * 300.0))) {
            timer.reset();
            toggle();
        }
    }
    
    @EventTarget
    public void onReceive(EventReceivePacket e) {}
    
    @EventTarget
    public void onSend(EventSendPacket e) {
        if(e.getPacket() instanceof S3APacketTabComplete && scan) {
            S3APacketTabComplete packet2 = (S3APacketTabComplete) e.getPacket();
            String[] commands = packet2.func_149630_c();
            String[] arrayOfString1;
            int i = (arrayOfString1 = commands).length;
            for (byte b = 0; b < i; ++b) {
                String s = arrayOfString1[b];
                String[] split = s.split(":");
                if (split.length > 1) {
                    String in = split[0].replaceAll("/", "");
                    if (!plugins.contains(in)) {
                        plugins.add(in);
                    }
                }
            }
            Collections.sort(plugins);
            if (plugins.isEmpty()) {
                NeutronMain.addChatMessage("No plugins found.");
            } else {
                NeutronMain.addChatMessage("Plugins (" + plugins.size() + "): " + Strings.join(plugins.toArray(new String[0]), "[t], [v]"));
            }
        }
    }
}
