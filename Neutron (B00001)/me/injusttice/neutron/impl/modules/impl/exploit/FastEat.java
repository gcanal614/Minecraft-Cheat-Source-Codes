package me.injusttice.neutron.impl.modules.impl.exploit;

import me.injusttice.neutron.api.events.EventTarget;
import me.injusttice.neutron.api.events.impl.EventTick;
import me.injusttice.neutron.impl.modules.Category;
import me.injusttice.neutron.impl.modules.Module;
import me.injusttice.neutron.api.settings.impl.DoubleSet;
import me.injusttice.neutron.api.settings.impl.ModeSet;
import me.injusttice.neutron.utils.network.PacketUtil;
import me.injusttice.neutron.utils.player.TimerHelper;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.play.client.C03PacketPlayer;
import org.lwjgl.input.Mouse;

public class FastEat extends Module {
    
    String[] modes = new String[] { "Instant", "Verus", "Custom", "NCP", "Instant2" };
    public ModeSet mode = new ModeSet("Mode", "Instant", modes);
    public DoubleSet packets = new DoubleSet("Packets", 5.0D, 1.0D, 10.0D, 1.0D);
    public DoubleSet delay = new DoubleSet("Delay", 1000.0D, 0.0D, 10000.0D, 500.0D);
    TimerHelper timer;

    int ticks;

    public FastEat() {
        super("FastEat", 0, Category.EXPLOIT);
        timer = new TimerHelper();
        addSettings(mode, packets, delay);
    }

    @EventTarget
    public void onTick(EventTick event) {
        boolean consumable = ((mc.thePlayer.getHeldItem() != null && mc.thePlayer.getHeldItem().getItem() != null && mc.thePlayer.getHeldItem().getItem() instanceof net.minecraft.item.ItemFood) || (mc.thePlayer.getHeldItem() != null && mc.thePlayer.getHeldItem().getItem() != null && mc.thePlayer.getHeldItem().getItem() instanceof net.minecraft.item.ItemPotion));
        setDisplayName("Fast Eat ยง7" + mode.getMode());
        switch (mode.getMode()) {
            case "Verus":
                if (consumable && mc.thePlayer.isEating() && timer.hasTimeElapsed((long)delay.getValue(), false)) {
                    for (int a = 0; a < 5; a++)
                        PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 1.0E-5D, mc.thePlayer.posZ, false));
                    timer.reset();
                }
                break;
            case "Instant":
                if (consumable && mc.thePlayer.isEating() && timer.hasTimeElapsed((long)delay.getValue(), false)) {
                    for (int a = 0; a < 35; a++)
                        PacketUtil.sendPacket(new C03PacketPlayer(mc.thePlayer.onGround));
                    mc.playerController.onStoppedUsingItem((EntityPlayer)mc.thePlayer);
                    timer.reset();
                }
                break;
            case "Instant2":
                if (consumable && Mouse.isButtonDown(1) &&
                        timer.hasTimeElapsed((long)delay.getValue(), true)) {
                    for (int a = 0; a < 35; a++)
                        PacketUtil.sendPacket(new C03PacketPlayer(mc.thePlayer.onGround));
                    mc.playerController.onStoppedUsingItem((EntityPlayer)mc.thePlayer);
                }
                break;
            case "NCP":
                if (consumable && mc.thePlayer.isEating() && timer.hasTimeElapsed((long)delay.getValue(), false) &&
                        mc.thePlayer.getItemInUseDuration() > 12) {
                    for (int a = 0; a < 2; a++)
                        PacketUtil.sendPacket(new C03PacketPlayer(mc.thePlayer.onGround));
                    timer.reset();
                }
                break;
            case "Custom":
                if (timer.hasTimeElapsed((long)delay.getValue(), false) &&
                        consumable && mc.thePlayer.isEating()) {
                    if (16 > ticks) {
                        for (int a = 0; a < packets.getValue(); a++) {
                            PacketUtil.sendPacket(new C03PacketPlayer(true));
                            ticks++;
                        }
                        break;
                    }
                    ticks = 0;
                    timer.reset();
                }
                break;
        }
    }
}
