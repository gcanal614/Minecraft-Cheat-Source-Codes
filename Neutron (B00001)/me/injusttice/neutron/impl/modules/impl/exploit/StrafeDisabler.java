package me.injusttice.neutron.impl.modules.impl.exploit;

import me.injusttice.neutron.NeutronMain;
import me.injusttice.neutron.api.events.Event;
import me.injusttice.neutron.api.events.EventTarget;
import me.injusttice.neutron.api.events.impl.*;
import me.injusttice.neutron.api.settings.impl.BooleanSet;
import me.injusttice.neutron.impl.modules.Category;
import me.injusttice.neutron.impl.modules.Module;
import me.injusttice.neutron.utils.TimeUtil;
import me.injusttice.neutron.utils.movement.MovementUtils;
import me.injusttice.neutron.utils.render.MathUtil;
import net.minecraft.client.Minecraft;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.ChatComponentText;

import java.util.ArrayDeque;
import java.util.Deque;

public class StrafeDisabler extends Module {

    private long packetsToCancel;
    private final TimeUtil S08Delay = new TimeUtil();
    private final TimeUtil packetDelay = new TimeUtil();
    private final Deque<DelayedPacket> packetQueue = new ArrayDeque<>();
    public static Boolean disabled = false;

    public BooleanSet timer = new BooleanSet("Timer Disabler", false);


    public StrafeDisabler() {
        super("StrafeDisabler", Category.EXPLOIT);
        addSettings(timer);
    }

    @EventTarget
    public void onRespawn(EventLoadWorld event){
        packetQueue.clear();
        disabled = false;
    }

    @EventTarget
    public void onMotionUpdate(EventPreMotionUpdate event) {
        if (!event.isPre()) return;
        
        if(timer.isEnabled()){
            //goin to do shit later
        }

        if (packetsToCancel > 0) return;

        if (packetDelay.hasTimePassed(mc.thePlayer.ticksExisted < 120 ? 1920 : (long) MathUtil.getRandomInRange(1L, 250L))) {
            while (!packetQueue.isEmpty())
                mc.thePlayer.sendQueue.sendPacketDirect(packetQueue.removeLast().packet);
            packetDelay.reset();
        }
        if (mc.thePlayer.ticksExisted == 120) {
            disabled = true;
            event.setX(event.getX() + 1);
            event.setZ(event.getZ() + 1);
        }
    }

    @EventTarget
    public void onSendPacket(EventSendPacket event){
        final Packet<?> packet = event.getPacket();

        if (packet instanceof C03PacketPlayer) {
            final C03PacketPlayer packetPlayer = (C03PacketPlayer) packet;
            if (packetsToCancel > 0) {
                event.setCancelled(true);
                packetsToCancel--;
                return;
            }
            if (!packetPlayer.isMoving() && packetPlayer.getRotating()) {
                event.setCancelled(true);
            }
        }

        if (mc.thePlayer.ticksExisted < 120) {
            if (packet instanceof C03PacketPlayer) {
                final C03PacketPlayer C03 = (C03PacketPlayer) packet;
                if (!C03.isMoving() && !C03.getRotating()) {
                    event.setCancelled(true);
                } else {
                    packetQueue.push(new DelayedPacket(packet));
                    event.setCancelled(true);
                }
            }
            if (packet instanceof C00PacketKeepAlive) {
                packetQueue.push(new DelayedPacket(packet));
                event.setCancelled(true);
            }
            if (packet instanceof C0FPacketConfirmTransaction) {
                packetQueue.push(new DelayedPacket(packet));
                event.setCancelled(true);
            }
        }
    }

    @EventTarget
    public void onReceivePack(EventReceivePacket event){
        final Packet<?> packet = event.getPacket();

        if (packet instanceof S08PacketPlayerPosLook) {
            S08PacketPlayerPosLook S08 = (S08PacketPlayerPosLook) packet;

            if (mc.thePlayer.ticksExisted < 5 || !MovementUtils.isBlockUnder(mc) || MovementUtils.isOverVoid(mc))
                return;

            if (S08Delay.hasTimePassed(2000)) {
                if (mc.thePlayer.getDistance(S08.getX(), S08.getY(), S08.getZ()) < 10) {
                    packetsToCancel = 6;
                    event.setCancelled(true);
                }
                S08Delay.reset();
            }
        }
    }

    @Override
    public void onEnable() {
        super.onEnable();
        packetQueue.clear();
        disabled = false;
    }

    private static class DelayedPacket {
        private final Packet<?> packet;
        private long timestamp;

        public DelayedPacket(final Packet<?> packet) {
            this.packet = packet;
            this.timestamp = System.currentTimeMillis();
        }
    }

}
