package client.metaware.impl.module.exploit;

import client.metaware.api.event.painfulniggerrapist.Listener;
import client.metaware.api.event.painfulniggerrapist.annotations.EventHandler;
import client.metaware.api.module.api.Category;
import client.metaware.api.module.api.Module;
import client.metaware.api.module.api.ModuleInfo;
import client.metaware.api.properties.property.impl.EnumProperty;
import client.metaware.impl.event.impl.player.UpdatePlayerEvent;
import client.metaware.impl.utils.util.PacketUtil;
import client.metaware.impl.utils.util.player.MovementUtils;
import net.minecraft.network.play.client.C03PacketPlayer;
import org.lwjgl.input.Keyboard;

@ModuleInfo(name = "Phase", renderName = "Phase", category = Category.EXPLOIT, keybind = Keyboard.KEY_NONE)
public class Phase extends Module {

    public EnumProperty<Mode> mode = new EnumProperty<>("Mode", Mode.Downward);

    public enum Mode{
        Downward, Verus, Verus2
    }

    @Override
    public void onEnable() {
        super.onEnable();
    }

    @EventHandler
    private Listener<UpdatePlayerEvent> eventListener = event -> {
        setSuffix(mode.getValue().toString());

        switch (mode.getValue()) {
            case Downward:{
                if(mc.thePlayer.isMoving() && mc.thePlayer.isCollidedHorizontally) {
                    mc.thePlayer.setJumping(false);
                    mc.thePlayer.onGround = true;
                    this.mc.thePlayer.setPositionAndUpdate(this.mc.thePlayer.posX, this.mc.thePlayer.posY - 2, this.mc.thePlayer.posZ);
                }
                break;
            }
            case Verus:{
                double x = mc.thePlayer.posX, y = mc.thePlayer.posY, z = mc.thePlayer.posZ;
                if(mc.thePlayer.isMoving() && mc.thePlayer.isCollidedVertically) {
                    mc.thePlayer.setJumping(false);
                    event.setOnGround(true);
                    this.mc.thePlayer.setPositionAndUpdate(this.mc.thePlayer.posX + 0.1, this.mc.thePlayer.posY, this.mc.thePlayer.posZ + 0.1);
                    PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x / 1, y, z / 1, true));
                }
                break;
            }
            case Verus2:{
                if(mc.thePlayer.isMoving() && mc.thePlayer.isCollidedHorizontally) {
                    mc.thePlayer.setPositionAndUpdate(this.mc.thePlayer.posX + Math.cos(MovementUtils.direction()) * 0.75, this.mc.thePlayer.posY, this.mc.thePlayer.posZ + Math.cos(MovementUtils.direction()) * 0.75);
                }
                break;
            }
        }
    };

}
