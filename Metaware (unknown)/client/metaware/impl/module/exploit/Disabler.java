package client.metaware.impl.module.exploit;

import client.metaware.Metaware;
import client.metaware.api.event.painfulniggerrapist.Listener;
import client.metaware.api.event.painfulniggerrapist.annotations.EventHandler;
import client.metaware.api.module.api.Category;
import client.metaware.api.module.api.Module;
import client.metaware.api.module.api.ModuleInfo;
import client.metaware.api.properties.property.impl.EnumProperty;
import client.metaware.client.Logger;
import client.metaware.impl.event.impl.network.PacketEvent;
import client.metaware.impl.event.impl.player.UpdatePlayerEvent;
import client.metaware.impl.event.impl.player.WorldLoadEvent;
import client.metaware.impl.module.movmeent.Flight;
import client.metaware.impl.module.movmeent.Speed;
import client.metaware.impl.module.player.Scaffold;
import client.metaware.impl.utils.system.TimerUtil;
import client.metaware.impl.utils.util.PacketUtil;
import client.metaware.impl.utils.util.other.MathUtils;
import client.metaware.impl.utils.util.other.PlayerUtil;
import client.metaware.impl.utils.util.player.MovementUtils;
import net.minecraft.client.multiplayer.ServerData;
import net.minecraft.client.network.OldServerPinger;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import org.apache.commons.lang3.RandomUtils;

import java.util.LinkedList;
import java.util.concurrent.ThreadLocalRandom;

@ModuleInfo(renderName = "Disabler", name = "Disabler", category = Category.EXPLOIT)
public class Disabler extends Module {

    private LinkedList<Packet<?>> packets = new LinkedList<>();
    private EnumProperty<Mode> mode = new EnumProperty<>("Mode", Mode.Verus);
    private EnumProperty<VerusMode> verusMode = new EnumProperty<>("Verus Mode", VerusMode.Movemento, () -> mode.getValue() == Mode.Verus);



    private final TimerUtil timer = new TimerUtil(), timer1 = new TimerUtil(), timer2 = new TimerUtil();
    private long timeSflag;
    private int counter;

    private short lastUid, lastKey;
    private boolean expectedTeleport;
    private boolean disabled;
    private long ping;
    private double posX;
    private double posY;
    private double posZ;
    public final OldServerPinger oldServerPinger = new OldServerPinger(true);

    public final ServerData serverData = new ServerData("",  "hypixel.net", false);


    public enum Mode{
        Verus, Watchdog, Bridger, Funcrafto, AGC, Hyp2
    }

    public enum VerusAddons{
        Edit_NoFall, Duping_Trans, Cancel_S08, C04s, Cancel_C00, Cancel_C0F, Cancel_C0B, Return_Packets;
    }

    public enum VerusMode{
        Combat, Movemento, movement, move3, Nigger
    }

    @Override
    public void onEnable() {
        super.onEnable();
        this.packets.clear();
        this.timer.reset();
        this.timeSflag = 0;
        ping = 0;
        posX = mc.thePlayer.posX;
        posY = mc.thePlayer.posY;
        posZ = mc.thePlayer.posZ;
        counter = 0;
        lastKey = 0;
        lastUid = 0;
        this.expectedTeleport = false;
        this.disabled = false;
    }

    @EventHandler
    private final Listener<UpdatePlayerEvent> updatePlayerEventListener = event -> {
        setSuffix(mode.getValue().toString());
        if(mc.thePlayer.ticksExisted <= 5){
            packets.clear();
            timer.reset();
            timeSflag = 0;
            counter = 0;
            return;
        }
        switch(mode.getValue()){
            case Funcrafto:{
                if(PlayerUtil.isInsideBlock()){
                    //mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY + (0.2 - mc.thePlayer.motionY), mc.thePlayer.posZ);
                }
                //credits again to monsoon guy/quick
//                if(mc.thePlayer.ticksExisted % 180 == 0){
//                    while(packets.size() > 6){
//                        PacketUtil.packetNoEvent(packets.poll());
//                    }
//                }
                break;
            }
            case AGC:{
                PacketUtil.packetNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, false));
                break;
            }
            case Verus:{
                switch (verusMode.getValue()){
                    case Nigger:{
                        if(timer.delay(490L)){
                            while(!this.packets.isEmpty()){
                                PacketUtil.packetNoEvent(packets.poll());
                            }
                            timer.reset();
                        }
                        break;
                    }
                    case Movemento:
                    case move3: {
                        if (this.mc.thePlayer.ticksExisted % 180 == 0) {
                            while (this.packets.size() > 22) {
                                PacketUtil.packetNoEvent(packets.poll());
                            }
                        }
                        break;
                    }
                    case movement:{
                        if (!this.shouldRun()) {
                            this.expectedTeleport = false;
                            this.timer.reset();
                            this.packets.clear();
                            return;
                        }

                        if (this.timer.delay(260L)) {
                            this.timer.reset();

                            if (!this.packets.isEmpty()) {
                                PacketUtil.packetNoEvent(this.packets.poll());
                            }
                        }
                        break;
                    }
                    case Combat:{
                        if (this.mc.thePlayer.ticksExisted % 180 == 0) {
                            while (this.packets.size() > 25) {
                                PacketUtil.packetNoEvent(packets.poll());
                            }
                        }
                        break;
                    }
                }
                break;
            }
            case Watchdog:{
                if(mc.isSingleplayer()) return;
                if(mc.thePlayer.ticksExisted <= 5) {
                    packets.clear();
                    timer.reset();
                    timer1.reset();
                    lastKey = 0;
                    lastUid = 0;
                    timer2.reset();
                    counter = 0;

//                    if(!expectedTeleport)
//                        pingServer();

                }

//                if(timer2.delay(200L)){
//                    PacketUtil.packetNoEvent(new C0FPacketConfirmTransaction(lastKey - 1, (short) (lastUid - 1), false));
//                    timer.reset();
//                }

//                if(timer2.delay(RandomUtils.nextLong(5000L, 10000L))){
//                    if(!expectedTeleport)
//                        pingServer();
//                    timer2.reset();
//                }
//
//                if(serverData.pingToServer != -1 && serverData.pingToServer > 0 && serverData.pingToServer != ping){
//                    ping = serverData.pingToServer;
//                    Logger.print("New Ping: " + ping);
//                }
////
//                if(timer1.delay(200)){
//                    PacketUtil.packetNoEvent(new C0FPacketConfirmTransaction(0, (short) (lastUid - 1), false));
//                    timer1.reset();
//                }

                if(timer1.delay(200)){
                    PacketUtil.packetNoEvent(new C0FPacketConfirmTransaction(RandomUtils.nextInt(100, 999), (short) (lastUid - 1), counter % 6 == 0));
                    timer1.reset();
                }
//
                if(timer.delay(200)){
                    while(!packets.isEmpty()){
                        PacketUtil.packetNoEvent(packets.poll());
                    }
                    timer.reset();
                }
                break;
            }
        }


    };

    public void pingServer() {
        (new Thread("Disabler-Ping-Thread") {
            public void run() {
                try {
                    expectedTeleport = true;
                    oldServerPinger.ping(serverData);
                    Logger.print("Ping: " + serverData.pingToServer);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                expectedTeleport = false;
            }
        }).start();
    }

    @EventHandler
    private final Listener<WorldLoadEvent> worldLoadEventListener = event -> {
        packets.clear();
        timer.reset();
        timeSflag = 0;
    };

    @EventHandler
    private Listener<PacketEvent> eventListener = event -> {
        if(mc.thePlayer == null || mc.theWorld == null) return;
        switch(mode.getValue()){
            case Hyp2:{
                double RANDOM = RandomUtils.nextDouble(Double.MIN_VALUE, Double.MAX_VALUE);
                if(event.getPacket() instanceof C0BPacketEntityAction){
                    event.setCancelled(true);
                }

                if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) event.setCancelled(true);

                if (event.getPacket() instanceof C03PacketPlayer) {
                    PacketUtil.packetNoEvent(new C08PacketPlayerBlockPlacement(BlockPos.ORIGIN, EnumFacing.DOWN.getIndex(), null, 0.0F, 0.0F, 0.0F));
                    C03PacketPlayer packetPlayer = event.getPacket();

                    double x = mc.thePlayer.posX;
                    double y = mc.thePlayer.posY;
                    double z = mc.thePlayer.posZ;

                    float yaw = mc.thePlayer.rotationYaw;
                    float pitch = mc.thePlayer.rotationPitch;


                    if (packetPlayer.isMoving()) {
                        x = packetPlayer.getPositionX();
                        y = packetPlayer.getPositionY();
                        z = packetPlayer.getPositionZ();
                    }
                    if (packetPlayer.getRotating()) {
                        yaw = packetPlayer.getYaw();
                        pitch = packetPlayer.getPitch();
                    }

                    event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, packetPlayer.isOnGround()));
                    PacketUtil.packetNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, packetPlayer.isOnGround()));

                    PacketUtil.packetNoEvent(new C08PacketPlayerBlockPlacement(BlockPos.ORIGIN, EnumFacing.DOWN.getIndex(), null, 0.0F, 0.0F, 0.0F));
                    if (!mc.thePlayer.isUsingItem() && mc.thePlayer.ticksExisted % 5 == 2)
                        PacketUtil.packetNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, new BlockPos(Math.random() * ThreadLocalRandom.current().nextDouble(-RANDOM, RANDOM),
                                Math.random() * ThreadLocalRandom.current().nextDouble(-RANDOM, RANDOM), Math.random() * ThreadLocalRandom.current().nextDouble(-RANDOM, RANDOM)), EnumFacing.DOWN));
                }
                break;
            }
            case AGC:{
                if(event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition){
                    C03PacketPlayer.C04PacketPlayerPosition c04 = event.getPacket();
                    c04.setOnGround(false);
                    c04.setX(0);
                    c04.setY(0);
                    c04.setZ(0);
                }

                if(event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook){
                    C03PacketPlayer.C06PacketPlayerPosLook c06 = event.getPacket();
                    c06.setOnGround(false);
                }

                if(event.getPacket() instanceof C03PacketPlayer){
                    C03PacketPlayer c03 = event.getPacket();
                    c03.setOnGround(false);
                }
                break;
            }
            case Funcrafto:{
                if(event.getPacket() instanceof C02PacketUseEntity){
                    if(PlayerUtil.isInsideBlock()){
                       // mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY + (2), mc.thePlayer.posZ);
                    }else{
                        mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY - (1.0e-5), mc.thePlayer.posZ);
                    }
                   // mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - (0.2 + mc.thePlayer.motionY), mc.thePlayer.posZ);
                }
//                if(event.getPacket() instanceof C0FPacketConfirmTransaction){
//                    C0FPacketConfirmTransaction c0f = event.getPacket();
//                    if(c0f.getUid() < 0){
//                        packets.add(event.getPacket());
//                        event.setCancelled(true);
//                    }
//                }
                break;
            }
            case Verus:{
                switch (verusMode.getValue()){
                    case Nigger:{
                        if(event.getPacket() instanceof C03PacketPlayer){
                            C03PacketPlayer c03 = event.getPacket();
                            if(mc.thePlayer.ticksExisted % 45 == 0){
                                c03.y = -0.911D;
                                c03.setOnGround(false);
                                c03.setMoving(false);
                            }
                        }

                        if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                            packets.add(event.getPacket());
                            event.setCancelled(true);
                        }
                        break;
                    }
                    case Combat:{
                        if(mc.thePlayer.ticksExisted <= 5){
                            packets.clear();
                            return;
                        }

                        if(event.getPacket() instanceof C0BPacketEntityAction){
                            event.setCancelled(true);
                        }

                        if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                            packets.add(event.getPacket());
                            event.setCancelled(true);
                        }

                        if(event.getPacket() instanceof C00PacketKeepAlive){
                            packets.add(event.getPacket());
                            event.setCancelled(true);
                        }
                        break;
                    }
                    case Movemento:{
                        if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) packets.clear();
                        if(event.getPacket() instanceof C00PacketKeepAlive){
                            event.setCancelled(true);
                            packets.add(event.getPacket());
                        }

                        if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                            for(int i = 0; i < 4; i++) {
                                packets.add(event.getPacket());
                            }
                            event.setCancelled(true);
                        }

                        if(event.getPacket() instanceof C0BPacketEntityAction){
                            event.setCancelled(true);
                        }


                        if(Metaware.INSTANCE.getModuleManager().getModuleByClass(Flight.class).isToggled()) {
                            if (event.getPacket() instanceof C03PacketPlayer) {
                                if (mc.thePlayer.ticksExisted % 45 == 0) {
                                    PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                                    PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false));
                                    PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                                }
                            } else if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                                S08PacketPlayerPosLook packet = event.getPacket();
                                double x = packet.getX() - mc.thePlayer.posX;
                                double y = packet.getY() - mc.thePlayer.posY;
                                double z = packet.getZ() - mc.thePlayer.posZ;
                                double diff = Math.sqrt(x * x + y * y + z * z);
                                event.setCancelled(true);
                                PacketUtil.packetNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
                            }
                        }
                        break;
                    }
                    case move3:{
                        if(event.getPacket() instanceof C03PacketPlayer){
                            double yPos = ((mc.thePlayer.posY / 0.015625) * 0.015625);
                            mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ);
                            if (mc.thePlayer.ticksExisted % 45 == 0) {
                                PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                                PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false));
                                PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
                            }
                        }

                        if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                            for(int i = 0; i < 4; i++){
                                packets.add(event.getPacket());
                            }
                            event.setCancelled(true);
                        }

                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            event.setCancelled(true);
                        }

                        if(event.getPacket() instanceof S08PacketPlayerPosLook){
                            S08PacketPlayerPosLook packet = event.getPacket();
                            double x = packet.getX() - mc.thePlayer.posX;
                            double y = packet.getY() - mc.thePlayer.posY;
                            double z = packet.getZ() - mc.thePlayer.posZ;
                            double diff = Math.sqrt(x * x + y * y + z * z);
                            if (diff <= 8) {
                                event.setCancelled(true);
                                PacketUtil.packetNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
                            }
                        }
                        break;
                    }
                    case movement:{
                        if (!this.shouldRun()) return;

                        if (event.getPacket() instanceof C0FPacketConfirmTransaction
                                || event.getPacket() instanceof C00PacketKeepAlive) {

                            short action = -1;

                            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                                action = ((C0FPacketConfirmTransaction) event.getPacket()).getUid();
                            }

                            if (action != -1 && this.isInventory(action)) return;

                            event.setCancelled(true);
                            this.packets.add(event.getPacket());
                        }

                        if (event.getPacket() instanceof C03PacketPlayer) {
                            C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) event.getPacket();


                            if (mc.thePlayer.ticksExisted % 45 == 0) {
                                this.expectedTeleport = true;

                                c03PacketPlayer.setMoving(false);
                                c03PacketPlayer.setY(-0.015625);
                                c03PacketPlayer.setOnGround(false);
                            }
                        }

                        if (event.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
                            S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                            this.expectedTeleport = false;

                            event.setCancelled(true);

                            PacketUtil.packetNoEvent(new C03PacketPlayer
                                    .C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(),
                                    s08PacketPlayerPosLook.getY(),
                                    s08PacketPlayerPosLook.getZ(),
                                    s08PacketPlayerPosLook.getYaw(),
                                    s08PacketPlayerPosLook.getPitch(), true));
                        }
                        break;
                    }
                }
                break;
            }
            case Watchdog:{
                if(mc.isSingleplayer()) return;
                if(mc.thePlayer.ticksExisted < 5) counter = 0;
//                if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
//                    C03PacketPlayer.C06PacketPlayerPosLook packet = event.getPacket();
//                    if (counter > 0) {
//                        if (packet.getPositionX() == posX && packet.getPositionY() == posY && packet.getPositionZ() == posZ) {
//                            PacketUtil.packetNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), packet.isOnGround()));
//                            Logger.printWithoutPrefix("[Disabler] Packet C04");
//                            event.setCancelled(true);
//                        }
//                    }
//                    counter += 1;
//
//                    if (event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook && mc.thePlayer.isRiding()) {
//                        PacketUtil.packet(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING));
//                        Logger.printWithoutPrefix("[Disabler] Packet C0B");
//                    } else if (event.getPacket() instanceof C0CPacketInput && mc.thePlayer.isRiding()) {
//                        PacketUtil.packetNoEvent(event.getPacket());
//                        PacketUtil.packet(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
//                        Logger.printWithoutPrefix("[Disabler] Packet C0B");
//                        event.setCancelled(true);
//                    }
//                }
//
//                if (event.getPacket() instanceof S08PacketPlayerPosLook) {
//                    S08PacketPlayerPosLook s08 = event.getPacket();
//                    posX = s08.getX();
//                    posY = s08.getY();
//                    posZ = s08.getZ();
//                    Logger.printWithoutPrefix("[Disabler] Receive S08");
//                }
//
//                if (event.getPacket() instanceof S07PacketRespawn) {
//                    counter = 0;
//                }
//                if(event.getPacket() instanceof C00PacketKeepAlive){
//                    packets.add(event.getPacket());
//                    event.setCancelled(true);
//
//                if(event.getPacket() instanceof C00PacketKeepAlive){
//                    packets.add(event.getPacket());
//                    event.setCancelled(true);
//                }

                if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                    C0FPacketConfirmTransaction c0f = event.getPacket();
                    event.setCancelled(true);
                    counter++;
                    lastUid = c0f.getUid();
                    packets.add(c0f);
                }

//                if(event.getPacket() instanceof S08PacketPlayerPosLook){
//                    S08PacketPlayerPosLook packet = event.getPacket();
//                    double x = packet.getX() - mc.thePlayer.posX;
//                    double y = packet.getY() - mc.thePlayer.posY;
//                    double z = packet.getZ() - mc.thePlayer.posZ;
//                    double diff = Math.sqrt(x * x + y * y + z * z);
//                    if(mc.thePlayer.ticksExisted < 70){
//                        event.setCancelled(true);
//                        // Logger.print("Cancelled S08");
//                        PacketUtil.packetNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, packet.getYaw(), packet.getPitch(), true));
//                    }
//                }

                if (event.getPacket() instanceof S08PacketPlayerPosLook && Metaware.INSTANCE.getModuleManager().getModuleByClass(Speed.class).isToggled()) {
                    S08PacketPlayerPosLook packet = event.getPacket();
                    double x = packet.getX() - mc.thePlayer.posX;
                    double y = packet.getY() - mc.thePlayer.posY;
                    double z = packet.getZ() - mc.thePlayer.posZ;
                    double diff = Math.sqrt(x * x + y * y + z * z);
                    if (diff <= 0.7 && mc.thePlayer.ticksExisted > 30) {
                        event.setCancelled(true);
                        PacketUtil.packetNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, packet.getYaw(), packet.getPitch(), true));
                    }
                }
                break;
            }
            case Bridger:{
                if(event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0BPacketEntityAction || event.getPacket() instanceof S08PacketPlayerPosLook){
                    event.setCancelled(true);
                    PacketUtil.packetNoEvent((Packet) new C0FPacketConfirmTransaction(ThreadLocalRandom.current().nextInt(100, 500), (short) 500, true));
                }
                if(event.getPacket() instanceof S00PacketDisconnect){
                    toggled(false);
                }
                if (event.getPacket() instanceof S40PacketDisconnect) {
                    toggled(false);
                }
                break;
            }
        }
    };

    boolean shouldRun() {
        return mc.thePlayer != null && mc.thePlayer.ticksExisted > 5;
    }

    boolean isInventory(short action) {
        return action > 0 && action < 100;
    }

    public double getPosX() {
        return this.posX;
    }

    public double getPosY() {
        return this.posY;
    }

    public double getPosZ() {
        return this.posZ;
    }

        private void massPacket(PacketEvent eventSendPacket, Packet packet) {
            for (int p = 0; p < 20; p++) {
                eventSendPacket.setPacket(packet);
                eventSendPacket.setPacket(null);
            }
        }

}
