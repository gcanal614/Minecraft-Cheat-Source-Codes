package non.asset.module.impl.exploit;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import net.minecraft.block.BlockBed;
import net.minecraft.client.gui.inventory.GuiChest;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S05PacketSpawnPosition;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import net.minecraft.util.BlockPos;
import non.asset.Clarinet;
import non.asset.event.bus.Handler;
import non.asset.event.impl.game.PacketEvent;
import non.asset.event.impl.player.UpdateEvent;
import non.asset.module.Module;
import non.asset.utils.OFC.MathUtils;
import non.asset.utils.OFC.TimerUtil;
import non.asset.utils.value.impl.EnumValue;


public class Disabler extends Module {
    private EnumValue<Mode> mode = new EnumValue<>("Mode", Mode.NOPAYLOAD);
    private TimerUtil timer = new TimerUtil();
    private TimerUtil timer2 = new TimerUtil();
    private TimerUtil timer3 = new TimerUtil();
    private TimerUtil timer4 = new TimerUtil();
    private boolean sent;
    private LinkedList<Packet> verusQueue = new LinkedList<>();
    private int i1;
    
    private LinkedList<Packet> packetList2 = new LinkedList<>();
    
    private boolean t1 = false;
    private boolean t2 = false;
    private boolean t3 = false;
    private boolean t4 = false;
    
    private float dx = 0;
    private float dy = 0;
    private float dz = 0;
    
    public static int checkvalue = 0;
    public static boolean flag = false;
    public static int flagvalue = 0;
    

    public static boolean mushalert = false;
    
    public static ArrayList<Packet> packets = new ArrayList<>();
    private LinkedList<Packet> packetQueue = new LinkedList<>();
    private List<Packet> packetList = new LinkedList<>();
    ArrayList<Packet> transactions = new ArrayList<>();
    int currentTransaction;
    
    private LinkedList verusTwoLinkedList = new LinkedList<>();
    private LinkedList verusTwoList2 = new LinkedList<>();
    		

    public Disabler() {
        super("Disabler", Category.EXPLOITS);
        setDescription("Anticheat Disabler");
    	setHidden(false);
    }
    
    @Override
    public void onDisable() {
    	
    }
    
    @Override
    public void onEnable() {
        if (getMc().thePlayer == null || getMc().theWorld == null) return;
        
        dx = (float) mc.thePlayer.posX;
        dy = (float) mc.thePlayer.posY;
        dz = (float) mc.thePlayer.posZ;
    	
    	checkvalue = 0;
    	flag = false;
    	t1 = false;
    	packetList2.clear();
        timer.reset();
        timer2.reset();
        timer3.reset();
        timer4.reset();
        sent = false;
        i1 = 0;
        t4 = false;
        currentTransaction = 0;
        transactions.clear();
        packetQueue.clear();
        packetList.clear();
        mushalert = false;
    }

    public enum Mode {
        NOPAYLOAD, VERUS, SEMIMORA, MUSHMC, SEMIREDESKY, NULLPLACE, TRANSACTION
    }
    
    @Handler
    public void onPacket(PacketEvent event) {
        
        if (getMc().thePlayer == null) return;
        
        if (getMc().theWorld == null) return;
        
        if (getMc().getNetHandler() == null) return;
    	
        if(event.getPacket() instanceof S05PacketSpawnPosition) return;
        
        switch (mode.getValue()) {
        case SEMIMORA:
        	if (event.isSending() && event.getPacket() instanceof C04PacketPlayerPosition) {
        		C04PacketPlayerPosition asld = (C04PacketPlayerPosition)event.getPacket();
        		asld.setMoving(ticks(2));
        		asld.setOnGround(false);
           	 	mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ);
        	}
        	if (event.isSending() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
        		C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
                event.setCanceled(true);
            }
        	if(event.getPacket() instanceof C07PacketPlayerDigging || event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
        		if(mc.thePlayer.isUsingItem()) {
        			event.setCanceled(true);
        		}
        	}
    		if(!event.isSending() && event.getPacket() instanceof S08PacketPlayerPosLook) {
        		S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
        		if (this.mc.thePlayer != null && mc.theWorld != null && mc.thePlayer.rotationYaw != -180 && mc.thePlayer.rotationPitch != 0) {
                	s08PacketPlayerPosLook.setPitch(mc.thePlayer.rotationPitch);
                	s08PacketPlayerPosLook.setYaw(mc.thePlayer.rotationYaw);
    	        	if (event.isSending() && event.getPacket() instanceof C04PacketPlayerPosition) {
    	        		C04PacketPlayerPosition asld = (C04PacketPlayerPosition)event.getPacket();
    	        		asld.setY(Double.NEGATIVE_INFINITY);
    	        	}
                    getMc().thePlayer.sendQueue.addToSendQueueNoEvents(new C0FPacketConfirmTransaction(0, (short) 35166, false));
                }
        	}
        	break;
        case MUSHMC:
        	
        	if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(),s08PacketPlayerPosLook.getY(),s08PacketPlayerPosLook.getZ(),s08PacketPlayerPosLook.getYaw(),s08PacketPlayerPosLook.getPitch(), true));    
                break;
        	}
        	
        	if(t4) {
        		if(timer3.reach(9000)) {
                	Clarinet.INSTANCE.getNotificationManager().addNotification("Go!!", 2000);
        			t4 = false;
        		}
        	}   
    		if (!event.isSending() && !t4) {
                if (event.getPacket() instanceof S02PacketChat) {
                    S02PacketChat packet = (S02PacketChat) event.getPacket();
                    if (packet.getChatComponent().getUnformattedText().contains("O jogo iniciou!")) {
                    	Clarinet.INSTANCE.getNotificationManager().addNotification("wait 8 seconds before starting to break beds", 9000);
                    	t4 = true;
                		timer3.reset();
                    
                    }
                }
            }
        	if(mushalert) {
        		if(timer2.reach(9000)) {
        			mushalert = false;
        		}
        	}   
    		if (!event.isSending() && !mushalert) {
                if (event.getPacket() instanceof S02PacketChat) {
                    S02PacketChat packet = (S02PacketChat) event.getPacket();
                    if (packet.getChatComponent().getUnformattedText().contains("foi destruída por " + mc.thePlayer.getName())) {
                    	Clarinet.INSTANCE.getNotificationManager().addNotification("Wait 8 seconds to break a bed again.", 9000);
                		mushalert = true;
                		timer2.reset();
                    }
                }
            }
			if (event.getPacket() instanceof C07PacketPlayerDigging) {    			
				C07PacketPlayerDigging fuckingkick = (C07PacketPlayerDigging)event.getPacket();
            	if(mushalert || t4) {
            		if(fuckingkick.getStatus() == fuckingkick.getStatus().START_DESTROY_BLOCK) {
            			if(getMc().theWorld.getBlockState(fuckingkick.getPosition()).getBlock() instanceof BlockBed) {
            				fuckingkick.setPosition(new BlockPos(19230039,12910390,2));
            				if(timer4.reach(900)) {
                            	Clarinet.INSTANCE.getNotificationManager().addNotification("Wait 8 seconds to break a bed again!!", 9000);
    				            timer4.reset();
    				            break;
                    		}
            			}
					}
            	}
    		}
			
            if(event.getPacket() instanceof C0BPacketEntityAction) {
        		C0BPacketEntityAction a = (C0BPacketEntityAction)event.getPacket();
        		a.setEntityID(00000+02000+21020 * mc.thePlayer.ticksExisted % 10);
        	}
        	
        	if (event.getPacket() instanceof S39PacketPlayerAbilities) {
        		S39PacketPlayerAbilities a = (S39PacketPlayerAbilities)event.getPacket();
        		a.setWalkSpeed(Float.POSITIVE_INFINITY);
        		a.setAllowFlying(true);
        	}
        	
        	if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
        		C0FPacketConfirmTransaction a = (C0FPacketConfirmTransaction)event.getPacket();
        		a.setUid((short) MathUtils.getRandomInRange(-10000, 20000));
        		a.setWindowId(0);
        	}
            
            if (this.mc.thePlayer != null && ticksMore(false, 8)) {
                this.timer.reset();
                this.packetQueue.clear();
                break;
            }
        	break;
        case SEMIREDESKY:
    		if (this.mc.thePlayer != null && ticksMore(false, 8)) {
                this.packetQueue.clear();
            }
    		if(event.isSending() && event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
        		if(mc.thePlayer.isBlocking()) {
        			event.setCanceled(true);
        		}
        	}
        	if(event.isSending() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
        		C0FPacketConfirmTransaction a = (C0FPacketConfirmTransaction)event.getPacket();
                getMc().thePlayer.sendQueue.addToSendQueueNoEvents(new C0FPacketConfirmTransaction(9, (short) 35166, true));
        	}
    		if(!event.isSending() && event.getPacket() instanceof S08PacketPlayerPosLook) {
            	S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook)event.getPacket();
                if (getMc().thePlayer != null && getMc().theWorld != null && getMc().thePlayer.rotationYaw != -180 && getMc().thePlayer.rotationPitch != 0) {
                	s08.pitch = mc.thePlayer.rotationPitch;
            		s08.yaw = mc.thePlayer.rotationYaw;
            	}
            }
        	break;
    	case VERUS:

    		if(mc.currentScreen instanceof GuiChest) break;
    		if(mc.thePlayer.fallDistance > 8) break;
            if (this.mc.thePlayer != null && ticksMore(false, 8)) {
                this.packetQueue.clear();
                return;
            }

        	if (event.isSending() && event.getPacket() instanceof C00PacketKeepAlive) {
        		event.setCanceled(true);
        	}
        	
        	if (event.isSending() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
        		C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
        		c0fPacketConfirmTransaction.setAccepted(false);
                packetQueue.add((Packet)c0fPacketConfirmTransaction);
                event.setCanceled(true);
            }
        	if (event.getPacket() instanceof C03PacketPlayer) {
                 C03PacketPlayer c14 = (C03PacketPlayer)event.getPacket();
                 if(ticks(40)) {
                	 c14.setY(c14.getY() - 25);
                	 mc.thePlayer.setPosition(mc.thePlayer.prevPosX, mc.thePlayer.prevPosY, mc.thePlayer.prevPosZ);
                	 c14.setOnGround(true);
                	 c14.setMoving(false);
                 }
            }
            
        	if(event.getPacket() instanceof C07PacketPlayerDigging || event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
        		if(mc.thePlayer.isBlocking()) {
        			event.setCanceled(true);
        		}
        	}
        	if(event.getPacket() instanceof C0BPacketEntityAction) {
				C0BPacketEntityAction askdok = (C0BPacketEntityAction)event.getPacket();
				if(askdok.getAction() == askdok.getAction().START_SPRINTING) {
					event.setCanceled(true);
				}
			}
    		if(!event.isSending() && event.getPacket() instanceof S08PacketPlayerPosLook) {
        		S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
        		if (this.mc.thePlayer != null && mc.theWorld != null && mc.thePlayer.rotationYaw != -180 && mc.thePlayer.rotationPitch != 0) {
                	s08PacketPlayerPosLook.setPitch(mc.thePlayer.rotationPitch);
                	s08PacketPlayerPosLook.setYaw(mc.thePlayer.rotationYaw);
                }
        	}
            break;
            
        case NOPAYLOAD:
            if (event.isSending() && event.getPacket() instanceof C17PacketCustomPayload) {
                event.setCanceled(true);
            }
            break;
        default:
            break;
        }
    }

    @Handler
    public void onUpdate(UpdateEvent event) {
        if (getMc().thePlayer == null) return;
        if (getMc().theWorld == null) return;
        
    	setSuffix(mode.getValue().name().toLowerCase());
        switch (mode.getValue()) {
        	
	        case VERUS: {
	            if(mc.thePlayer.isMoving()) {

	        		if (reach(timer, 1490L)) {
	                    if (this.packetQueue.size() > 22) {
	                    	getMc().thePlayer.sendQueue.addToSendQueueNoEvents((Packet)this.packetQueue.poll());
	                    }
	                    Clarinet.INSTANCE.getNotificationManager().addNotification("Disabler : " + mc.thePlayer.ticksExisted % 100, 2000);
	                    this.timer.reset();
	        		
	        		}
                    break;
	            }
	            break;
	        }
        	case MUSHMC:
        		if (ticks(180)) {
        			while (packetQueue.size() > 22) {
        				getMc().thePlayer.sendQueue.addToSendQueueNoEvents((Packet)this.packetQueue.poll());
      		      	}
        		}
        		if (ticks(40)) {
        			event.setCanceled(true);
        		}
        		break;
            case TRANSACTION:
                if (event.isPre()) {
                    getMc().thePlayer.sendQueue.addToSendQueueNoEvents(new C0FPacketConfirmTransaction(0, (short) MathUtils.getRandomInRange(-22343, 93483), false));
                }
                break;
            case NULLPLACE:
                if (event.isPre()) {
                    BlockPos pos = new BlockPos(-9, 90, -1);
                    getMc().thePlayer.sendQueue.addToSendQueueNoEvents(new C08PacketPlayerBlockPlacement(pos, 1, null, 0, 0, 0));
                }
                break;
            default:
                break;
        }
    }
    
    public boolean ticks(int ticks) {
    	return (mc.thePlayer.ticksExisted % ticks == 0);
    }
    
    public boolean reach(TimerUtil a, long time) {
    	return a.reach(time);
    }
    
    public boolean ticksMore(boolean more, int irc) {
    	
    	if(!more) {
        	return mc.thePlayer.ticksExisted <= irc;
    	}
    	
    	return mc.thePlayer.ticksExisted > irc;
    }
}
