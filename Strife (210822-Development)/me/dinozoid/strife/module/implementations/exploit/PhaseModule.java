package me.dinozoid.strife.module.implementations.exploit;

import me.dinozoid.strife.alpine.listener.EventHandler;
import me.dinozoid.strife.alpine.listener.Listener;
import me.dinozoid.strife.event.implementations.player.BoundingBoxEvent;
import me.dinozoid.strife.event.implementations.player.MovePlayerEvent;
import me.dinozoid.strife.event.implementations.player.PushOutOfBlocksEvent;
import me.dinozoid.strife.module.Category;
import me.dinozoid.strife.module.Module;
import me.dinozoid.strife.module.ModuleInfo;
import me.dinozoid.strife.property.implementations.EnumProperty;
import me.dinozoid.strife.util.player.MovementUtil;
import me.dinozoid.strife.util.player.PlayerUtil;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.play.client.C03PacketPlayer;

@ModuleInfo(name = "Phase", renderName = "Phase", description = "Go through blocks", category = Category.EXPLOIT)
public class PhaseModule extends Module {

    private final EnumProperty<PhaseMode> modeProperty = new EnumProperty("Phase", PhaseMode.HYPIXEL);

    @Override
    public void init() {
        super.init();
        addValueChangeListener(modeProperty);
    }

    @EventHandler
    private final Listener<MovePlayerEvent> movePlayerListener = new Listener<>(event -> {
        if(mc.gameSettings.keyBindSneak.isKeyDown()) {
            mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - 2.99998, mc.thePlayer.posZ);
            mc.getNetHandler().getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 3.09998, mc.thePlayer.posZ, false));
            mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - 2.99998, mc.thePlayer.posZ);
            mc.getNetHandler().getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 3.09998, mc.thePlayer.posZ, false));
            toggle();
        }
        switch (modeProperty.value()) {
            case HYPIXEL: {
                if (mc.thePlayer.isCollidedHorizontally) {
                    for(int i = 0; i < 4; i++) {
                        double[] push = MovementUtil.yawPos(0.05);
                        mc.getNetHandler().getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + push[0], mc.thePlayer.posY, mc.thePlayer.posZ + push[1], mc.thePlayer.onGround));
                    }
                }
                if(MovementUtil.isInsideBlock()) {
                    double[] push = MovementUtil.yawPos(0.74);
                    event.y(mc.thePlayer.motionY = 1.1E-2 * 1.3);
                    mc.thePlayer.getEntityBoundingBox().offsetAndUpdate(push[0], 0, push[1]);
                }
            }
            break;
        }
    });

    @EventHandler
    private final Listener<BoundingBoxEvent> boundingBoxListener = new Listener<>(event -> {
        if (mc.thePlayer.isCollidedHorizontally) event.bounds(null);
    });

    @EventHandler
    private final Listener<PushOutOfBlocksEvent> pushOutOfBlocksListener = new Listener<>(PushOutOfBlocksEvent::cancel);

    private enum PhaseMode {
        HYPIXEL
    }

}
