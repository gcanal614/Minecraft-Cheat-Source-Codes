package me.dinozoid.strife.module.implementations.exploit;

import me.dinozoid.strife.StrifeClient;
import me.dinozoid.strife.alpine.event.EventState;
import me.dinozoid.strife.alpine.listener.EventHandler;
import me.dinozoid.strife.alpine.listener.Listener;
import me.dinozoid.strife.event.implementations.network.PacketInboundEvent;
import me.dinozoid.strife.event.implementations.network.PacketOutboundEvent;
import me.dinozoid.strife.event.implementations.player.UpdatePlayerEvent;
import me.dinozoid.strife.module.Category;
import me.dinozoid.strife.module.Module;
import me.dinozoid.strife.module.ModuleInfo;
import me.dinozoid.strife.module.implementations.combat.KillAuraModule;
import me.dinozoid.strife.property.implementations.EnumProperty;
import me.dinozoid.strife.util.player.PlayerUtil;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S18PacketEntityTeleport;

@ModuleInfo(name = "Disabler", renderName = "Disabler", description = "Disables anticheats.", category = Category.EXPLOIT)
public class DisablerModule extends Module {

    private final EnumProperty<DisablerMode> modeProperty = new EnumProperty("Mode", DisablerMode.HYPIXEL);

    @Override
    public void init() {
        super.init();
        addValueChangeListener(modeProperty);
    }

    @Override
    public void onEnable() {
        super.onEnable();
    }

    @Override
    public void onDisable() {
        super.onDisable();
    }

    @EventHandler
    private final Listener<UpdatePlayerEvent> updatePlayerListener = new Listener<>(event -> {
        if(event.state() == EventState.PRE) {
            switch (modeProperty.value()) {
                case HYPIXEL: {
                    if(mc.thePlayer != null && mc.theWorld != null && mc.thePlayer.ticksExisted % 120 == 0 && !StrifeClient.INSTANCE.moduleRepository().moduleBy(PhaseModule.class).toggled()) {
                        mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY + 1.23E-17, mc.thePlayer.posZ);
                        mc.getNetHandler().getNetworkManager().sendPacket(new C03PacketPlayer(false));
                        mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ);
                        PlayerUtil.sendMessageWithPrefix("execute");
                    }
                }
                break;
            }
        } else {
            switch (modeProperty.value()) {
                case HYPIXEL: {

                }
                break;
            }
        }
    });

    @EventHandler
    private final Listener<PacketOutboundEvent> packetOutboundListener = new Listener<>(event -> {
        switch (modeProperty.value()) {
            case HYPIXEL: {

            }
            break;
        }
    });

    @EventHandler
    private final Listener<PacketInboundEvent> packetInboundListener = new Listener<>(event -> {
        switch (modeProperty.value()) {
            case HYPIXEL: {
            }
            break;
        }
    });

    private enum DisablerMode {
        HYPIXEL
    }

}
