/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  com.google.common.eventbus.Subscribe
 *  store.intent.intentguard.annotation.Native
 */
package cc.diablo.module.impl.exploit;

import cc.diablo.event.impl.PacketEvent;
import cc.diablo.event.impl.UpdateEvent;
import cc.diablo.event.impl.WorldLoadEvent;
import cc.diablo.helpers.HypixelHelper;
import cc.diablo.helpers.PacketHelper;
import cc.diablo.helpers.Stopwatch;
import cc.diablo.helpers.TimerUtil;
import cc.diablo.helpers.render.ChatHelper;
import cc.diablo.manager.module.ModuleManager;
import cc.diablo.module.Category;
import cc.diablo.module.Module;
import cc.diablo.module.impl.movement.Fly;
import cc.diablo.module.impl.player.Scaffold;
import cc.diablo.setting.impl.BooleanSetting;
import cc.diablo.setting.impl.ModeSetting;
import com.google.common.eventbus.Subscribe;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C18PacketSpectate;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.Timer;
import store.intent.intentguard.annotation.Native;

@Native
public class Disabler
extends Module {
    public ModeSetting mode = new ModeSetting("Disabler Mode", "Verus", "Verus", "BlocksMC", "AGC", "Watchdog", "HypixelSlime", "Matrix", "MatrixNew", "Spec", "Ghostly", "GhostlyFull", "Vulcan", "Dev");
    public BooleanSetting HubDisable = new BooleanSetting("Hub Disable", true);
    private final Deque<TimestampedPacket> transactionQueue = new ArrayDeque<TimestampedPacket>();
    private final Queue<Packet<?>> retardQueue = new ConcurrentLinkedDeque();
    private static final int AGC_REACH_AUTOBAN_CHANNEL = 65536;
    private static final short AGC_DISABLE_AUTOBAN_ID = Short.MAX_VALUE;
    private final Stopwatch hypixelStopwatch = new Stopwatch();
    private final Stopwatch packetStopwatch = new Stopwatch();
    private final Stopwatch spikeStopwatch = new Stopwatch();
    private final Stopwatch blocksWatch = new Stopwatch();
    private final Stopwatch stopwatch = new Stopwatch();
    private final Stopwatch joinWatch = new Stopwatch();
    private final ArrayList<Packet> packets = new ArrayList();
    public boolean hypixelShouldStrafe;
    private boolean expectedTeleport;
    private final TimerUtil timer = new TimerUtil();
    private long lastTransaction;
    public double limit;
    public int timerTicks;

    public Disabler() {
        super("Disabler", "Disabler for the funni acs", 0, Category.Exploit);
        this.addSettings(this.mode);
    }

    @Subscribe
    public void onWorldChange(WorldLoadEvent e) {
        switch (this.mode.getMode()) {
            case "Watchdog": {
                this.joinWatch.reset();
                this.hypixelStopwatch.reset();
                this.transactionQueue.clear();
                this.spikeStopwatch.reset();
                break;
            }
            case "GhostlyFull": {
                if (!ModuleManager.getModule(Disabler.class).isToggled()) break;
                new Thread(){

                    @Override
                    public void run() {
                        try {
                            ModuleManager.getModule(Disabler.class).setToggled(false);
                            ChatHelper.addChat("Disabled " + Disabler.this.mode.getMode() + " disabler to allow for server join");
                            Thread.sleep(1000L);
                            ModuleManager.getModule(Disabler.class).setToggled(true);
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
            }
        }
        this.hypixelShouldStrafe = true;
        this.stopwatch.reset();
    }

    @Override
    public void onEnable() {
        this.joinWatch.reset();
        this.expectedTeleport = false;
        this.packets.clear();
        this.timer.reset();
        this.lastTransaction = 0L;
        this.hypixelShouldStrafe = true;
        this.stopwatch.reset();
        this.timerTicks = 0;
        if (this.mode.isMode("BlocksMC")) {
            this.expectedTeleport = false;
            this.retardQueue.clear();
            this.blocksWatch.reset();
        }
        super.onEnable();
    }

    @Override
    public void onDisable() {
        Timer.timerSpeed = 1.0f;
        this.timerTicks = 0;
        try {
            this.packets.forEach(PacketHelper::sendPacketNoEvent);
            this.packets.clear();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        super.onDisable();
    }

    @Subscribe
    public void onUpdate(UpdateEvent e) {
        this.setDisplayName(this.getName() + "\u00a77 " + this.mode.getMode());
        switch (this.mode.getMode()) {
            case "Spec": {
                if (!e.isPre()) break;
                PacketHelper.sendPacketNoEvent(new C18PacketSpectate(Disabler.mc.thePlayer.getUniqueID()));
                break;
            }
            case "BlocksMC": {
                break;
            }
            case "Watchdog": {
                if (!ModuleManager.getModule(Fly.class).isToggled() && !ModuleManager.getModule(Scaffold.class).isToggled()) {
                    if (!e.isPost()) break;
                    if (Minecraft.theWorld == null) {
                        this.transactionQueue.clear();
                    }
                    if (this.packetStopwatch.hasReached(Disabler.mc.thePlayer.ticksExisted < 70 ? 1250L : 200L)) {
                        while (!this.transactionQueue.isEmpty()) {
                            mc.getNetHandler().addToSendQueueNoEvent(this.transactionQueue.removeLast().packet);
                        }
                        this.packetStopwatch.reset();
                    }
                    if (Disabler.mc.thePlayer.ticksExisted == 40) {
                        e.setPosX(e.getPosX() + 1.0);
                        e.setPosZ(e.getPosZ() + 1.0);
                    }
                    if (!this.spikeStopwatch.hasReached(10000L)) break;
                    this.packetStopwatch.reset();
                    this.spikeStopwatch.reset();
                    break;
                }
                while (!this.transactionQueue.isEmpty()) {
                    mc.getNetHandler().addToSendQueueNoEvent(this.transactionQueue.removeLast().packet);
                }
                this.packetStopwatch.reset();
            }
        }
    }

    @Subscribe
    public void onPacket(PacketEvent e) {
        switch (this.mode.getMode()) {
            case "Matrix": {
                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packetPlayer = (C03PacketPlayer)e.getPacket();
                    double x = Disabler.mc.thePlayer.posX;
                    double y = Disabler.mc.thePlayer.posY;
                    double z = Disabler.mc.thePlayer.posZ;
                    float yaw = Disabler.mc.thePlayer.rotationYaw;
                    float pitch = Disabler.mc.thePlayer.rotationPitch;
                    if (packetPlayer.isMoving()) {
                        x = packetPlayer.getPositionX();
                        y = packetPlayer.getPositionY();
                        z = packetPlayer.getPositionZ();
                    }
                    if (packetPlayer.getRotating()) {
                        yaw = packetPlayer.getYaw();
                        pitch = packetPlayer.getPitch();
                    }
                    PacketHelper.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(Disabler.mc.thePlayer.getPosition().down(1280), 256, new ItemStack(Blocks.stonebrick, 64), 0.0f, 0.0f, 0.0f));
                    PacketHelper.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(Disabler.mc.thePlayer.getPosition().down(1280), 256, new ItemStack(Blocks.stonebrick, 64), 0.0f, 0.0f, 0.0f));
                    PacketHelper.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(Disabler.mc.thePlayer.getPosition().down(1280), 256, new ItemStack(Blocks.stonebrick, 64), 0.0f, 0.0f, 0.0f));
                    e.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, packetPlayer.isOnGround()));
                    PacketHelper.sendPacketNoEvent(e.getPacket());
                    break;
                }
                if (!(e.getPacket() instanceof C0BPacketEntityAction)) break;
                e.setCancelled(true);
                break;
            }
            case "Verus": {
                double veruspositionraper = 0.911420691337;
                if (!e.isOutgoing()) break;
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction confirmtrans = (C0FPacketConfirmTransaction)e.getPacket();
                    if (Disabler.mc.thePlayer.ticksExisted % 3 == 0) {
                        confirmtrans.uid = (short)-1;
                    } else {
                        e.cancelled = true;
                    }
                }
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive keepalive = (C00PacketKeepAlive)e.getPacket();
                    keepalive.key = -6;
                }
                if (!(e.getPacket() instanceof C03PacketPlayer) || Disabler.mc.thePlayer.ticksExisted % 60 != 0) break;
                C03PacketPlayer c03 = (C03PacketPlayer)e.getPacket();
                c03.onGround = false;
                c03.y = -veruspositionraper;
                break;
            }
            case "BlocksMC": {
                if (this.packets.size() > 10) {
                    this.packets.clear();
                }
                if (e.getDir() == PacketEvent.DirectionType.Outgoing && e.getPacket() instanceof C00PacketKeepAlive && Disabler.mc.thePlayer.isEntityAlive()) {
                    this.packets.add(e.getPacket());
                    e.setCancelled(true);
                    if (this.timer.sleep(650L)) {
                        this.timer.reset();
                    }
                }
                if (this.timer.sleep(650L) && !this.packets.isEmpty()) {
                    Packet packet = this.packets.get(0);
                    mc.getNetHandler().getNetworkManager().sendPacket(packet);
                    this.packets.remove(packet);
                    this.timer.reset();
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    int AGC_REACH_AUTOBAN_CHANNEL = 65536;
                    int AGC_DISABLE_AUTOBAN_ID = Short.MAX_VALUE;
                    C0FPacketConfirmTransaction c0FPacketConfirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
                }
                if (e.getPacket() instanceof C00PacketKeepAlive && e.getDir() == PacketEvent.DirectionType.Outgoing) {
                    PacketHelper.sendPacketNoEvent(new C18PacketSpectate(Disabler.mc.thePlayer.getUniqueID()));
                }
                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = (C03PacketPlayer)e.getPacket();
                    if (Disabler.mc.thePlayer.ticksExisted % 5 == 0) {
                        PacketHelper.sendPacketNoEvent(new C0CPacketInput());
                    }
                    if (Disabler.mc.thePlayer.ticksExisted % 40 == 0) {
                        this.expectedTeleport = true;
                        c03PacketPlayer.y = -0.02632525;
                        c03PacketPlayer.onGround = false;
                        ChatHelper.addChat("SEX");
                    }
                }
                if (!(e.getPacket() instanceof S08PacketPlayerPosLook) || !this.expectedTeleport) break;
                S08PacketPlayerPosLook p = (S08PacketPlayerPosLook)e.getPacket();
                this.expectedTeleport = false;
                e.setCancelled(true);
                PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(p.getX(), p.getY(), p.getZ(), p.getYaw(), p.getPitch(), true));
                break;
            }
            case "Watchdog": {
                if (e.isOutgoing() && !this.joinWatch.hasReached(8714L)) {
                    e.setCancelled(true);
                    PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 8714L);
                }
                if (!ModuleManager.getModule(Fly.class).isToggled() && !ModuleManager.getModule(Scaffold.class).isToggled()) {
                    if (e.getPacket() instanceof C03PacketPlayer) {
                        if (this.lastTransaction > 0L) {
                            e.setCancelled(true);
                            --this.lastTransaction;
                            return;
                        }
                        if (e.getPacket() instanceof C03PacketPlayer) {
                            C03PacketPlayer packetPlayer = (C03PacketPlayer)e.getPacket();
                            if (!packetPlayer.isMoving() && !packetPlayer.getRotating()) {
                                e.setCancelled(true);
                            } else {
                                this.transactionQueue.push(new TimestampedPacket(e.getPacket(), System.currentTimeMillis()));
                            }
                            e.setCancelled(true);
                        }
                        if (e.getPacket() instanceof C00PacketKeepAlive) {
                            this.transactionQueue.push(new TimestampedPacket(e.getPacket(), System.currentTimeMillis()));
                            e.setCancelled(true);
                        }
                        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                            C0FPacketConfirmTransaction confirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
                            this.transactionQueue.push(new TimestampedPacket(e.getPacket(), System.currentTimeMillis()));
                            ++this.lastTransaction;
                            PacketHelper.sendPacketNoEvent(new C0CPacketInput());
                            e.setCancelled(true);
                        }
                    }
                    if (e.getPacket() instanceof S07PacketRespawn) {
                        this.transactionQueue.clear();
                        this.spikeStopwatch.reset();
                    }
                    if (!(e.getPacket() instanceof S08PacketPlayerPosLook)) break;
                    if (Disabler.mc.thePlayer.ticksExisted >= 4 && Disabler.mc.thePlayer.isCollidedVertically) {
                        S08PacketPlayerPosLook packetPlayerPosLook = (S08PacketPlayerPosLook)e.getPacket();
                        if (this.hypixelStopwatch.hasReached(2000L)) {
                            if (Disabler.mc.thePlayer.getDistance(packetPlayerPosLook.getX(), packetPlayerPosLook.getY(), packetPlayerPosLook.getZ()) < 10.0) {
                                this.lastTransaction = 6L;
                                e.setCancelled(true);
                            }
                            this.hypixelStopwatch.reset();
                        }
                    }
                    this.hypixelStopwatch.reset();
                    this.transactionQueue.clear();
                    this.spikeStopwatch.reset();
                    break;
                }
                this.hypixelStopwatch.reset();
                this.transactionQueue.clear();
                this.spikeStopwatch.reset();
                break;
            }
            case "HypixelSlime": {
                Packet<INetHandlerPlayServer> p;
                if (e.getPacket() instanceof S08PacketPlayerPosLook && !ModuleManager.getModule(Scaffold.class).isToggled() && Disabler.mc.thePlayer.ticksExisted % 5 == 0) {
                    p = (S08PacketPlayerPosLook)e.getPacket();
                    e.setCancelled(true);
                    PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(((S08PacketPlayerPosLook)p).getX(), ((S08PacketPlayerPosLook)p).getY(), ((S08PacketPlayerPosLook)p).getZ(), ((S08PacketPlayerPosLook)p).getYaw(), ((S08PacketPlayerPosLook)p).getPitch(), Disabler.mc.thePlayer.onGround));
                }
                if (e.getPacket() instanceof C03PacketPlayer) {
                    p = (C03PacketPlayer)e.getPacket();
                    ((C03PacketPlayer)p).onGround = true;
                }
                if (Disabler.mc.thePlayer.ticksExisted % 10 != 0 || !Disabler.mc.thePlayer.onGround || !Disabler.mc.thePlayer.isMoving()) break;
                HypixelHelper.slimeDisable();
                break;
            }
            case "AGC": {
                if (this.packets.size() > 10) {
                    this.packets.clear();
                }
                if (e.getDir() == PacketEvent.DirectionType.Outgoing && e.getPacket() instanceof C00PacketKeepAlive && Disabler.mc.thePlayer.isEntityAlive()) {
                    this.packets.add(e.getPacket());
                    e.setCancelled(true);
                    if (this.timer.sleep(650L)) {
                        this.timer.reset();
                    }
                }
                if (this.timer.sleep(650L) && !this.packets.isEmpty()) {
                    Packet packet = this.packets.get(0);
                    mc.getNetHandler().getNetworkManager().sendPacket(packet);
                    this.packets.remove(packet);
                    this.timer.reset();
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    int AGC_REACH_AUTOBAN_CHANNEL = 65536;
                    int AGC_DISABLE_AUTOBAN_ID = Short.MAX_VALUE;
                    C0FPacketConfirmTransaction c0FPacketConfirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
                }
                if (!(e.getPacket() instanceof C00PacketKeepAlive) || e.getDir() != PacketEvent.DirectionType.Outgoing) break;
                PacketHelper.sendPacketNoEvent(new C18PacketSpectate(Disabler.mc.thePlayer.getUniqueID()));
                break;
            }
            case "Dev": {
                if (!e.isOutgoing()) break;
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive)e.getPacket();
                    packetKeepAlive.key -= 24;
                    this.packets.add(e.getPacket());
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
                    this.packets.add(e.getPacket());
                    PacketHelper.sendPacketNoEvent(new C0CPacketInput());
                    e.setCancelled(true);
                }
                if (!(e.getPacket() instanceof S08PacketPlayerPosLook)) break;
                S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook)e.getPacket();
                PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                e.setCancelled(true);
                break;
            }
            case "Ghostly": {
                if (Disabler.mc.gameSettings.keyBindUseItem.pressed || !e.isOutgoing()) break;
                if (e.getPacket() instanceof C03PacketPlayer) {
                    PlayerCapabilities pc = new PlayerCapabilities();
                    pc.isCreativeMode = true;
                    pc.isFlying = true;
                    PacketHelper.sendPacketNoEvent(new C13PacketPlayerAbilities(pc));
                    PacketHelper.sendPacket(new C18PacketSpectate(Disabler.mc.thePlayer.getGameProfile().getId()));
                    PacketHelper.sendPacket(new C0CPacketInput(1.05f, 1.05f, true, false));
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    e.setCancelled(true);
                }
                if (!(e.getPacket() instanceof C00PacketKeepAlive)) break;
                e.setCancelled(true);
                break;
            }
            case "Vulcan": {
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                e.setCancelled(true);
                PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 9000L);
                break;
            }
            case "GhostlyFull": {
                if (Minecraft.theWorld != null) {
                    while (this.packets.size() > 25) {
                        for (Packet p : this.packets) {
                            PacketHelper.sendPacketNoEvent(p);
                        }
                        this.packets.clear();
                    }
                    if (e.getPacket() instanceof C00PacketKeepAlive) {
                        C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive)e.getPacket();
                        packetKeepAlive.key -= 24;
                        this.packets.add(e.getPacket());
                        e.setCancelled(true);
                    }
                    if (e.getPacket() instanceof C0BPacketEntityAction) {
                        e.setCancelled(true);
                    }
                    if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
                        this.packets.add(e.getPacket());
                        PacketHelper.sendPacketNoEvent(new C0CPacketInput());
                        e.setCancelled(true);
                    }
                    if (!(e.getPacket() instanceof S08PacketPlayerPosLook)) break;
                    S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook)e.getPacket();
                    PacketHelper.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                    e.setCancelled(true);
                    break;
                }
                this.packets.clear();
                break;
            }
            case "MatrixNew": {
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                    PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 5000L);
                }
                if (!(e.getPacket() instanceof C0FPacketConfirmTransaction)) break;
                e.setCancelled(true);
                PacketHelper.sendPacketNoEventDelayed(e.getPacket(), 5000L);
                break;
            }
            case "NullDisabler": {
                if (!e.isOutgoing()) break;
                e.setPacket(null);
            }
        }
    }

    boolean shouldNotRun() {
        if (this.HubDisable.isChecked()) {
            if (Disabler.mc.thePlayer == null) {
                return true;
            }
            if (Disabler.mc.thePlayer.inventory == null) {
                return true;
            }
            if (Disabler.mc.thePlayer.inventory.hasItem(Items.compass)) {
                return true;
            }
        }
        return Disabler.mc.thePlayer == null || Disabler.mc.thePlayer.ticksExisted <= 5;
    }

    private class TimestampedPacket {
        private final Packet<?> packet;
        private final long timestamp;

        public TimestampedPacket(Packet<?> packet, long timestamp) {
            this.packet = packet;
            this.timestamp = timestamp;
        }
    }
}

