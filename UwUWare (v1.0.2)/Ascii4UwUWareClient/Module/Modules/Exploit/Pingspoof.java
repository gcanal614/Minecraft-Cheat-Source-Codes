package Ascii4UwUWareClient.Module.Modules.Exploit;

import Ascii4UwUWareClient.API.EventHandler;
import Ascii4UwUWareClient.API.Events.World.EventPacketSend;
import Ascii4UwUWareClient.API.Value.Numbers;
import Ascii4UwUWareClient.Module.Module;
import Ascii4UwUWareClient.Module.ModuleType;
import Ascii4UwUWareClient.Util.TimerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.optifine.MathUtils;

import java.awt.*;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class Pingspoof extends Module {
    private List<Packet> packetList = new CopyOnWriteArrayList <Packet> ();
    private TimerUtil timer = new TimerUtil();
    private final Numbers <Double> Delay = new Numbers<Double>("Delay", "Delay", 0.5D , 3D, 300D, 1D);



    public Pingspoof() {
        super("PingSpoof", new String[] { "spoofping", "ping" }, ModuleType.Exploit);
        this.setColor(new Color (117, 52, 203).getRGB());
        addValues ( this.Delay );
    }

    @EventHandler
    private void onPacketSend(EventPacketSend e) {
        setSuffix (Delay.getValue ().intValue ());
        if (e.getPacket() instanceof C00PacketKeepAlive && this.mc.thePlayer.isEntityAlive()) {
            this.packetList.add(e.getPacket());
            e.setCancelled(true);
        }
        if (this.timer.hasReached(Delay.getValue ())) {
            if (!this.packetList.isEmpty()) {
                int i = 0;
                double totalPackets = MathUtils.getIncremental(Math.random() * 10.0, 1.0);
                for (Packet packet : this.packetList) {
                    if ((double) i >= totalPackets)
                        continue;
                    ++i;
                    this.mc.getNetHandler().getNetworkManager().sendPacket(packet);
                    this.packetList.remove(packet);
                }
            }
            this.mc.getNetHandler().getNetworkManager().sendPacket(new C00PacketKeepAlive(10000));
            this.timer.reset();
        }
    }
}
