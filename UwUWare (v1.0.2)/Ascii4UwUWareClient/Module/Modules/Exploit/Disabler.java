package Ascii4UwUWareClient.Module.Modules.Exploit;

import Ascii4UwUWareClient.API.EventHandler;
import Ascii4UwUWareClient.API.Events.World.EventPacketReceive;
import Ascii4UwUWareClient.API.Events.World.EventPacketSend;
import Ascii4UwUWareClient.API.Events.World.EventPreUpdate;
import Ascii4UwUWareClient.API.Value.Mode;
import Ascii4UwUWareClient.API.Value.Option;
import Ascii4UwUWareClient.Client;
import Ascii4UwUWareClient.Module.Module;
import Ascii4UwUWareClient.Module.ModuleType;
import Ascii4UwUWareClient.Module.Modules.Move.Fly;
import Ascii4UwUWareClient.Module.Modules.Move.Longjump;
import Ascii4UwUWareClient.Util.EventMotionUpdate;
import Ascii4UwUWareClient.Util.Helper;
import Ascii4UwUWareClient.Util.TimerUtil;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import org.apache.commons.lang3.RandomUtils;

import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;

import static java.lang.Float.MAX_VALUE;

public class Disabler extends Module {



    private int current;

    public Disabler() {
        super ( "Disabler", new String[]{"Disables AC Checks"}, ModuleType.Exploit );
        addValues ( mode, blinkLess );
    }

    private int i, currentTrans;
    ArrayList<Packet> transactions = new ArrayList<Packet>();
    ArrayList<Packet> keepAlives = new ArrayList <Packet> ();
    public int confirmtranscounter;
    public static final TimerUtil PING = new TimerUtil ();
    public final TimerUtil Timer = new TimerUtil ();
    public /* synthetic */ int confirmtransactioncounter;
    public ArrayList<Packet> delayedtransactions2;
    public static transient CopyOnWriteArrayList <Packet> packets = new CopyOnWriteArrayList <Packet> ();
    int currentTransaction = 0;



    public static Mode <Enum> mode = new Mode ( "Mode", "Mode", DisablerMode.values (), DisablerMode.MineplexCombat );
    public static Option <Boolean> blinkLess = new Option <> ( "Blink Less", "Blink Less", false );

    @EventHandler
    public void onUpdate(EventPreUpdate event) {
        setSuffix ( mode.getModeAsString () );
        if (mode.getModeAsString ().equalsIgnoreCase ( "Verus")) {

            if(mc.thePlayer.ticksExisted % 50 == 0) {
                double rand = RandomUtils.nextDouble (1000, 2000);
                mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY - rand, mc.thePlayer.posZ,
                        mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
            }
            if(mc.thePlayer.ticksExisted % 120 == 0 && (transactions.size()-1) > currentTransaction) {
                mc.thePlayer.sendQueue.addToSendQueueSilent (transactions.get(++currentTransaction));
            }
        }
    }

    public static Thread pingThread = new Thread ( () -> {
        int intp = 200 + new Random ().nextInt ( 350 );
        while (true) {
            if (PING.hasTimeElapsed ( intp, true )) {
                for (Packet p : packets) {

                    mc.getNetHandler ().addToSendQueueSilent ( p );
                    if (p instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction f = (C0FPacketConfirmTransaction) p;
                        Helper.sendMessage ( String.valueOf ( f.getUid () ) );
                        Helper.sendMessage ( String.valueOf ( f.isAccepted () ) );
                    }

                }
                if (packets.size () != 0) {
                    Helper.sendMessage ( String.valueOf ( intp ) );
                    intp = 200 + new Random ().nextInt ( 350 );
                }
                packets.clear ();
            }
        }
    } );

    static {
        pingThread.start ();
    }

    @Override
    public void onEnable() {

        super.onEnable ();
    }

    public void onDisable() {

        super.onDisable ();
    }
    @EventHandler
    public void onPacketSend(EventMotionUpdate event) {
        if (mode.getModeAsString ().equalsIgnoreCase ( "Verus" )) {

            if (mc.thePlayer.ticksExisted % 100 == 0 && !this.delayedtransactions2.isEmpty ()) {
                mc.thePlayer.sendQueue.addToSendQueue ( this.delayedtransactions2.get ( this.confirmtransactioncounter ) );
                ++this.confirmtransactioncounter;
                Helper.sendMessage ( "Pedo" );
            }
            if (this.Timer.hasReached ( 3000L )) {
                double var = RandomUtils.nextDouble ( 0.1, 1000.0 );
                Helper.sendMessage ( String.valueOf ( var ) );
                mc.thePlayer.sendQueue.addToSendQueue ( new C03PacketPlayer.C06PacketPlayerPosLook (mc.thePlayer.posX, mc.thePlayer.posY - 1000.0 * var,mc.thePlayer.posZ, mc.thePlayer.rotationYaw,mc.thePlayer.rotationPitch, mc.thePlayer.onGround )) ;
                this.Timer.reset ();
            }
        }
    }
    @EventHandler
    public void onPacketSend(EventPacketSend event) {
        switch (mode.getModeAsString ()) {
            case "MineplexCombat":
                if (event.getPacket () instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive) event.getPacket ();
                    packetKeepAlive.key -= RandomUtils.nextInt ( 3, 128 );
                    event.setCancelled ( true );
                }
                if (event.getPacket () instanceof C0CPacketInput) {
                    C0CPacketInput C0C = (C0CPacketInput) event.getPacket ();
                    C0C.strafeSpeed -= RandomUtils.nextInt ( 32324, 242352 );
                    C0C.jumping = true;
                    C0C.forwardSpeed -= RandomUtils.nextInt ( 14 / 100, 43 / 100 );
                }
                if (event.getPacket () instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packetConfirmTransaction = (C0FPacketConfirmTransaction) event.getPacket ();
                    packetConfirmTransaction.uid -= RandomUtils.nextInt ( 4, 130 );
                    event.setCancelled ( true );
                }
                break;

            case "Ghostly":
                if (event.getPacket () instanceof C0BPacketEntityAction) {
                    event.setCancelled ( true );
                }
                if (event.getPacket () instanceof C03PacketPlayer) {
                    this.mc.thePlayer.sendQueue.addToSendQueue ( (Packet) new C0CPacketInput ( MAX_VALUE, MAX_VALUE, true, true ) );
                    PlayerCapabilities capabilities = new PlayerCapabilities ();
                    capabilities.allowFlying = true;
                    capabilities.disableDamage = true;
                    capabilities.isFlying = true;
                    capabilities.isCreativeMode = true;
                    capabilities.allowEdit = true;
                    capabilities.setFlySpeed ( Float.POSITIVE_INFINITY );
                    capabilities.setPlayerWalkSpeed ( Float.POSITIVE_INFINITY );
                    this.mc.thePlayer.sendQueue.addToSendQueue ( (Packet) new C13PacketPlayerAbilities ( capabilities ) );


                }
                if (event.getPacket() instanceof S39PacketPlayerAbilities) {
                    S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) event.getPacket ();
                    S39.setAllowFlying(true);
                    S39.setCreativeMode(true);
                    S39.setFlying(true);
                    S39.setInvulnerable(true);
                    S39.allowFlying = true;
                    S39.creativeMode = true;
                    S39.flying = true;
                    S39.invulnerable = true;
                }
                break;
            case "Faithful":
                break;
            case "Verus":
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction p4 = (C0FPacketConfirmTransaction)((Object)event.getPacket());
                    if (mc.thePlayer.ticksExisted % 100 != 0) {
                        this.delayedtransactions2.add(event.getPacket());
                        Helper.sendMessage ( "Cock" );
                        event.setCancelled(true);
                    }
                }
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    C00PacketKeepAlive c00PacketKeepAlive;
                    C00PacketKeepAlive packet = c00PacketKeepAlive = (C00PacketKeepAlive)(event.getPacket());
                    --c00PacketKeepAlive.key;
                    Helper.sendMessage ( "Penis" );
                }


                break;
            case "VerusCombat":
                if (Client.instance.getModuleManager ().getModuleByClass ( Fly.class ).isEnabled () || Client.instance.getModuleManager ().getModuleByClass ( Longjump.class ).isEnabled ())
                    return;
                Packet packet1 = event.getPacket();
                if (packet1 instanceof C0FPacketConfirmTransaction) {
                    if (mc.thePlayer.isDead) {
                        confirmtranscounter = 0;
                    }
                    if (confirmtranscounter != 0) event.setCancelled ( true );
                    confirmtranscounter++;
                } else if (packet1 instanceof C0BPacketEntityAction) {
                    event.setCancelled ( true );
                }
                break;

        }
    }


    @EventHandler
    public void onPacketReceive(EventPacketReceive event) {
        if (mode.getModeAsString ().equalsIgnoreCase ( "Hypixel" )) {
            if (event.getPacket () instanceof C0FPacketConfirmTransaction) {
                packets.add ( event.getPacket () );
                event.setCancelled ( true );
            } else if (event.getPacket () instanceof C00PacketKeepAlive) {
                packets.add ( event.getPacket () );
                event.setCancelled ( true );
            }
        }
            if (mode.getModeAsString ().equalsIgnoreCase ( "Ghostly" )) {
                if (event.getPacket () instanceof C03PacketPlayer) {
                    this.mc.thePlayer.sendQueue.addToSendQueueSilent ( new C0CPacketInput ( MAX_VALUE, MAX_VALUE, true, true ) );
                    PlayerCapabilities c = new PlayerCapabilities ();
                    c.allowFlying = true;
                    c.disableDamage = true;
                    c.isFlying = true;
                    c.isCreativeMode = true;
                    c.allowEdit = true;
                    c.setFlySpeed ( Float.POSITIVE_INFINITY );
                    c.setPlayerWalkSpeed ( Float.POSITIVE_INFINITY );
                    this.mc.thePlayer.sendQueue.addToSendQueueSilent ( new C13PacketPlayerAbilities ( c ) );
                }
            }
            if (mode.getModeAsString ().equalsIgnoreCase ( "Verus" )) {
                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packetPlayer = (C03PacketPlayer) event.getPacket();
                    if (mc.thePlayer.ticksExisted < 30) {
                        Helper.sendMessage ( "C03" );
                        mc.getNetHandler().getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition());
                    } else {
                        packetPlayer.y += 0.42f;
                        Helper.sendMessage ( "loli"  );
                    }
                }

            }
        }


    public enum DisablerMode {
        MineplexCombat, Hypixel, Ghostly, Faithful, VerusCombat, Verus
    }

}