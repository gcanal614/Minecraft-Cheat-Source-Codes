package me.module.impl.exploit;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;

import me.Hime;
import me.event.Event;
import me.event.impl.EventSendPacket;
import me.event.impl.EventUpdate;
import me.hippo.api.lwjeb.annotation.Handler;
import me.module.Module;
import me.settings.Setting;
import me.util.MSTimer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

public class Disabler extends Module {

	private Setting mode;
	private LinkedList<Packet<?>> packets = new LinkedList<>();
	private final Queue<Packet<?>> packetQueue = new ConcurrentLinkedDeque<>();
	private final MSTimer timer = new MSTimer();
	private boolean expectedTeleport;

	public Disabler() {
		super("Disabler", 0,Category.EXPLOIT);
		ArrayList<String> modes = new ArrayList();
		modes.add("BlocksMc");
		modes.add("BlocksMc2");
		modes.add("BlocksMcCombat");
		modes.add("Spectate");
		Hime.instance.settingsManager.rSetting(mode = new Setting("Disabler Mode", this, "BlocksMc", modes));
	}

	@Override
	public void onEnable() {
		this.packetQueue.clear();
		this.timer.resetTime();
		this.expectedTeleport = false;
	}

	@Handler
	public void onUpdate(Event e) {
		if(e instanceof EventUpdate) {
			String ms = mode.getValString();
			setSuffix(ms);
			if(ms.equalsIgnoreCase("BlocksMc")) {
				if (this.mc.thePlayer.ticksExisted % 180 == 0) {
					while (this.packets.size() > 25) {
						mc.thePlayer.sendQueue.getNetworkManager().sendPacketNoEvent(packets.poll());
					}
				}
			}
		}
	}

	@Handler
	public void onPacket(EventSendPacket e){
		if(mode.getValString().equalsIgnoreCase("BlocksMC")){
			if (mc.thePlayer.ticksExisted <= 5) {
				packets.clear();
				return;
			}

			if (e.getPacket() instanceof C0BPacketEntityAction) {
				e.cancel();
			}

			if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
				packets.add(e.getPacket());
				e.cancel();
			}

			if (e.getPacket() instanceof C00PacketKeepAlive) {
				packets.add(e.getPacket());
				e.cancel();
			}
		}
	}

	boolean shouldRun() {
		return mc.thePlayer != null && mc.thePlayer.ticksExisted > 5;
	}

	boolean isInventory(short action) {
		return action > 0 && action < 100;
	}

}
