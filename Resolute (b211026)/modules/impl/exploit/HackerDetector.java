// 
// Decompiled by Procyon v0.5.36
// 

package vip.Resolute.modules.impl.exploit;

import net.minecraft.util.Vec3;
import net.minecraft.block.Block;
import net.minecraft.block.BlockLiquid;
import net.minecraft.block.BlockAir;
import net.minecraft.client.Minecraft;
import net.minecraft.util.BlockPos;
import net.minecraft.util.MathHelper;
import net.minecraft.client.network.NetworkPlayerInfo;
import java.util.Iterator;
import vip.Resolute.ui.notification.Notification;
import vip.Resolute.ui.notification.NotificationType;
import vip.Resolute.Resolute;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.potion.Potion;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.entity.Entity;
import vip.Resolute.events.impl.EventMotion;
import vip.Resolute.events.Event;
import vip.Resolute.settings.Setting;
import vip.Resolute.util.misc.TimerUtil;
import java.util.ArrayList;
import net.minecraft.entity.player.EntityPlayer;
import com.mojang.realmsclient.util.Pair;
import java.util.List;
import vip.Resolute.settings.impl.BooleanSetting;
import vip.Resolute.modules.Module;

public class HackerDetector extends Module
{
    public BooleanSetting pingSpoof;
    public BooleanSetting criticals;
    public BooleanSetting invalidPitch;
    public BooleanSetting noSlow;
    public BooleanSetting highjump;
    public BooleanSetting omnisprint;
    public BooleanSetting longjump;
    public BooleanSetting speed;
    public BooleanSetting step;
    public BooleanSetting velocity;
    public BooleanSetting killaura;
    public BooleanSetting fly;
    private final List<Pair<EntityPlayer, String>> data;
    public static final ArrayList<EntityPlayer> hackers;
    private final ArrayList<String> hacker;
    TimerUtil time;
    double motionvlY;
    double speedvl;
    double NoKBvl;
    double auravl;
    double noslowvl;
    public static boolean enabled;
    
    @Override
    public void onEnable() {
        super.onEnable();
        HackerDetector.hackers.clear();
        this.data.clear();
        this.hacker.clear();
        HackerDetector.enabled = true;
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        HackerDetector.hackers.clear();
        HackerDetector.enabled = false;
    }
    
    public HackerDetector() {
        super("HackerDetector", 0, "Detects Hackers", Category.EXPLOIT);
        this.pingSpoof = new BooleanSetting("Ping Spoof", true);
        this.criticals = new BooleanSetting("Criticals", true);
        this.invalidPitch = new BooleanSetting("Invalid Pitch", true);
        this.noSlow = new BooleanSetting("NoSlow", true);
        this.highjump = new BooleanSetting("HighJump", true);
        this.omnisprint = new BooleanSetting("OmniSprint", true);
        this.longjump = new BooleanSetting("LongJump", true);
        this.speed = new BooleanSetting("Speed", true);
        this.step = new BooleanSetting("Step", true);
        this.velocity = new BooleanSetting("Velocity", true);
        this.killaura = new BooleanSetting("Killaura", true);
        this.fly = new BooleanSetting("Fly", true);
        this.data = new ArrayList<Pair<EntityPlayer, String>>();
        this.hacker = new ArrayList<String>();
        this.time = new TimerUtil();
        this.addSettings(this.pingSpoof, this.criticals, this.invalidPitch, this.noSlow, this.highjump, this.omnisprint, this.longjump, this.speed, this.step, this.velocity, this.killaura, this.fly);
    }
    
    @Override
    public void onEvent(final Event e) {
        if (e instanceof EventMotion) {
            if (HackerDetector.mc.thePlayer.ticksExisted <= 105) {
                HackerDetector.hackers.clear();
                return;
            }
            if (HackerDetector.mc.theWorld == null) {
                return;
            }
            for (final Entity entity : HackerDetector.mc.theWorld.getLoadedEntityList()) {
                if (!(entity instanceof EntityPlayer)) {
                    continue;
                }
                EntityPlayer player = null;
                if (entity instanceof EntityOtherPlayerMP) {
                    player = (EntityOtherPlayerMP)entity;
                    if (this.getSpeed(player) > this.getBaseMoveSpeed() + 0.85 && !((EntityOtherPlayerMP)player).onGround && !this.isInLiquid(player)) {
                        this.informPlayer(player, "Motion/Moving too fast");
                    }
                    if (this.time.hasElapsed(1003L)) {
                        this.time.reset();
                    }
                    if (!((EntityOtherPlayerMP)player).isBlocking()) {
                        this.time.reset();
                    }
                    if (((EntityOtherPlayerMP)player).isBlocking() && ((EntityOtherPlayerMP)player).moveForward >= 0.9 && this.time.hasElapsed(200L)) {
                        this.informPlayer(player, "No Slow Down");
                    }
                    if (this.fly.isEnabled() && ((EntityOtherPlayerMP)player).motionY == 0.0 && this.getSpeed(player) > 0.2775 && HackerDetector.mc.thePlayer.ticksExisted % 2 == 0 && ((EntityOtherPlayerMP)player).posY - ((EntityOtherPlayerMP)player).lastTickPosY > 0.02 && !this.isInLiquid(player)) {
                        this.informPlayer(player, "Flight");
                    }
                }
                if ((player = (EntityPlayer)entity) instanceof EntityPlayerSP || !player.isEntityAlive() || HackerDetector.mc.playerController.isSpectator()) {
                    continue;
                }
                if (player.isSpectator()) {
                    continue;
                }
                if (this.criticals.isEnabled() && player.fallDistance > 0.0f && !this.checkGround(player.posY) && player.ridingEntity == null && (player.posY % 1.0 == 0.0 || player.posY % 0.5 == 0.0) && player.fallDistance < 0.06251 && !player.isPotionActive(Potion.blindness)) {
                    this.informPlayer(player, "Criticals(Invalid Pos)");
                    HackerDetector.hackers.add(player);
                }
                if (this.pingSpoof.isEnabled()) {
                    try {
                        final NetworkPlayerInfo info = HackerDetector.mc.getNetHandler().getPlayerInfo(player.getName());
                        if (info != null && info.getResponseTime() > 600) {
                            this.informPlayer(player, String.format("PingSpoof(%dms)", info.getResponseTime()));
                            HackerDetector.hackers.add(player);
                        }
                    }
                    catch (Throwable info2) {
                        info2.printStackTrace();
                    }
                }
                if (!this.invalidPitch.isEnabled()) {
                    continue;
                }
                if (player.rotationPitch <= 90.0f && player.rotationPitch >= -90.0f) {
                    continue;
                }
                this.informPlayer(player, "Invalid Pitch");
                HackerDetector.hackers.add(player);
            }
            for (final Entity entity : HackerDetector.mc.theWorld.playerEntities) {
                final EntityPlayer player = (EntityPlayer)entity;
                if (!(player instanceof EntityPlayerSP) && player != HackerDetector.mc.thePlayer && player.ticksExisted >= 105 && !HackerDetector.hackers.contains(player) && !player.capabilities.isFlying) {
                    if (player.capabilities.isCreativeMode) {
                        continue;
                    }
                    final double playerSpeed = getBPS(player);
                    if (this.killaura.isEnabled() && player.swingProgress < 2.0f && player.swingProgress != 0.0f) {
                        final float[] rots = getFacePosEntityRemote(HackerDetector.mc.thePlayer, player);
                        boolean highYawRate = false;
                        if (Math.abs(player.rotationYaw - player.prevRotationYaw) > 40.0f) {
                            highYawRate = true;
                        }
                        if (Math.abs(player.rotationYaw - rots[0]) < 2.0f) {
                            if (highYawRate) {
                                ++this.auravl;
                                if (this.auravl >= 30.0) {
                                    Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Kill Aura", 5000L, NotificationType.WARNING));
                                    this.auravl = 0.0;
                                    HackerDetector.hackers.add(player);
                                }
                            }
                            ++this.auravl;
                            if (this.auravl >= 30.0) {
                                Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Kill Aura", 5000L, NotificationType.WARNING));
                                this.auravl = 0.0;
                                HackerDetector.hackers.add(player);
                            }
                        }
                    }
                    if (this.noSlow.isEnabled() && player.isBlocking() && SpeedBs(player) >= 6.0) {
                        ++this.noslowvl;
                        if (this.noslowvl >= 30.0) {
                            Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using No Slow", 5000L, NotificationType.WARNING));
                            this.noslowvl = 0.0;
                            HackerDetector.hackers.add(player);
                        }
                    }
                    if (this.highjump.isEnabled() && player.motionY > 1.0) {
                        ++this.motionvlY;
                        if (this.motionvlY >= 25.0) {
                            Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using High Jump", 5000L, NotificationType.WARNING));
                            this.motionvlY = 0.0;
                            HackerDetector.hackers.add(player);
                        }
                    }
                    if (this.omnisprint.isEnabled() && player.isSprinting() && (player.moveForward < 0.0f || (player.moveForward == 0.0f && player.moveStrafing != 0.0f))) {
                        Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Omni Sprint", 5000L, NotificationType.WARNING));
                        HackerDetector.hackers.add(player);
                    }
                    if (this.longjump.isEnabled() && !HackerDetector.mc.theWorld.getCollidingBoundingBoxes(player, HackerDetector.mc.thePlayer.getEntityBoundingBox().offset(0.0, player.motionY, 0.0)).isEmpty() && player.motionY > 0.0 && playerSpeed > 10.0) {
                        Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Long Jump", 5000L, NotificationType.WARNING));
                        HackerDetector.hackers.add(player);
                    }
                    final double xDif = player.posX - player.prevPosX;
                    final double zDif = player.posZ - player.prevPosZ;
                    final double lastDist = Math.sqrt(xDif * xDif + zDif * zDif) * 20.0;
                    if (this.speed.isEnabled() && Math.round(lastDist) > 15L) {
                        ++this.speedvl;
                        if (this.speedvl >= 150.0) {
                            Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Speed", 5000L, NotificationType.WARNING));
                            this.speedvl = 0.0;
                            HackerDetector.hackers.add(player);
                        }
                    }
                    final double y;
                    final double lastY;
                    final double d;
                    final double yDiff = d = (((y = Math.abs((int)player.posY)) > (lastY = Math.abs((int)player.lastTickPosY))) ? (y - lastY) : (lastY - y));
                    if (this.step.isEnabled() && yDiff > 0.0 && HackerDetector.mc.thePlayer.onGround && player.motionY == -0.0784000015258789) {
                        Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Step", 5000L, NotificationType.WARNING));
                        this.speedvl = 0.0;
                        HackerDetector.hackers.add(player);
                    }
                    if (!this.velocity.isEnabled()) {
                        continue;
                    }
                    if (player.hurtResistantTime > 6 && player.hurtResistantTime < 12 && player.lastTickPosX == player.posX && player.posZ == player.lastTickPosZ && !HackerDetector.mc.theWorld.checkBlockCollision(player.getEntityBoundingBox().expand(0.05, 0.0, 0.05))) {
                        ++this.NoKBvl;
                        if (this.NoKBvl >= 50.0) {
                            Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Velocity", 5000L, NotificationType.WARNING));
                            this.NoKBvl = 0.0;
                            HackerDetector.hackers.add(player);
                        }
                    }
                    if (player.hurtResistantTime <= 6 || player.hurtResistantTime >= 12) {
                        continue;
                    }
                    if (player.lastTickPosY != player.posY) {
                        continue;
                    }
                    ++this.NoKBvl;
                    if (this.NoKBvl < 40.0) {
                        continue;
                    }
                    Resolute.getNotificationManager().add(new Notification("Hacker Detected!", "§f" + player.getName() + "§f is using Velocity", 5000L, NotificationType.WARNING));
                    this.NoKBvl = 0.0;
                    HackerDetector.hackers.add(player);
                }
            }
        }
    }
    
    public static boolean isHacker(final EntityLivingBase ent) {
        for (final EntityPlayer hacker : HackerDetector.hackers) {
            if (!ent.getName().equals(hacker.getName())) {
                continue;
            }
            return true;
        }
        return false;
    }
    
    private boolean checkGround(final double y) {
        return y % 0.015625 == 0.0;
    }
    
    private void informPlayer(final EntityPlayer player, final String hakk) {
        for (final Pair<EntityPlayer, String> pair : this.data) {
            if (pair.first() == player) {
                if (!((String)pair.second()).equalsIgnoreCase(hakk)) {
                    continue;
                }
                return;
            }
        }
        Resolute.getNotificationManager().add(new Notification("Hacker Detected!", String.format("§f%s is using %s", player.getName(), hakk, player.getHealth(), player.getMaxHealth()), 5000L, NotificationType.WARNING));
        this.data.add((Pair<EntityPlayer, String>)Pair.of((Object)player, (Object)hakk));
    }
    
    private double getSpeed(final EntityPlayer player) {
        return Math.sqrt(player.motionX * player.motionX + player.motionZ * player.motionZ);
    }
    
    private double getBaseMoveSpeed() {
        double baseSpeed = 0.2875;
        if (HackerDetector.mc.thePlayer.isPotionActive(Potion.moveSpeed)) {
            baseSpeed *= 1.0 + 0.2 * (HackerDetector.mc.thePlayer.getActivePotionEffect(Potion.moveSpeed).getAmplifier() + 1);
        }
        return baseSpeed;
    }
    
    private boolean isInLiquid(final Entity e) {
        for (int x = MathHelper.floor_double(e.getEntityBoundingBox().minY); x < MathHelper.floor_double(e.getEntityBoundingBox().maxX) + 1; ++x) {
            for (int z = MathHelper.floor_double(e.getEntityBoundingBox().minZ); z < MathHelper.floor_double(e.getEntityBoundingBox().maxZ) + 1; ++z) {
                final BlockPos pos = new BlockPos(x, (int)e.getEntityBoundingBox().minY, z);
                final Block block = Minecraft.getMinecraft().theWorld.getBlockState(pos).getBlock();
                if (block != null && !(block instanceof BlockAir)) {
                    return block instanceof BlockLiquid;
                }
            }
        }
        return false;
    }
    
    private static float[] getFacePosRemote(final Vec3 src, final Vec3 dest) {
        final double diffX = dest.xCoord - src.xCoord;
        final double diffY = dest.yCoord - src.yCoord;
        final double diffZ = dest.zCoord - src.zCoord;
        final double dist = MathHelper.sqrt_double(diffX * diffX + diffZ * diffZ);
        final float yaw = (float)(Math.atan2(diffZ, diffX) * 180.0 / 3.141592653589793) - 90.0f;
        final float pitch = (float)(-Math.atan2(diffY, dist) * 180.0 / 3.141592653589793);
        return new float[] { MathHelper.wrapAngleTo180_float(yaw), MathHelper.wrapAngleTo180_float(pitch) };
    }
    
    public static double getBPS(final Entity entityIn) {
        final double xDist = entityIn.posX - entityIn.prevPosX;
        final double zDist = entityIn.posZ - entityIn.prevPosZ;
        final double bps = Math.sqrt(xDist * xDist + zDist * zDist) * 20.0;
        return (int)bps + bps - (int)bps;
    }
    
    public static double SpeedBs(final Entity entity) {
        final double xDif = entity.posX - entity.prevPosX;
        final double zDif = entity.posZ - entity.prevPosZ;
        final double lastDist = Math.sqrt(xDif * xDif + zDif * zDif) * 20.0;
        return (double)Math.round(lastDist);
    }
    
    public static float[] getFacePosEntityRemote(final EntityLivingBase facing, final Entity en) {
        if (en == null) {
            return new float[] { facing.rotationYawHead, facing.rotationPitch };
        }
        return getFacePosRemote(new Vec3(facing.posX, facing.posY + en.getEyeHeight(), facing.posZ), new Vec3(en.posX, en.posY + en.getEyeHeight(), en.posZ));
    }
    
    static {
        hackers = new ArrayList<EntityPlayer>();
        HackerDetector.enabled = false;
    }
}
