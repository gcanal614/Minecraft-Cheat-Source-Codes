// 
// Decompiled by Procyon v0.5.36
// 

package vip.Resolute.modules.impl.exploit;

import net.minecraft.client.network.NetHandlerPlayClient;
import vip.Resolute.events.impl.EventMotion;
import vip.Resolute.events.Event;
import disabler.packetlib.event.session.SessionListener;
import disabler.packetlib.event.session.DisconnectedEvent;
import java.util.Iterator;
import disabler.mc.protocol.data.game.PlayerListEntry;
import com.google.gson.JsonElement;
import disabler.mc.protocol.data.message.Message;
import disabler.mc.protocol.data.game.PlayerListEntryAction;
import disabler.mc.protocol.packet.ingame.server.ServerPlayerListEntryPacket;
import disabler.mc.protocol.packet.ingame.server.entity.spawn.ServerSpawnPlayerPacket;
import disabler.mc.protocol.packet.ingame.server.ServerRespawnPacket;
import net.minecraft.network.play.client.C01PacketChatMessage;
import disabler.mc.protocol.packet.ingame.server.ServerJoinGamePacket;
import disabler.mc.protocol.packet.ingame.server.entity.ServerEntityPositionPacket;
import disabler.mc.protocol.packet.ingame.client.player.ClientPlayerPositionRotationPacket;
import disabler.mc.protocol.packet.ingame.server.entity.player.ServerPlayerPositionRotationPacket;
import disabler.mc.protocol.packet.ingame.server.ServerDisconnectPacket;
import com.google.gson.JsonObject;
import disabler.packetlib.packet.Packet;
import disabler.mc.protocol.packet.ingame.client.ClientChatPacket;
import disabler.mc.protocol.packet.ingame.server.ServerChatPacket;
import net.minecraft.client.Minecraft;
import disabler.packetlib.event.session.PacketReceivedEvent;
import disabler.packetlib.event.session.SessionAdapter;
import java.net.Proxy;
import disabler.packetlib.SessionFactory;
import disabler.packetlib.packet.PacketProtocol;
import disabler.packetlib.tcp.TcpSessionFactory;
import disabler.mc.auth.exception.request.RequestException;
import vip.Resolute.ui.notification.Notification;
import vip.Resolute.ui.notification.NotificationType;
import disabler.mc.protocol.MinecraftProtocol;
import vip.Resolute.Resolute;
import java.util.HashMap;
import disabler.packetlib.Client;
import javax.vecmath.Vector3d;
import org.apache.commons.lang3.tuple.MutablePair;
import java.util.UUID;
import java.util.Map;
import com.google.gson.JsonParser;
import vip.Resolute.modules.Module;

public class MineplexDisabler extends Module
{
    private final int PORT = 25565;
    private final JsonParser PARSER;
    public final Map<UUID, MutablePair<Integer, String>> entityCache;
    public Vector3d clientPos;
    private int playerId;
    public String spectatorIGN;
    public Client client;
    private long loginTime;
    public MineplexStatus currentStatus;
    
    public MineplexDisabler() {
        super("MineplexDisabler", 0, "Disables Mineplex", Category.EXPLOIT);
        this.PARSER = new JsonParser();
        this.entityCache = new HashMap<UUID, MutablePair<Integer, String>>();
        this.clientPos = new Vector3d(0.0, Double.MIN_VALUE, 0.0);
        this.currentStatus = MineplexStatus.DISCONNECTED;
    }
    
    private Client login() {
        this.currentStatus = MineplexStatus.CONNECTING;
        this.loginTime = System.currentTimeMillis();
        final String[] userInfo = Resolute.instance.getSpectatorAlt();
        MinecraftProtocol protocol;
        try {
            protocol = new MinecraftProtocol(userInfo[0], userInfo[1], false);
        }
        catch (RequestException e) {
            Resolute.getNotificationManager().add(new Notification("Error", "Failed to log into alt", 5000L, NotificationType.ERROR));
            e.printStackTrace();
            return null;
        }
        this.spectatorIGN = protocol.getProfile().getName();
        final Client client = new Client("us.mineplex.com", 25565, protocol, new TcpSessionFactory());
        client.getSession().setFlag("auth-proxy", Proxy.NO_PROXY);
        client.getSession().addListener(new SessionAdapter() {
            @Override
            public void packetReceived(final PacketReceivedEvent event) {
                if (Minecraft.getMinecraft().thePlayer == null) {
                    client.getSession().disconnect("Disconnected");
                }
                if (event.getPacket() instanceof ServerChatPacket) {
                    final Message message = event.getPacket().getMessage();
                    final JsonElement element = message.toJson();
                    try {
                        if (message.getFullText().toLowerCase().contains("join> " + MineplexDisabler.this.spectatorIGN.toLowerCase())) {
                            Resolute.addChatMessage("[BOT] " + message.getFullText());
                            client.getSession().send(new ClientChatPacket("/spec"));
                            Resolute.addChatMessage("Sent /spec");
                        }
                        if (element instanceof JsonObject) {
                            client.getSession().send(new ClientChatPacket(MineplexDisabler.this.PARSER.parse(element.getAsJsonObject().getAsJsonObject().get("text").getAsString()).getAsJsonObject().get("extra").getAsJsonArray().get(0).getAsJsonObject().get("extra").getAsJsonArray().get(1).getAsJsonObject().get("clickEvent").getAsJsonObject().get("value").getAsString()));
                            System.out.println("Got party invite.");
                        }
                    }
                    catch (Exception ex) {}
                }
                if (event.getPacket() instanceof ServerDisconnectPacket) {
                    Resolute.addChatMessage("[§cMPD§c] Alt was disconnected: " + event.getPacket().getReason().getFullText());
                }
                if (event.getPacket() instanceof ServerPlayerPositionRotationPacket) {
                    final ServerPlayerPositionRotationPacket positionRotationPacket = event.getPacket();
                    MineplexDisabler.this.clientPos = new Vector3d(positionRotationPacket.getX(), positionRotationPacket.getY(), positionRotationPacket.getZ());
                    for (int i = 0; i < 2; ++i) {
                        client.getSession().send(new ClientPlayerPositionRotationPacket(true, positionRotationPacket.getX(), positionRotationPacket.getY(), positionRotationPacket.getZ(), 0.0f, 0.0f));
                    }
                }
                if (event.getPacket() instanceof ServerEntityPositionPacket) {
                    final ServerEntityPositionPacket packet = event.getPacket();
                    if (packet.getEntityId() == MineplexDisabler.this.playerId) {
                        MineplexDisabler.this.clientPos = new Vector3d(packet.getMovementX(), packet.getMovementY(), packet.getMovementZ());
                    }
                }
                if (event.getPacket() instanceof ServerJoinGamePacket) {
                    MineplexDisabler.this.currentStatus = MineplexStatus.CONNECTED;
                    final ServerJoinGamePacket joinGamePacket = event.getPacket();
                    MineplexDisabler.this.playerId = joinGamePacket.getEntityId();
                    final C01PacketChatMessage p_147297_1_;
                    final Object o;
                    new Thread(() -> {
                        Minecraft.getMinecraft().getNetHandler();
                        new C01PacketChatMessage("/party " + MineplexDisabler.this.spectatorIGN);
                        ((NetHandlerPlayClient)o).sendPacketNoEvent(p_147297_1_);
                        return;
                    }).start();
                }
                if (event.getPacket() instanceof ServerRespawnPacket) {
                    final ServerRespawnPacket serverRespawnPacket = event.getPacket();
                }
                if (event.getPacket() instanceof ServerSpawnPlayerPacket) {
                    final ServerSpawnPlayerPacket packet2 = event.getPacket();
                    if (packet2.getEntityId() == MineplexDisabler.this.playerId) {
                        MineplexDisabler.this.clientPos = new Vector3d(packet2.getX(), packet2.getY(), packet2.getZ());
                    }
                    MineplexDisabler.this.entityCache.put(packet2.getUUID(), (MutablePair<Integer, String>)new MutablePair((Object)packet2.getEntityId(), (Object)""));
                }
                if (event.getPacket() instanceof ServerPlayerListEntryPacket) {
                    final ServerPlayerListEntryPacket packet3 = event.getPacket();
                    if (packet3.getAction() == PlayerListEntryAction.ADD_PLAYER) {
                        for (final PlayerListEntry entry : packet3.getEntries()) {
                            for (final UUID set : MineplexDisabler.this.entityCache.keySet()) {
                                if (set.equals(entry.getProfile().getId())) {
                                    MineplexDisabler.this.entityCache.get(set).right = entry.getProfile().getName();
                                }
                            }
                        }
                    }
                }
            }
            
            @Override
            public void disconnected(final DisconnectedEvent event) {
                MineplexDisabler.this.currentStatus = MineplexStatus.DISCONNECTED;
                System.out.println("Bot Disconnected: " + Message.fromString(event.getReason()).getFullText());
                MineplexDisabler.this.entityCache.clear();
                if (event.getCause() != null) {
                    event.getCause().printStackTrace();
                }
            }
        });
        return client;
    }
    
    @Override
    public void onEvent(final Event e) {
        if (e instanceof EventMotion) {
            final long timeDiff = System.currentTimeMillis() - this.loginTime;
            if (Resolute.instance.getSpectatorAlt() != null && this.currentStatus != MineplexStatus.CONNECTED && timeDiff > 5000L) {
                this.client.getSession().disconnect("Disconnected");
                this.update();
            }
        }
    }
    
    public void update() {
        this.entityCache.clear();
        this.client = this.login();
        assert this.client != null;
        this.client.getSession().connect();
    }
    
    public enum MineplexStatus
    {
        DISCONNECTED("§cDisconnected"), 
        CONNECTING("§eConnecting..."), 
        CONNECTED("§aConnected");
        
        private final String display;
        
        private MineplexStatus(final String display) {
            this.display = display;
        }
        
        @Override
        public String toString() {
            return this.display;
        }
    }
}
