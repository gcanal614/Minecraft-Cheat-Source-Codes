// 
// Decompiled by Procyon v0.5.36
// 

package vip.Resolute.modules.impl.exploit;

import net.minecraft.util.Timer;
import java.util.Iterator;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import org.apache.commons.lang3.RandomUtils;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import vip.Resolute.modules.impl.combat.KillAura;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import vip.Resolute.events.impl.EventPacket;
import net.minecraft.util.MovementInput;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C18PacketSpectate;
import vip.Resolute.util.misc.MathUtils;
import vip.Resolute.events.impl.EventUpdate;
import vip.Resolute.events.impl.EventMotion;
import vip.Resolute.events.Event;
import vip.Resolute.ui.notification.Notification;
import vip.Resolute.ui.notification.NotificationType;
import vip.Resolute.Resolute;
import vip.Resolute.settings.Setting;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.ArrayList;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C03PacketPlayer;
import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayDeque;
import net.minecraft.network.Packet;
import java.util.List;
import vip.Resolute.util.misc.TimerUtil;
import vip.Resolute.util.misc.TimerUtils;
import vip.Resolute.settings.impl.BooleanSetting;
import vip.Resolute.settings.impl.NumberSetting;
import vip.Resolute.settings.impl.ModeSetting;
import vip.Resolute.modules.Module;

public class Disabler extends Module
{
    public ModeSetting mode;
    public NumberSetting pingDelay;
    public BooleanSetting removeLagBack;
    public BooleanSetting c0fProp;
    public BooleanSetting c00Prop;
    public TimerUtils timerUtils;
    public TimerUtil timer;
    private final List<Packet<?>> packets;
    private final TimerUtils packetTimer;
    private final List<Packet<?>> packetBuffer;
    private final ArrayDeque<Packet> list;
    private LinkedList<Packet> packetQueue;
    private Queue<Short> queueID;
    public boolean isDisabling;
    Short uid;
    TimerUtil disableTime;
    private int aac5Status;
    private double aac5LastPosX;
    private int aac5Same;
    private C03PacketPlayer.C06PacketPlayerPosLook aac5QueuedPacket;
    private int aac5SameReach;
    private List<C0FPacketConfirmTransaction> c0fs;
    private List<C00PacketKeepAlive> c00s;
    
    public boolean isModeSelected() {
        return this.mode.is("Ping");
    }
    
    public Disabler() {
        super("Disabler", 0, "Disables anticheat checks", Category.EXPLOIT);
        this.mode = new ModeSetting("Mode", "Ping", new String[] { "Ping", "Verus Combat", "Capabilities", "Verus-Semi", "AACv5", "LatinPlay", "C00", "Minemen", "MineplexCombat", "Ghostly", "Vicnix", "Spectator", "13369", "Transaction" });
        this.pingDelay = new NumberSetting("Ping Delay", 5000.0, this::isModeSelected, 10.0, 10000.0, 10.0);
        this.removeLagBack = new BooleanSetting("Remove Lagback", true, () -> this.mode.is("Verus-Semi"));
        this.c0fProp = new BooleanSetting("C0F", true, () -> this.mode.is("Minemen"));
        this.c00Prop = new BooleanSetting("C00", false, () -> this.mode.is("Minemen"));
        this.timerUtils = new TimerUtils();
        this.timer = new TimerUtil();
        this.packets = new ArrayList<Packet<?>>();
        this.packetTimer = new TimerUtils();
        this.packetBuffer = new ArrayList<Packet<?>>();
        this.list = new ArrayDeque<Packet>();
        this.packetQueue = new LinkedList<Packet>();
        this.queueID = new ConcurrentLinkedQueue<Short>();
        this.isDisabling = false;
        this.uid = -1;
        this.disableTime = new TimerUtil();
        this.aac5Status = 0;
        this.aac5LastPosX = 0.0;
        this.aac5Same = 0;
        this.aac5QueuedPacket = null;
        this.aac5SameReach = 5;
        this.c0fs = new ArrayList<C0FPacketConfirmTransaction>();
        this.c00s = new ArrayList<C00PacketKeepAlive>();
        this.addSettings(this.mode, this.pingDelay, this.removeLagBack, this.c0fProp, this.c00Prop);
    }
    
    @Override
    public void onEnable() {
        final int currentTrans = 0;
        this.timer.reset();
        this.c0fs.clear();
        this.c00s.clear();
        if (this.mode.is("AACv5")) {
            final double x = Disabler.mc.thePlayer.posX;
            final double y = Disabler.mc.thePlayer.posY;
            final double z = Disabler.mc.thePlayer.posZ;
            Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(x, Double.MAX_VALUE, z, true));
            this.aac5LastPosX = 0.0;
            this.aac5QueuedPacket = null;
            this.aac5Same = 0;
            this.aac5SameReach = 5;
            this.aac5Status = 0;
        }
        this.packetQueue.clear();
        if (this.mode.is("AntiAC")) {
            Resolute.addChatMessage("Disabling in 3 Seconds....");
        }
        if (this.mode.is("LatinPlay")) {
            Resolute.getNotificationManager().add(new Notification("Disabling", "Please wait 10 seconds...", 10000L, NotificationType.WARNING));
            this.isDisabling = true;
        }
        this.disableTime.reset();
        super.onEnable();
    }
    
    @Override
    public void onDisable() {
        final int currentTrans = 0;
        super.onDisable();
        Disabler.mc.thePlayer.capabilities.allowFlying = false;
        this.isDisabling = false;
        this.c0fs.clear();
        this.c00s.clear();
    }
    
    @Override
    public void onEvent(final Event e) {
        this.setSuffix("");
        if (e instanceof EventMotion) {
            final EventMotion event = (EventMotion)e;
            if (this.mode.is("Ping")) {
                if (Disabler.mc.thePlayer.ticksExisted < 5 && this.packets.size() > 0) {
                    this.packets.clear();
                }
                if (this.packetTimer.hasTimeElapsed((long)this.pingDelay.getValue(), true)) {
                    while (this.packets.size() > 0) {
                        Disabler.mc.getNetHandler().sendPacketNoEvent(this.packets.remove(0));
                    }
                    this.packetTimer.reset();
                }
            }
            if (this.mode.is("Verus-Semi") && Disabler.mc.thePlayer.ticksExisted % 180 == 0) {
                while (this.list.size() > 22) {
                    Disabler.mc.getNetHandler().sendPacketNoEvent(this.list.poll());
                }
            }
            if (this.mode.is("LatinPlay")) {
                if (this.isDisabling && this.disableTime.hasElapsed(10000L)) {
                    Resolute.getNotificationManager().add(new Notification("AntiCheat Disabled", "Disabler is unstable for now", 3000L, NotificationType.SUCCESS));
                    this.isDisabling = false;
                }
                if (Disabler.mc.thePlayer.ticksExisted < 5 && this.packets.size() > 0) {
                    this.packets.clear();
                }
                if (this.packetTimer.hasTimeElapsed(1000L, true)) {
                    while (this.packets.size() > 0) {
                        Disabler.mc.getNetHandler().sendPacketNoEvent(this.packets.remove(0));
                    }
                    this.packetTimer.reset();
                }
            }
            if (this.mode.is("Watchdog") && Disabler.mc.thePlayer.ticksExisted % 180 == 0) {
                while (this.packetQueue.size() > 22) {
                    Disabler.mc.getNetHandler().sendPacketNoEvent(this.packetQueue.poll());
                }
            }
            if (this.mode.is("Karhu Dev")) {
                Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY + 0.125, Disabler.mc.thePlayer.posZ, false));
                if (Disabler.mc.thePlayer.ticksExisted % 20 == 0) {
                    for (int i = 0; i < 20; ++i) {
                        Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY + 0.300001, Disabler.mc.thePlayer.posZ, false));
                        Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, false));
                    }
                    Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, true));
                }
            }
        }
        if (e instanceof EventUpdate) {
            if (this.mode.is("AACv5")) {
                if (Disabler.mc.thePlayer.onGround) {
                    Resolute.getNotificationManager().add(new Notification("Warning", "Jump into the air first and then toggle", 4000L, NotificationType.WARNING));
                    this.toggled = false;
                }
                else {
                    Disabler.mc.gameSettings.keyBindForward.pressed = (this.aac5Status != 1);
                    Disabler.mc.thePlayer.motionX = 0.0;
                    Disabler.mc.thePlayer.motionZ = 0.0;
                    Disabler.mc.thePlayer.motionY = 0.0;
                    Disabler.mc.thePlayer.rotationYaw = Disabler.mc.thePlayer.rotationYaw;
                    Disabler.mc.thePlayer.rotationPitch = Disabler.mc.thePlayer.rotationPitch;
                    if (this.aac5Status == 1) {
                        if (this.aac5QueuedPacket != null) {
                            Disabler.mc.getNetHandler().sendPacketNoEvent(this.aac5QueuedPacket);
                            final double dist = 0.13;
                            final double yaw = Math.toRadians(Disabler.mc.thePlayer.rotationYaw);
                            final double x = -Math.sin(yaw) * dist;
                            final double z = Math.cos(yaw) * dist;
                            Disabler.mc.thePlayer.setPosition(Disabler.mc.thePlayer.posX + x, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ + z);
                            Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, false));
                        }
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Double.MAX_VALUE, Disabler.mc.thePlayer.posZ, true));
                        this.aac5QueuedPacket = new C03PacketPlayer.C06PacketPlayerPosLook(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, Disabler.mc.thePlayer.rotationYaw, Disabler.mc.thePlayer.rotationPitch, false);
                    }
                }
            }
            if (this.mode.is("Transaction") && e.isPre()) {
                Disabler.mc.getNetHandler().sendPacketNoEvent(new C0FPacketConfirmTransaction(0, (short)MathUtils.getRandomInRange(-32767.0, 32767.0), false));
            }
            if (this.mode.is("Spectator") && e.isPre()) {
                Disabler.mc.getNetHandler().sendPacketNoEvent(new C18PacketSpectate(Disabler.mc.thePlayer.getUniqueID()));
            }
            if (this.mode.is("Ghostly")) {
                if (Disabler.mc.thePlayer.ticksExisted % 3 == 0) {
                    Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, Disabler.mc.thePlayer.rotationYaw, Disabler.mc.thePlayer.rotationPitch, Disabler.mc.thePlayer.onGround));
                    Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(Disabler.mc.thePlayer.rotationYaw, Disabler.mc.thePlayer.rotationPitch, Disabler.mc.thePlayer.onGround));
                    Disabler.mc.getNetHandler().sendPacketNoEvent(new C18PacketSpectate(Disabler.mc.thePlayer.getUniqueID()));
                }
                Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput());
            }
            if (this.mode.is("Vicnix Old")) {
                if (Disabler.mc.thePlayer.ticksExisted % 3 == 0) {
                    Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, Disabler.mc.thePlayer.rotationYaw, Disabler.mc.thePlayer.rotationPitch, Disabler.mc.thePlayer.onGround));
                    Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(Disabler.mc.thePlayer.rotationYaw, Disabler.mc.thePlayer.rotationPitch, Disabler.mc.thePlayer.onGround));
                }
                if (Disabler.mc.thePlayer.ticksExisted % 40 == 0) {
                    final NetHandlerPlayClient netHandler = Disabler.mc.getNetHandler();
                    final MovementInput movementInput = Disabler.mc.thePlayer.movementInput;
                    final float moveStrafe = MovementInput.moveStrafe;
                    final MovementInput movementInput2 = Disabler.mc.thePlayer.movementInput;
                    netHandler.sendPacketNoEvent(new C0CPacketInput(moveStrafe, MovementInput.moveForward, Disabler.mc.thePlayer.movementInput.jump, Disabler.mc.thePlayer.movementInput.sneak));
                    Disabler.mc.getNetHandler().sendPacketNoEvent(new C18PacketSpectate(Disabler.mc.thePlayer.getUniqueID()));
                }
            }
        }
        if (e instanceof EventPacket) {
            if (this.mode.is("C00") && ((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                e.setCancelled(true);
            }
            if (this.mode.is("Watchdog Timer")) {
                if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    final C00PacketKeepAlive c00 = ((EventPacket)e).getPacket();
                    e.setCancelled(true);
                    this.c00s.add(c00);
                    if (this.c00s.size() >= 5) {
                        for (final C00PacketKeepAlive pack : this.c00s) {
                            Disabler.mc.getNetHandler().sendPacketNoEvent(pack);
                        }
                        this.c00s.clear();
                    }
                }
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction c0f = ((EventPacket)e).getPacket();
                    if (c0f.getWindowId() == 0 && c0f.getUid() < 0) {
                        e.setCancelled(true);
                        this.c0fs.add(c0f);
                    }
                    if (this.c0fs.size() >= 5) {
                        for (final C0FPacketConfirmTransaction pack2 : this.c0fs) {
                            Disabler.mc.getNetHandler().sendPacketNoEvent(pack2);
                        }
                        this.c0fs.clear();
                    }
                }
            }
            if (this.mode.is("Watchdog")) {
                if (Disabler.mc.thePlayer != null && Disabler.mc.thePlayer.ticksExisted == 0) {
                    this.packetQueue.clear();
                }
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction confirmTransaction = ((EventPacket)e).getPacket();
                    for (int j = 0; j < 4; ++j) {
                        this.packetQueue.add(confirmTransaction);
                    }
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("Verus-Semi")) {
                if (Disabler.mc.thePlayer != null && Disabler.mc.thePlayer.ticksExisted == 0) {
                    this.list.clear();
                }
                final Packet packet = ((EventPacket)e).getPacket();
                if (packet instanceof C03PacketPlayer) {
                    final double yPos = Math.round(Disabler.mc.thePlayer.posY / 0.015625) * 0.015625;
                    Disabler.mc.thePlayer.setPosition(Disabler.mc.thePlayer.posX, yPos, Disabler.mc.thePlayer.posZ);
                    if (Disabler.mc.thePlayer.ticksExisted % 45 == 0) {
                        Resolute.addChatMessage("You can fly now");
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, true));
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY - 11.725, Disabler.mc.thePlayer.posZ, false));
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, true));
                    }
                }
                else if (((EventPacket)e).getPacket() instanceof S08PacketPlayerPosLook) {
                    final S08PacketPlayerPosLook packet2 = ((EventPacket)e).getPacket();
                    final double x2 = packet2.getX() - Disabler.mc.thePlayer.posX;
                    final double y = packet2.getY() - Disabler.mc.thePlayer.posY;
                    final double z = packet2.getZ() - Disabler.mc.thePlayer.posZ;
                    final double diff = Math.sqrt(x2 * x2 + y * y + z * z);
                    if (diff <= 8.0 && this.removeLagBack.isEnabled()) {
                        e.setCancelled(true);
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet2.getX(), packet2.getY(), packet2.getZ(), packet2.getYaw(), packet2.getPitch(), true));
                    }
                }
                else if (packet instanceof C0FPacketConfirmTransaction) {
                    for (int i = 0; i < 4; ++i) {
                        this.list.add(packet);
                    }
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("Minemen") && this.c00Prop.isEnabled() && KillAura.target != null && ((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                e.setCancelled(true);
            }
            if (this.mode.is("Minemen") && this.c0fProp.isEnabled() && KillAura.target != null && ((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                e.setCancelled(true);
            }
            if (this.mode.is("Verus Combat")) {
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction confirmTransaction2 = ((EventPacket)e).getPacket();
                    if (Disabler.mc.thePlayer.ticksExisted % 3 == 0) {
                        confirmTransaction2.uid = -1;
                    }
                    else {
                        e.setCancelled(true);
                    }
                }
                if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    final C00PacketKeepAlive keepAlive = ((EventPacket)e).getPacket();
                    keepAlive.key = -6;
                }
            }
            if (this.mode.is("Verus Semi")) {
                if (Disabler.mc.thePlayer != null && Disabler.mc.thePlayer.ticksExisted < 8) {
                    this.packetQueue.clear();
                }
                if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    this.packetQueue.add(((EventPacket)e).getPacket());
                    e.setCancelled(true);
                }
                else if (((EventPacket)e).getPacket() instanceof C03PacketPlayer) {
                    final double yPos2 = Math.round(Disabler.mc.thePlayer.posY / 0.015625) * 0.015625;
                    Disabler.mc.thePlayer.setPosition(Disabler.mc.thePlayer.posX, yPos2, Disabler.mc.thePlayer.posZ);
                    if (Disabler.mc.thePlayer.ticksExisted % 45 == 0) {
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, true));
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, 1.0E159, Disabler.mc.thePlayer.posZ, false));
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, true));
                    }
                }
                else if (((EventPacket)e).getPacket() instanceof S08PacketPlayerPosLook) {
                    final S08PacketPlayerPosLook packet3 = ((EventPacket)e).getPacket();
                    final double x3 = packet3.getX() - Disabler.mc.thePlayer.posX;
                    final double y2 = packet3.getY() - Disabler.mc.thePlayer.posY;
                    final double z2 = packet3.getZ() - Disabler.mc.thePlayer.posZ;
                    final double diff2 = Math.sqrt(x3 * x3 + y2 * y2 + z2 * z2);
                    if (diff2 <= 8.0) {
                        e.setCancelled(true);
                        Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet3.getX(), packet3.getY(), packet3.getZ(), packet3.getYaw(), packet3.getPitch(), true));
                    }
                }
                else if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction packet4 = ((EventPacket)e).getPacket();
                    for (int i = 0; i < 4; ++i) {
                        this.packetQueue.add(packet4);
                    }
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("AACv5") && ((EventPacket)e).getPacket() instanceof S08PacketPlayerPosLook) {
                final S08PacketPlayerPosLook packet5 = ((EventPacket)e).getPacket();
                if (this.aac5Status == 0) {
                    Disabler.mc.thePlayer.setPosition(packet5.getX(), packet5.getY(), packet5.getZ());
                    Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, packet5.getYaw(), packet5.getPitch(), false));
                    if (Disabler.mc.thePlayer.posX == this.aac5LastPosX) {
                        ++this.aac5Same;
                        if (this.aac5Same >= 5) {
                            this.aac5Status = 1;
                            Disabler.mc.timer.timerSpeed = 0.65f;
                            this.aac5Same = 0;
                            return;
                        }
                    }
                    final double x4 = 0.12;
                    final double y3 = Math.toRadians(Disabler.mc.thePlayer.rotationYaw);
                    Disabler.mc.thePlayer.setPosition(Disabler.mc.thePlayer.posX + -Math.sin(y3) * x4, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ + Math.cos(y3) * x4);
                    Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Disabler.mc.thePlayer.posY, Disabler.mc.thePlayer.posZ, false));
                    this.aac5LastPosX = Disabler.mc.thePlayer.posX;
                    Disabler.mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(Disabler.mc.thePlayer.posX, Double.MAX_VALUE, Disabler.mc.thePlayer.posZ, true));
                }
                else if (Disabler.mc.timer.timerSpeed <= 1.65f) {
                    ++this.aac5Same;
                    if (this.aac5Same >= this.aac5SameReach) {
                        this.aac5Same = 0;
                        this.aac5SameReach += (int)13.0f;
                        final Timer timer = Disabler.mc.timer;
                        timer.timerSpeed += 0.4f;
                    }
                }
            }
            if (this.mode.is("Interact") && ((EventPacket)e).getPacket() instanceof C08PacketPlayerBlockPlacement) {
                Disabler.mc.getNetHandler().addToSendQueue(new C03PacketPlayer());
                Disabler.mc.getNetHandler().addToSendQueue(new C07PacketPlayerDigging());
                Disabler.mc.getNetHandler().addToSendQueue(new C0FPacketConfirmTransaction());
            }
            if (this.mode.is("Ping") && e instanceof EventPacket) {
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction packet4 = ((EventPacket)e).getPacket();
                    if (packet4.getUid() < 0) {
                        this.packets.add(packet4);
                        e.setCancelled(true);
                    }
                }
                else if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    this.packets.add(((EventPacket)e).getPacket());
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("LatinPlay") && e instanceof EventPacket) {
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction packet4 = ((EventPacket)e).getPacket();
                    if (packet4.getUid() < 0) {
                        this.packets.add(packet4);
                        e.setCancelled(true);
                    }
                }
                else if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    this.packets.add(((EventPacket)e).getPacket());
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("Vicnix")) {
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    e.setCancelled(true);
                }
                if (((EventPacket)e).getPacket() instanceof C13PacketPlayerAbilities) {
                    final C13PacketPlayerAbilities C13 = ((EventPacket)e).getPacket();
                    C13.setAllowFlying(true);
                    C13.setCreativeMode(true);
                    C13.setInvulnerable(true);
                    C13.setFlying(false);
                    C13.allowFlying = true;
                    C13.creativeMode = true;
                    C13.invulnerable = true;
                    C13.flying = false;
                }
            }
            if (this.mode.is("Karhu Dev") && Disabler.mc.thePlayer != null && Disabler.mc.theWorld != null) {
                if (((EventPacket)e).getPacket() instanceof C00Handshake) {
                    e.setCancelled(true);
                }
                if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                }
                if (((EventPacket)e).getPacket() instanceof S00PacketKeepAlive) {
                    e.setCancelled(true);
                }
                if (((EventPacket)e).getPacket() instanceof S39PacketPlayerAbilities) {
                    final S39PacketPlayerAbilities S39 = ((EventPacket)e).getPacket();
                    S39.setAllowFlying(true);
                    S39.setCreativeMode(true);
                    S39.setFlying(true);
                    S39.setInvulnerable(true);
                    S39.allowFlying = true;
                    S39.creativeMode = true;
                    S39.flying = true;
                    S39.invulnerable = true;
                }
                if (((EventPacket)e).getPacket() instanceof C13PacketPlayerAbilities) {
                    final C13PacketPlayerAbilities C13 = ((EventPacket)e).getPacket();
                    C13.setAllowFlying(true);
                    C13.setCreativeMode(true);
                    C13.setFlying(true);
                    C13.setInvulnerable(true);
                    C13.allowFlying = true;
                    C13.creativeMode = true;
                    C13.flying = true;
                    C13.invulnerable = true;
                }
                if (Disabler.mc.thePlayer.ticksExisted > 3 && ((EventPacket)e).getPacket() instanceof C03PacketPlayer) {
                    final C03PacketPlayer C14 = ((EventPacket)e).getPacket();
                    C14.onGround = false;
                }
            }
            if (this.mode.is("Vicnix Old") && ((EventPacket)e).getPacket() instanceof C03PacketPlayer) {
                final C03PacketPlayer packetPlayer = ((EventPacket)e).getPacket();
                final PlayerCapabilities c2 = new PlayerCapabilities();
                c2.allowFlying = true;
                c2.isCreativeMode = true;
                c2.disableDamage = true;
                packetPlayer.moving = false;
                if (Disabler.mc.thePlayer.ticksExisted % 2 == 0) {
                    packetPlayer.onGround = true;
                    c2.setFlySpeed(Float.MAX_VALUE);
                    c2.setPlayerWalkSpeed(Float.POSITIVE_INFINITY);
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("Ghostly")) {
                if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    final C00PacketKeepAlive packet6 = ((EventPacket)e).getPacket();
                    packet6.key = -1;
                    e.setCancelled(true);
                }
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction packetConfirmTransaction = ((EventPacket)e).getPacket();
                    packetConfirmTransaction.uid = -6;
                    e.setCancelled(true);
                }
                if (((EventPacket)e).getPacket() instanceof S32PacketConfirmTransaction) {
                    final S32PacketConfirmTransaction pee = ((EventPacket)e).getPacket();
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("MineplexCombat")) {
                if (((EventPacket)e).getPacket() instanceof C00PacketKeepAlive) {
                    final C00PacketKeepAlive c00PacketKeepAlive;
                    final C00PacketKeepAlive packetKeepAlive = c00PacketKeepAlive = ((EventPacket)e).getPacket();
                    c00PacketKeepAlive.key -= RandomUtils.nextInt(3, 128);
                    e.setCancelled(true);
                }
                if (((EventPacket)e).getPacket() instanceof C0CPacketInput) {
                    final C0CPacketInput c0CPacketInput;
                    final C0CPacketInput C0C = c0CPacketInput = ((EventPacket)e).getPacket();
                    c0CPacketInput.strafeSpeed -= RandomUtils.nextInt(32324, 242352);
                    C0C.jumping = true;
                    final C0CPacketInput c0CPacketInput2 = C0C;
                    c0CPacketInput2.forwardSpeed -= RandomUtils.nextInt(0, 0);
                }
                if (((EventPacket)e).getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction c0FPacketConfirmTransaction;
                    final C0FPacketConfirmTransaction packetConfirmTransaction = c0FPacketConfirmTransaction = ((EventPacket)e).getPacket();
                    c0FPacketConfirmTransaction.uid -= (short)RandomUtils.nextInt(4, 130);
                    e.setCancelled(true);
                }
            }
            if (this.mode.is("Capabilities")) {
                if (e.isOutgoing()) {
                    if (((EventPacket)e).getPacket() instanceof C0BPacketEntityAction) {
                        e.setCancelled(true);
                    }
                    if (((EventPacket)e).getPacket() instanceof C03PacketPlayer) {
                        Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, true, true));
                        final PlayerCapabilities capabilities = new PlayerCapabilities();
                        capabilities.allowFlying = true;
                        capabilities.disableDamage = true;
                        capabilities.isFlying = true;
                        capabilities.isCreativeMode = true;
                        capabilities.allowEdit = true;
                        capabilities.setFlySpeed(Float.POSITIVE_INFINITY);
                        capabilities.setPlayerWalkSpeed(Float.POSITIVE_INFINITY);
                        Disabler.mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities(capabilities));
                    }
                    if (((EventPacket)e).getPacket() instanceof S39PacketPlayerAbilities) {
                        System.out.println("C03");
                        final S39PacketPlayerAbilities S39 = ((EventPacket)e).getPacket();
                        S39.setAllowFlying(true);
                        S39.setCreativeMode(true);
                        S39.setFlying(true);
                        S39.setInvulnerable(true);
                        S39.allowFlying = true;
                        S39.creativeMode = true;
                        S39.flying = true;
                        S39.invulnerable = true;
                    }
                }
                if (e.isIncoming() && ((EventPacket)e).getPacket() instanceof C03PacketPlayer) {
                    Disabler.mc.thePlayer.sendQueue.addToSendQueueSilent(new C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, true, true));
                    final PlayerCapabilities c3 = new PlayerCapabilities();
                    c3.allowFlying = true;
                    c3.disableDamage = true;
                    c3.isFlying = true;
                    c3.isCreativeMode = true;
                    c3.allowEdit = true;
                    c3.setFlySpeed(Float.POSITIVE_INFINITY);
                    c3.setPlayerWalkSpeed(Float.POSITIVE_INFINITY);
                    Disabler.mc.thePlayer.sendQueue.addToSendQueueSilent(new C13PacketPlayerAbilities(c3));
                }
            }
        }
    }
}
