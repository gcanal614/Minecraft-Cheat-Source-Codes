package wtf.monsoon.impl.modules.exploit;


import java.util.LinkedList;
import java.util.Queue;

import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import net.minecraft.util.BlockPos;
import net.minecraft.world.WorldSettings;
import org.apache.commons.lang3.RandomUtils;
import wtf.monsoon.Monsoon;
import org.lwjgl.input.Keyboard;

import wtf.monsoon.api.event.EventTarget;
import wtf.monsoon.api.module.Category;
import wtf.monsoon.api.module.Module;
import wtf.monsoon.api.setting.impl.ModeSetting;
import wtf.monsoon.api.util.entity.DamageUtil;
import wtf.monsoon.api.util.misc.MathUtils;
import wtf.monsoon.api.util.misc.PacketUtil;
import wtf.monsoon.api.util.misc.ServerUtil;
import wtf.monsoon.api.util.misc.Timer;
import wtf.monsoon.api.util.world.WorldUtil;
import wtf.monsoon.impl.ui.notification.Notification;
import wtf.monsoon.impl.ui.notification.NotificationManager;
import wtf.monsoon.impl.ui.notification.NotificationType;
import net.minecraft.network.Packet;
import wtf.monsoon.api.Wrapper;
import wtf.monsoon.api.event.impl.*;

public class Disabler extends Module {

    public ModeSetting mode = new ModeSetting("Mode", this,"Self lagback", "BridgerLand", "Karhu", "Vicnix", "VerusCombat", "VerusSemiMovement", "MineplexCombat", "Spectator", "Spin", "Self lagback", "Z3R0 epic not fake redesky disabler!!!1111", "AntiAC");

    private int btime = 0;
    private double yaw;
    private Timer yawTimer = new Timer();

    int count = 0;

    public Disabler() {
        super("Disabler", "Disables anticheats", Keyboard.KEY_NONE, Category.EXPLOIT);
        this.addSettings(mode);
    }

    private boolean sex = false;

    public Timer timer = new Timer(), bedlesstimer = new Timer();
    Queue<Packet> gamer = new LinkedList<>();
    Queue<Packet> packetQueue = new LinkedList<>();


    @Override
    public void onEnable() {
    	super.onEnable();
        timer.reset();
        yawTimer.reset();
        bedlesstimer.reset();
        packetQueue.clear();
        if(ServerUtil.isHypixel() &&  !mode.is("Spectator")) {
            NotificationManager.show(new Notification(NotificationType.INFO, "Disabler", "Disablers may ban on hypixel!", 2));
        }
        if(mode.is("AntiAC")) {
            NotificationManager.show(new Notification(NotificationType.INFO, "Disabler", "Wait 2.5 seconds", 1));
        }
        if(mode.is("BridgerLand")) {
            NotificationManager.show(new Notification(NotificationType.INFO, "Disabler", "this $5 block game hack is better than bridger.land", 1));
            for (int i = 0; i < 20; i++) {
                mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,mc.thePlayer.posY + 0.300001D, mc.thePlayer.posZ, false));
                mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false));
            }

            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
            mc.thePlayer.ticksExisted = 0;
        }
        if(mode.is("Vicnix")) {
           /* double oldy = mc.thePlayer.posY;
            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(false));
            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 5, mc.thePlayer.posZ, false));
            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, oldy, mc.thePlayer.posZ, false));
            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));*/
        }
    }

    @Override
    public void onDisable() {
    	super.onDisable();
        mc.timer.timerSpeed = 1.0f;
    }

    @EventTarget
    public void onSendPacket(EventSendPacket e) {
        if(mode.is("Vicnix")) {
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                e.setCancelled(true);
            }
            if (e.getPacket() instanceof C13PacketPlayerAbilities) {
                C13PacketPlayerAbilities C13 = (C13PacketPlayerAbilities) e.getPacket();
                C13.setAllowFlying(true);
                C13.setCreativeMode(true);
                C13.setInvulnerable(true);
                C13.setFlying(false);
                C13.allowFlying = true;
                C13.creativeMode = true;
                C13.invulnerable = true;
                C13.flying = false;
            }
        }

        if(mode.is("Spectator")) {

        }

        if(mode.is("MineplexCombat")) {
            Packet packet = e.getPacket();
            if(packet instanceof C00PacketKeepAlive) {
                ((C00PacketKeepAlive)packet).key -= MathUtils.randomNumber(1000, 2147483647);
            }
        }

        if(mode.is("VerusCombat")) {
            Packet packet = e.getPacket();
            if (packet instanceof C0FPacketConfirmTransaction) {
                if(mc.thePlayer.isDead) {
                    count = 0;
                }
                if(count != 0) e.setCancelled(true);
                count++;
            } else if(packet instanceof C0BPacketEntityAction) {
                e.setCancelled(true);
            }
        }

        if(mode.is("Karhu")) {
            if(mc.thePlayer != null && mc.theWorld != null) {
                if (e.getPacket() instanceof C00Handshake) {
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof S00PacketKeepAlive) {
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof S39PacketPlayerAbilities) {
                    S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) e.getPacket();
                    S39.setAllowFlying(true);
                    S39.setCreativeMode(true);
                    S39.setFlying(true);
                    S39.setInvulnerable(true);
                    S39.allowFlying = true;
                    S39.creativeMode = true;
                    S39.flying = true;
                    S39.invulnerable = true;
                }
                if (e.getPacket() instanceof C13PacketPlayerAbilities) {
                    C13PacketPlayerAbilities C13 = (C13PacketPlayerAbilities) e.getPacket();
                    C13.setAllowFlying(true);
                    C13.setCreativeMode(true);
                    C13.setFlying(true);
                    C13.setInvulnerable(true);
                    C13.allowFlying = true;
                    C13.creativeMode = true;
                    C13.flying = true;
                    C13.invulnerable = true;
                }
                if (mc.thePlayer.ticksExisted > 3) {
                    if (e.getPacket() instanceof C03PacketPlayer) {
                        C03PacketPlayer C03 = (C03PacketPlayer) e.getPacket();
                       C03.onGround = false;
                    }
                }
            }
        }

        if(mode.is("VerusSemiMovement")) {
            if(mc.thePlayer.ticksExisted == 0) packetQueue.clear();
            Packet packet = e.getPacket();
            if(packet instanceof C03PacketPlayer) {
                double yPos = Math.round(mc.thePlayer.posY / 0.015625) * 0.015625;
                mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ);
                if(mc.thePlayer.ticksExisted % 45 == 0){
                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posY, true));
                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posY, false));
                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posY, true));
                }
                //((C03PacketPlayer) packet).onGround = true;
            } else if(packet instanceof C0FPacketConfirmTransaction) {
                for(int i = 0; i < 4; i++){
                    packetQueue.add(packet);
                }
                e.setCancelled(true);
            }
        }

        if(mode.is("BridgerLand2")) {

        }
    }

    @EventTarget
    public void onGetPacket(EventReceivePacket e) {

        if(mode.is("Z3R0 epic not fake redesky disabler!!!1111")) {
            Packet packet = e.getPacket();

            if (packet instanceof C03PacketPlayer)
                e.setCancelled(true);
        }

        if(mode.is("VerusCombat")) {

        }

        if(mode.is("Karhu")) {
            if (e.getPacket() instanceof C00Handshake) {
                e.setCancelled(true);
            }
            if (e.getPacket() instanceof C00PacketKeepAlive) {
                e.setCancelled(true);
            }
            if (e.getPacket() instanceof S00PacketKeepAlive) {
                e.setCancelled(true);
            }
            if (e.getPacket() instanceof S39PacketPlayerAbilities) {
                S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) e.getPacket();
                S39.setAllowFlying(true);
                S39.setCreativeMode(true);
                S39.setFlying(true);
                S39.setInvulnerable(true);
                S39.allowFlying = true;
                S39.creativeMode = true;
                S39.flying = true;
                S39.invulnerable = true;
            }
            if (e.getPacket() instanceof C13PacketPlayerAbilities) {
                C13PacketPlayerAbilities C13 = (C13PacketPlayerAbilities) e.getPacket();
                C13.setAllowFlying(true);
                C13.setCreativeMode(true);
                C13.setFlying(true);
                C13.setInvulnerable(true);
                C13.allowFlying = true;
                C13.creativeMode = true;
                C13.flying = true;
                C13.invulnerable = true;
            }
            if (mc.thePlayer.ticksExisted > 3) {
                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer C03 = (C03PacketPlayer) e.getPacket();
                    C03.onGround = false;
                }
            }
        }

        if(mode.is("VerusSemiMovement")) {
            Packet packet = e.getPacket();
            if(packet instanceof S08PacketPlayerPosLook){

                S08PacketPlayerPosLook so = (S08PacketPlayerPosLook) packet;

                double packetX = so.x;
                double packetY = so.y;
                double packetZ = so.z;
                float packetYaw = so.yaw;
                float packetPitch = so.pitch;

                double x = packetX - mc.thePlayer.posX;
                double y = packetY - mc.thePlayer.posY;
                double z = packetZ - mc.thePlayer.posZ;
                double diff = Math.sqrt(x * x + y * y + z * z);
                if(diff <= 8){
                    e.setCancelled(true);
                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packetX, packetY, packetZ, packetYaw, packetPitch, true));
                }
            }
        }
        
        if(mode.is("BridgerLand")) {

        }

        if(mode.is("Vicnix")) {
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                e.setCancelled(true);
            }
            if (e.getPacket() instanceof S39PacketPlayerAbilities) {
                S39PacketPlayerAbilities S39 = (S39PacketPlayerAbilities) e.getPacket();
                S39.setAllowFlying(true);
                S39.setCreativeMode(true);
                S39.setFlying(false);
                S39.setInvulnerable(true);
                S39.allowFlying = true;
                S39.creativeMode = true;
                S39.flying = false;
                S39.invulnerable = true;
            }
        }
    
    }
    
    @EventTarget
    public void onUpdate(EventUpdate e) {
        this.setSuffix(mode.getMode());

        if(yawTimer.hasTimeElapsed(360, false)) {
            yawTimer.reset();
        }

        if(mode.is("BridgerLand")) {

        }

        if(mode.is("Spectator")) {
            if(timer.hasTimeElapsed(1000, true)) {
                PacketUtil.sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getGameProfile().getId()));
            }
        }

        if(mode.is("BridgerLand")) {

        }

        if(mode.is("Vicnix")) {
            if(Monsoon.INSTANCE.manager.killAura.isEnabled() && Monsoon.INSTANCE.manager.killAura.target != null && Wrapper.mc.thePlayer.getDistanceToEntity(Monsoon.INSTANCE.manager.killAura.target) <=  Monsoon.INSTANCE.manager.killAura.range.getValue()) {
                Wrapper.mc.timer.timerSpeed = 0.5f;
            } else {
                Wrapper.mc.timer.timerSpeed = 1.0f;
            }
            //PacketUtil.sendPacketNoEvent(new C03PacketPlayer());
            if(timer.hasTimeElapsed(6000, true)) {
               // PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, 4, mc.thePlayer.posZ, true));
            }
        }

        if(mode.is("AntiAC")) {
            //mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
            if(timer.hasTimeElapsed(3000, true)) {
                int rand = (int) MathUtils.randomNumber(9, 6);
                double oldY = Wrapper.mc.thePlayer.posY;

                Wrapper.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Wrapper.mc.thePlayer.posX, Wrapper.mc.thePlayer.posY - rand, Wrapper.mc.thePlayer.posZ, true));
                Wrapper.mc.thePlayer.setPosition(Wrapper.mc.thePlayer.posX, Wrapper.mc.thePlayer.posY - rand, Wrapper.mc.thePlayer.posZ);

                Wrapper.mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Wrapper.mc.thePlayer.posX, oldY, Wrapper.mc.thePlayer.posZ, Wrapper.mc.thePlayer.onGround));
                Wrapper.mc.thePlayer.setPosition(Wrapper.mc.thePlayer.posX, oldY, Wrapper.mc.thePlayer.posZ);
            }
        }

    }

    @EventTarget
    public void onRenderPlayer(EventRenderPlayer e) {
        if(mode.is("Spin") && !Monsoon.INSTANCE.manager.scaffold.isEnabled() && !(Monsoon.INSTANCE.manager.killAura.isEnabled() && Monsoon.INSTANCE.manager.killAura.target.getDistanceSqToEntity(mc.thePlayer) <=  Monsoon.INSTANCE.manager.killAura.range.getValue())) {
            //e.setPitch(yawTimer.getTime());
            e.setYaw(yawTimer.getTime());
        }
    }

    @EventTarget
    public void onMotion(EventPreMotion e) {

        if(mode.is("Spin") && !Monsoon.INSTANCE.manager.scaffold.isEnabled() && (Monsoon.INSTANCE.manager.killAura.isEnabled() && Monsoon.INSTANCE.manager.killAura.target.getDistanceSqToEntity(mc.thePlayer) <=  Monsoon.INSTANCE.manager.killAura.range.getValue())) {
           // e.setPitch(yawTimer.getTime());
            e.setYaw(yawTimer.getTime());
        }

        if(mode.is("Self lagback")) {
            double oldPosX =  Wrapper.mc.thePlayer.posX, oldPosY = Wrapper.mc.thePlayer.posY, oldPosZ = Wrapper.mc.thePlayer.posZ, oldYaw, oldPitch;

            if(timer.hasTimeElapsed(1000, true)) {
                Wrapper.mc.thePlayer.posX = oldPosX;
                Wrapper.mc.thePlayer.posY = oldPosY;
                Wrapper.mc.thePlayer.posZ = oldPosZ;
                Wrapper.mc.thePlayer.motionX *= 0.001F;
                Wrapper.mc.thePlayer.motionY *= -0.5F;
                Wrapper.mc.thePlayer.motionZ *= 0.001F;
                oldPosX = Wrapper.mc.thePlayer.posX;
                oldPosY = Wrapper.mc.thePlayer.posY;
                oldPosZ = Wrapper.mc.thePlayer.posZ;
            }
        }

        if(mode.is("Karhu")) {
            mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,mc.thePlayer.posY + 0.125D, mc.thePlayer.posZ, false));
            if (mc.thePlayer.ticksExisted % 20 == 0) {
                for (int i = 0; i < 20; i++) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition( mc.thePlayer.posX, mc.thePlayer.posY + 0.300001D, mc.thePlayer.posZ, false));
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false));
                }
                mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,  mc.thePlayer.posY, mc.thePlayer.posZ, true));
            }
        }

        if(mode.is("VerusSemiMovement")) {
            if(mc.thePlayer.ticksExisted % 180 == 0){
                while(packetQueue.size() > 22){
                    Packet packet = packetQueue.poll();
                    if(packet instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction polledPacket = (C0FPacketConfirmTransaction) packet;
                        PacketUtil.sendPacketNoEvent(new C0FPacketConfirmTransaction(polledPacket.windowId, polledPacket.uid, polledPacket.accepted));
                    }
                }
            }
        }
    
    }

}