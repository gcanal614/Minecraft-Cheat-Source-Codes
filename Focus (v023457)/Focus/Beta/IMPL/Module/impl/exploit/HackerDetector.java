package Focus.Beta.IMPL.Module.impl.exploit;

import Focus.Beta.API.EventHandler;
import Focus.Beta.API.events.world.EventPreUpdate;
import Focus.Beta.IMPL.Module.Module;
import Focus.Beta.IMPL.Module.Type;
import Focus.Beta.UTILS.helper.Helper;
import Focus.Beta.UTILS.world.MovementUtil;
import Focus.Beta.UTILS.world.Timer;
import Focus.Beta.UTILS.world.TimerUtil;
import com.viaversion.viaversion.util.ChatColorUtil;
import javafx.util.Pair;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockLiquid;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.MathHelper;

import java.util.ArrayList;
import java.util.List;

public class HackerDetector extends Module {
    private final List<Pair<EntityPlayer, String>> data;
    public static final ArrayList<EntityPlayer> hackers;
    private final ArrayList<String> hacker;
    Timer time;
    double motionvlY;
    double speedvl;
    double NoKBvl;
    double auravl;
    double noslowvl;
    public static boolean enabled;

    public HackerDetector(){
        super("Detector", new String[0], Type.EXPLOIT, "Hacker Detector");
        this.data = new ArrayList<Pair<EntityPlayer, String>>();
        this.hacker = new ArrayList<String>();
        this.time = new Timer();
    }

    @EventHandler
    public void onUpdate(EventPreUpdate e){
        if(mc.thePlayer.ticksExisted <= 105){
            hackers.clear();
            return;
        }
        if(mc.theWorld == null){
            return;
        }

        for(final Entity entity : mc.theWorld.getLoadedEntityList()){
            if(!(entity instanceof EntityPlayer)) continue;
            EntityOtherPlayerMP player = null;
            if(!(entity instanceof EntityPlayerSP)){
                player = (EntityOtherPlayerMP)entity;
                if(this.getSpeed(player) > MovementUtil.getBaseMoveSpeed() + 0.85 && !((EntityOtherPlayerMP)player).onGround && !this.isInLiquid(player)){
                    Helper.sendMessage(EnumChatFormatting.BLUE + player.getName() + " Speed (A)");
                }
            }
        }
    }














    @Override
    public void onDisable() {
        super.onDisable();
        hackers.clear();
        enabled = false;
    }
     private boolean isInLiquid(final Entity e) {
            for (int x = MathHelper.floor_double(e.getEntityBoundingBox().minY); x < MathHelper.floor_double(e.getEntityBoundingBox().maxX) + 1; ++x) {
                for (int z = MathHelper.floor_double(e.getEntityBoundingBox().minZ); z < MathHelper.floor_double(e.getEntityBoundingBox().maxZ) + 1; ++z) {
                    final BlockPos pos = new BlockPos(x, (int)e.getEntityBoundingBox().minY, z);
                    final Block block = Minecraft.getMinecraft().theWorld.getBlockState(pos).getBlock();
                    if (block != null && !(block instanceof BlockAir)) {
                        return block instanceof BlockLiquid;
                    }
                }
            }
            return false;
        }


    private double getSpeed(final EntityPlayer player) {
        return Math.sqrt(player.motionX * player.motionX + player.motionZ * player.motionZ);
    }



    static{

        hackers = new ArrayList<EntityPlayer>();
        enabled = false;
    }



}
