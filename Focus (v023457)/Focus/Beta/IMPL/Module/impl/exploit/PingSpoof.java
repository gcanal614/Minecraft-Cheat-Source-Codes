package Focus.Beta.IMPL.Module.impl.exploit;

import Focus.Beta.API.EventHandler;
import Focus.Beta.API.events.world.EventPacketReceive;
import Focus.Beta.API.events.world.EventPacketSend;
import Focus.Beta.API.events.world.EventPreUpdate;
import Focus.Beta.IMPL.Module.Module;
import Focus.Beta.IMPL.Module.Type;
import Focus.Beta.IMPL.set.Mode;
import Focus.Beta.UTILS.helper.Helper;
import Focus.Beta.UTILS.world.PacketUtil;
import Focus.Beta.UTILS.world.Timer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.ArrayList;
import java.util.List;

public class PingSpoof extends Module {

    private final List<Packet<?>> packets;
    private Packet sendPacket;
    private  Timer timer = new Timer();
 public Focus.Beta.IMPL.set.Mode<Enum> modes = new Focus.Beta.IMPL.set.Mode<>("Mode", "Mode", Mode.values(), Mode.Transaction);
    public PingSpoof(){
        super("PingSpoof", new String[0], Type.EXPLOIT, "No");
        this.addValues(modes);

        this.packets = new ArrayList<Packet<?>>();
    }
    @EventHandler
    public void onReceive(final EventPacketReceive e) {
        switch (modes.getModeAsString()){
            case "Transaction":
                if (e.getPacket() instanceof C00PacketKeepAlive){
                    this.packets.add(e.getPacket());
                    e.setCancelled(true);
                }
                else if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    if (((C0FPacketConfirmTransaction) e.getPacket()).getUid() < 0) {
                        this.packets.add(e
                                .getPacket());
                        e.setCancelled(true);
                    }
                }
                break;
        }

    }

    @EventHandler
    public void onSend(final EventPacketSend e){
        switch (modes.getModeAsString()) {
            case "Verus":
                if (this.sendPacket != null && e.getPacket() instanceof C00PacketKeepAlive && e.getPacket() == this.sendPacket) {
                    this.sendPacket = null;
                }
                else if (e.getPacket() instanceof C00PacketKeepAlive) {
                    packets.add(e.getPacket());
                    e.setCancelled(true);
                }
                break;
        }
    }


    @EventHandler
    public void e(EventPreUpdate e){
        setSuffix(modes.getModeAsString());

        switch (modes.getModeAsString()) {
            case "Verus":
                if (this.timer.hasElapsed((long)1000, true) && packets.size() >= 1) {
                    this.sendPacket = packets.get(0);
                    PacketUtil.sendPacket(packets.get(0));
                    packets.remove(0);
                }
                break;
            case "Transaction":
                if(mc.thePlayer.ticksExisted < 5 && this.packets.size() > 0){
                    this.packets.clear();
                }
                if(this.timer.hasElapsed((long)(Math.random() * 40), true)){
                    while (this.packets.size() > 0){
                        PacketUtil.sendPacketNoEvent(this.packets.remove(0));
                        Helper.sendMessage("Spoof");
                    }
                    this.timer.reset();
                }
                break;
        }
    }

    enum Mode{
        Transaction, Verus
    }

}
