package Focus.Beta.IMPL.Module.impl.exploit;

import Focus.Beta.IMPL.Module.impl.combat.Killaura;
import Focus.Beta.UTILS.world.Timer;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ThreadLocalRandom;

import net.minecraft.util.MathHelper;
import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.lang3.tuple.MutablePair;

import com.google.gson.JsonParser;

import Focus.Beta.Client;
import Focus.Beta.API.EventHandler;
import Focus.Beta.API.events.world.EventPacketReceive;
import Focus.Beta.API.events.world.EventPacketSend;
import Focus.Beta.API.events.world.EventPreUpdate;
import Focus.Beta.IMPL.Module.Module;
import Focus.Beta.IMPL.Module.Type;
import Focus.Beta.IMPL.Module.impl.move.Fly;
import Focus.Beta.IMPL.managers.ModuleManager;
import Focus.Beta.IMPL.set.Mode;
import Focus.Beta.IMPL.set.Option;
import Focus.Beta.UTILS.helper.Helper;
import Focus.Beta.UTILS.world.MovementUtil;
import Focus.Beta.UTILS.world.PacketUtil;

import static java.lang.Float.MAX_VALUE;

public class Disabler extends Module {

    private LinkedList<Packet> packetQueue;

    private int current;
    private static CopyOnWriteArrayList<C0FPacketConfirmTransaction> bypassList;

    Focus.Beta.UTILS.world.Timer timer = new Timer();
    private static SplittableRandom random;
    private int memeTick;

    public Disabler() {
        super("Disabler", new String[]{"Disables AC Checks"}, Type.EXPLOIT, "Disables Anti-Cheat checks");
        addValues(mode, blinkLess);
        this.packetQueue = new LinkedList<Packet>();
    }

    static {
        bypassList = new CopyOnWriteArrayList<C0FPacketConfirmTransaction>();
        random = new SplittableRandom();
    }
    private final Queue j = new ConcurrentLinkedDeque();
    private boolean expectedTeleport;

    private C03PacketPlayer.C06PacketPlayerPosLook aac5QueuedPacket = null;
    private int aac5SameReach = 5;

    List<Packet<INetHandlerPlayServer>> packetBuffer = new ArrayList<Packet<INetHandlerPlayServer>>();
    ArrayList<Packet> transactions = new ArrayList<Packet>();
    ArrayList<Packet> keepAlives = new ArrayList<Packet>();
    public int confirmtranscounter;
    public static final Focus.Beta.UTILS.world.Timer PING = new Focus.Beta.UTILS.world.Timer();
    public final Focus.Beta.UTILS.world.Timer Timer = new Focus.Beta.UTILS.world.Timer();
    public /* synthetic */ int confirmtransactioncounter;
    public ArrayList<Packet> delayedtransactions2 = new ArrayList<Packet>();
    public static transient CopyOnWriteArrayList<Packet> packets = new CopyOnWriteArrayList<Packet>();
    int currentTransaction = 0;


    public static Mode<Enum> mode = new Mode("Mode", "Mode", DisablerMode.values(), DisablerMode.MineplexCombat);
    public static Option<Boolean> blinkLess = new Option<>("Blink Less", "Blink Less", false);

    @EventHandler
    public void onUpdate(EventPreUpdate event) {
        if (mc.thePlayer == null)
            return;

        if (mode.getModeAsString().equalsIgnoreCase("Verus")) {

        }
    }

    public static Thread pingThread = new Thread ( () -> {
        int intp = 200 + new Random ().nextInt ( 350 );
        while (true) {
            if (PING.hasElapsed( intp, true )) {
                for (Packet p : packets) {

                    if (p instanceof C0FPacketConfirmTransaction) {
                        C0FPacketConfirmTransaction f = (C0FPacketConfirmTransaction) p;
                        Helper.sendMessage ( String.valueOf ( f.getUid () ) );
                    }

                }
                if (packets.size () != 0) {
                    Helper.sendMessage ( String.valueOf ( intp ) );
                    intp = 200 + new Random ().nextInt ( 350 );
                }
                packets.clear ();
            }
        }
    } );

    static {
        pingThread.start ();
    }

    @Override
    public void onEnable() {
    	packetQueue.clear();
    	packetBuffer.clear();
        super.onEnable ();
        if(mode.getModeAsString().equalsIgnoreCase("Dev")){
            Helper.sendMessage("DO NOT FLY FOR 20 SECS");
        }
        if(mode.getModeAsString().equalsIgnoreCase("BlocksMC")){
            this.packetQueue.clear();
            this.timer.reset();
            this.expectedTeleport = false;
        }
    }

    public void onDisable() {
packetQueue.clear();
if(mode.getModeAsString().equalsIgnoreCase("OldMatrix")){
            PacketUtil.sendPacketNoEvent(packetBuffer.get(0));
            packetBuffer.clear();
        }
        super.onDisable ();
    }


    @EventHandler
    public void onPacketSend(EventPacketSend event) {
           if(mc.theWorld == null) { return; }
    	   if(mc.thePlayer == null) { if(mc.thePlayer.ticksExisted == 0){  packetBuffer.clear(); return; } return;}
    	   if(mode.getModeAsString().equalsIgnoreCase("Mineplex")) {
    		   if (event.getPacket() instanceof C00PacketKeepAlive) {
					C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive) event.getPacket();
					packetKeepAlive.key -= 35;
				}
    	   }
        if(mode.getModeAsString().equalsIgnoreCase("MinemenCombat") && Killaura.target != null){
            if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)  {event.setCancelled(true); Helper.sendMessage("Cancelled");}
        }
        if(mode.getModeAsString().equalsIgnoreCase("VerusCombat")){
            if (event.getPacket() instanceof C00PacketKeepAlive) {
                event.setCancelled(true);
                this.packetQueue.add(event.getPacket());
            }
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                this.packetQueue.add(event.getPacket());
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof C0BPacketEntityAction) {
                event.setCancelled(true);
            }
        }
        switch (mode.getModeAsString ()) {
            case "Verus":
                if(this.mc.theWorld.getScoreboard().getObjectiveInDisplaySlot(1).getDisplayName().equals("§a§lBlocks§e§lMC")) return;

                double rotationYaw = Math.toRadians(mc.thePlayer.rotationYaw);
                double minusyaw = -Math.sin(rotationYaw);
                double plusyaw = Math.cos(rotationYaw);
                if(mc.thePlayer != null && mc.thePlayer.ticksExisted > 5){
                    if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive){
                        short pies = -1;
                        if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                            pies = ((C0FPacketConfirmTransaction) event.getPacket()).getUid();
                        }

                        if(pies != -1 && pies > 0 && pies < 100) return;

                        event.setCancelled(true);
                        this.j.add(event.getPacket());
                        Helper.sendMessage("Received");
                    }


                    if (event.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
                        S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                        this.expectedTeleport = false;
                        event.setCancelled(true);
                        mc.getNetHandler().sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(), s08PacketPlayerPosLook.getY(), s08PacketPlayerPosLook.getZ(),
                                s08PacketPlayerPosLook.getYaw(), s08PacketPlayerPosLook.getPitch(), true));
                    }

                    if(!(event.getPacket() instanceof C03PacketPlayer)) return;

                    C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) event.getPacket();
                    if(this.mc.thePlayer.ticksExisted % 25 == 0){
                        this.expectedTeleport = true;
                        c03PacketPlayer.setMoving(false);
                        c03PacketPlayer.setPosY(-0.03125D);
                        c03PacketPlayer.onGround = true;
                    }
                }
                break;
            case "BlocksMC":
                if (!this.shouldRun()) return;

                if (event.getPacket() instanceof C0FPacketConfirmTransaction
                        || event.getPacket() instanceof C00PacketKeepAlive) {

                    short action = -1;

                    if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        action = ((C0FPacketConfirmTransaction) event.getPacket()).getUid();
                    }

                    if (action != -1 && this.isInventory(action)) return;

                    event.setCancelled(true);
                    this.packetQueue.add(event.getPacket());
                }

                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) event.getPacket();


                    if (mc.thePlayer.ticksExisted % 30 == 0) {
                        if(Killaura.target == null) {
                            this.expectedTeleport = true;
                        }

                        c03PacketPlayer.setMoving(false);
                        c03PacketPlayer.setPosY( -0.015625);
                        c03PacketPlayer.onGround = false;
                        Helper.sendMessage("Sent");
                    }
                }

                if (event.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
                    S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                    this.expectedTeleport = false;

                    event.setCancelled(true);

                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer
                            .C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(),
                            s08PacketPlayerPosLook.getY(),
                            s08PacketPlayerPosLook.getZ(),
                            s08PacketPlayerPosLook.getYaw(),
                            s08PacketPlayerPosLook.getPitch(), true));
                }
                break;
            case "Ghostly":
                if (event.getPacket () instanceof C0BPacketEntityAction) {
                    event.setCancelled ( true );
                }
                if (event.getPacket () instanceof C03PacketPlayer) {
                    PacketUtil.sendPacket( (Packet) new C0CPacketInput (
                    		));


                }

                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {event.setCancelled(true);}
                break;
            case "Faithful":
                break;
            case "LatestVerus":
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
                    this.packetQueue.add(c0fPacketConfirmTransaction);
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    final C03PacketPlayer c14 = (C03PacketPlayer)event.getPacket();
                    if (this.mc.thePlayer.ticksExisted % 25 == 0) {

                        c14.y = -0.42;
                        c14.onGround = false;
                        c14.moving = false;
                    }
                }
                if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted <= 7) {
                    this.timer.reset();
                    this.packetQueue.clear();
                    break;
                }
                break;
            case "OldMatrix":
                if(event.getPacket() instanceof C03PacketPlayer && !(event.getPacket() instanceof C04PacketPlayerPosition || event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook ||
                        event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook)){
                    event.setCancelled(true);
                }
                if(event.getPacket() instanceof C02PacketUseEntity || event.getPacket() instanceof C04PacketPlayerPosition || event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook||
                        event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook || event.getPacket() instanceof C07PacketPlayerDigging || event.getPacket() instanceof C08PacketPlayerBlockPlacement ||
                        event.getPacket() instanceof C0APacketAnimation || event.getPacket() instanceof C0BPacketEntityAction){
                    event.setCancelled(true);
                    packetBuffer.add(event.getPacket());
                }
                break;
            case "Dev":
                if(event.getPacket() instanceof C03PacketPlayer){
                    // Set position to a valid block height (so Spoof NoFall works)
                    double yPos = (int) (mc.thePlayer.posY / 0.015625) * 0.015625;

                }
                if(event.getPacket() instanceof S08PacketPlayerPosLook){
                    S08PacketPlayerPosLook eve = (S08PacketPlayerPosLook) event.getPacket();
                    double x = eve.getX() - mc.thePlayer.posX;
                    double y = eve.getY() - mc.thePlayer.posY;
                    double z = eve.getZ() - mc.thePlayer.posZ;
                    double diff = Math.sqrt(x * x + y * y + z * z);
                    // Cancel the teleport, and silently accept it.
                    if (diff <= 8) {
                        event.setCancelled(true);
                        // LATEST verus ALWAYS expects a c06 within 30 seconds of a teleport if packets have been sent from the client after the teleport.
                        PacketUtil.sendPacketNoEvent( new C03PacketPlayer.C06PacketPlayerPosLook(eve.getX(), eve.getY(), eve.getZ(), eve.getYaw(), eve.getPitch(), true));
                    }
                }
                if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                    for(int a  = 0; a < 3; a++){
                        packetBuffer.add(event.getPacket());
                    }
                    event.setCancelled(true);
                }
                break;
            case "OldVerus":
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    Disabler.packets.add(event.getPacket());
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    this.mc.thePlayer.sendQueue.addToSendQueueSilent(new C00PacketKeepAlive(((C00PacketKeepAlive)event.getPacket()).key - 1));
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    this.mc.thePlayer.sendQueue.addToSendQueueSilent(new C0CPacketInput());
                    break;
                }
                break;

        }

    }


    @EventHandler
    public void nword(EventPreUpdate e){
        if(mc.thePlayer == null || mc.theWorld == null) return;
setSuffix(mode.getModeAsString());
        switch (mode.getModeAsString()){
            case "OldMatrix":
                if(memeTick >= 5){
                    memeTick = 0;
                    PacketUtil.sendPacketNoEvent(packetBuffer.get(0));
                    Helper.sendMessage("RLB (Size=" + packetBuffer.size() + "), (tick=" + RandomUtils.nextInt(0, 50) + ")");
                    packetBuffer.clear();
                }
                memeTick++;
                break;
            case "BlocksMC":
                if (!this.shouldRun()) {
                    this.expectedTeleport = false;
                    this.timer.reset();
                    this.packetQueue.clear();
                    return;
                }

                if (this.timer.hasReached(260L)) {
                    this.timer.reset();

                    if (!this.packetQueue.isEmpty()) {
                        PacketUtil.sendPacketNoEvent(this.packetQueue.poll());
                    }
                }
                break;
            case "Dev":
                if (mc.thePlayer.ticksExisted % 180 == 0) {
                    // grab packets untill the queue size is 22 or less.
                    while (packetBuffer.size() > 22) {
                        // grab 1 packet, send and then remove it from the queue
                        PacketUtil.sendPacketNoEvent(packetBuffer.get(0));
                        packetBuffer.remove(0);
                    }
                    Helper.sendMessage( "Sended");
                }
                break;
            case "Verus":
                if(!(mc.thePlayer != null) && mc.thePlayer.ticksExisted > 5){
                    this.expectedTeleport = false;
                    this.timer.reset();
                    this.j.clear();
                }else{
                    if(timer.hasElapsed((long) ThreadLocalRandom.current().nextDouble(250.0D, 270.0D), true)){
                        if(this.j.isEmpty()){
                            PacketUtil.sendPacketPlayerNoEvent((Packet) this.j.poll());
                        }
                    }
                }
                break;
            case "VerusCombat":
                if (this.mc.thePlayer.ticksExisted % 180 == 0) {
                    while (this.packetQueue.size() > 22) {
                        PacketUtil.sendPacketSilent(this.packetQueue.get(0));
                        this.packetQueue.remove(0);
                    }
                    break;
                }
                break;

            case "OldVerus":
                if (this.mc.thePlayer.ticksExisted % 60 == 0 && this.transactions.size() > this.currentTransaction) {
                    this.mc.thePlayer.sendQueue.addToSendQueueSilent(this.transactions.get(this.currentTransaction++));
                }
                if (this.mc.thePlayer.ticksExisted % 40 == 0) {
                    this.mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C06PacketPlayerPosLook(this.mc.thePlayer.posX, this.mc.thePlayer.posY - 11.0, this.mc.thePlayer.posZ, this.mc.thePlayer.rotationYaw, this.mc.thePlayer.rotationPitch, true));
                }
                if (this.mc.thePlayer.ticksExisted % 300 == 0) {
                    this.packetQueue.clear();
                    break;
                }
                break;
        }
    }

    boolean shouldRun() {
        return mc.thePlayer != null && mc.thePlayer.ticksExisted > 5;
    }

    boolean isInventory(short action) {
        return action > 0 && action < 100;
    }
    @EventHandler
    public void onPacketReceive(EventPacketReceive event) {
        if(mc.theWorld == null) { return; }
        if(mc.thePlayer == null || mc.thePlayer == null && mc.thePlayer.ticksExisted == 0) { packetBuffer.clear(); return; }
        if (mode.getModeAsString().equalsIgnoreCase("Hypixel")) {
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                packets.add(event.getPacket());
                event.setCancelled(true);
            } else if (event.getPacket() instanceof C00PacketKeepAlive) {
                packets.add(event.getPacket());
                event.setCancelled(true);
            }
        }

        if(mode.getModeAsString().equalsIgnoreCase("MinemenCombat") && Killaura.target != null){
            if(event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)  {event.setCancelled(true); Helper.sendMessage("Cancelled");}
        }

        if(mode.getModeAsString().equalsIgnoreCase("MineplexCombat")){
            if(event.getPacket() instanceof C00PacketKeepAlive){
                C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive) event.getPacket();
                packetKeepAlive.key -= RandomUtils.nextInt(3, 128);
                Helper.sendMessage(packetKeepAlive.key + "");
                event.setCancelled(true);
            }

            if(event.getPacket() instanceof C0CPacketInput){
                C0CPacketInput packetInput = (C0CPacketInput) event.getPacket();
                packetInput.strafeSpeed -= RandomUtils.nextInt(32324, 242352);
                packetInput.jumping = true;
                packetInput.forwardSpeed -= RandomUtils.nextInt(0,0);
            }

            if(event.getPacket() instanceof C0FPacketConfirmTransaction){
                C0FPacketConfirmTransaction confirmTransaction = (C0FPacketConfirmTransaction) event.getPacket();
                confirmTransaction.uid -= (short) RandomUtils.nextInt(4, 130);
                event.setCancelled(true);
            }
        }


        if(mode.getModeAsString().equalsIgnoreCase("YourMom")) {
        	 if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
        		 event.setCancelled(true);
              } else if (event.getPacket() instanceof C0BPacketEntityAction) {
            	  event.setCancelled(true);
              } else {
                 boolean var10000 = (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook);
                 if(var10000) {
                	 event.setCancelled(true);
                 }
              }
        }
            if (mode.getModeAsString ().equalsIgnoreCase ( "Ghostly" )) {

                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {event.setCancelled(true);}
            }

        }


    public enum DisablerMode {
        BlocksMC,  MinemenCombat,            MineplexCombat, Mineplex, Hypixel, Ghostly, Faithful,  VerusCombat,Verus, OldMatrix, $20WatchDog
    }

}