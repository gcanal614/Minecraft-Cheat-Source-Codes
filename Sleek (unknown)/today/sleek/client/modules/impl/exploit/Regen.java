package today.sleek.client.modules.impl.exploit;

import com.google.common.eventbus.Subscribe;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import today.sleek.base.event.impl.UpdateEvent;
import today.sleek.base.modules.ModuleCategory;
import today.sleek.base.modules.ModuleData;
import today.sleek.base.value.value.BooleanValue;
import today.sleek.base.value.value.ModeValue;
import today.sleek.base.value.value.NumberValue;
import today.sleek.client.modules.impl.Module;
import today.sleek.client.utils.chat.ChatUtil;
import today.sleek.client.utils.network.PacketUtil;

@ModuleData(
        name = "Regen",
        category = ModuleCategory.EXPLOIT,
        description = "Automatically regenerates health"
)
public class Regen extends Module {

    private NumberValue<Double> health = new NumberValue<>("Health", this, 15.0, 1.0, 20.0, 1.0);
    private NumberValue<Double> packets = new NumberValue<>("Packets", this, 15.0, 1.0, 200.0, 1.0);

    private final ModeValue modeValue = new ModeValue("Mode", this, "Vanilla", "Matrix", "Ghostly" /*/ Credit: Dort /*/);
    private final BooleanValue timerBypass = new BooleanValue("Timer Bypass", this, true);

    @Override
    public void onEnable() {
        if (modeValue.getValue().equalsIgnoreCase("matrix")) {
            ChatUtil.log("Credit to Dort");
        }
    }

    @Subscribe
    public void onUpdate(UpdateEvent event) {
        if (mc.thePlayer.getHealth() >= health.getValue()) return;
        if (!mc.thePlayer.onGround) return;

        switch (modeValue.getValue()) {
            case "Vanilla": {
                for (int i = 0; i < packets.getValue(); i++) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
                }
                break;
            }
            case "Ghostly": {
                if (mc.thePlayer.ticksExisted % 10 == 0) {
                    double d = mc.thePlayer.posX;
                    double d2 = mc.thePlayer.posY + 1.0E-9;
                    double d3 = mc.thePlayer.posZ;
                    for (int i = 0; i < packets.getValue(); i++) {
                        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(d, d2, d3, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, true));
                    }
                }
                break;
            }
            case "Matrix": {
                for (int i = 0; i < packets.getValue().intValue(); i++) {
                    PacketUtil.sendPacketNoEvent(new C08PacketPlayerBlockPlacement(mc.thePlayer.getPosition().down(256), 256, null, 0, 0, 0));
                    if (timerBypass.getValue())
                        PacketUtil.sendPacket(timerBypass.getValue() ? new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true) : new C03PacketPlayer(true));
                }
                break;
            }
        }
    }
}
