package today.sleek.client.modules.impl.exploit.disabler.blocks

import net.minecraft.network.Packet
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import today.sleek.base.event.impl.MoveEvent
import today.sleek.base.event.impl.PacketEvent
import today.sleek.base.event.impl.UpdateEvent
import today.sleek.client.modules.impl.exploit.disabler.DisablerMode
import today.sleek.client.utils.chat.ChatUtil
import today.sleek.client.utils.math.Stopwatch
import today.sleek.client.utils.moshi.IPacketUtils
import today.sleek.client.utils.network.TimedPacket
import java.util.function.Predicate

class BlocksMC2: DisablerMode("BlocksMC 2"), IPacketUtils {

    val stopwatch = Stopwatch()

    var queue = ArrayList<TimedPacket>()
    var remove = ArrayList<TimedPacket>()
    override fun onUpdate(event: UpdateEvent?) {
        if (mc.thePlayer.ticksExisted % 20 == 0) {
            for (packet: TimedPacket in queue) {
                if (packet.postAddTime() > 5000) {
                    remove.add(packet)
                    packet.sendSilent()
                }
            }
            queue.removeIf { timedPacket: TimedPacket ->
                remove.contains(
                    timedPacket
                )
            }
            remove.clear()
        }
    }

    override fun onPacket(event: PacketEvent?) {
        if (event!!.getPacket<Packet<*>>() is C0FPacketConfirmTransaction) {
            event.isCancelled = true
            queue.add(create(event.getPacket()))
        }
        if (event.getPacket<Packet<*>>() is C00PacketKeepAlive) {
            event.isCancelled = true
            queue.add(create(event.getPacket()))
        }
        if (event.getPacket<Packet<*>>() is C00PacketKeepAlive) {
            val packet: C03PacketPlayer = event.getPacket()
            if (mc.thePlayer.ticksExisted % 40 == 0) {
                ChatUtil.log("t")
                packet.y -= -50.0
                packet.onGround = false
            }
        }
    }

    override fun onMove(event: MoveEvent?) {
        super.onMove(event)
    }
}