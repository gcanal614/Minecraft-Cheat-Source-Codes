package today.sleek.client.modules.impl.exploit.disabler.misc;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import today.sleek.base.event.impl.PacketEvent;
import today.sleek.base.event.impl.UpdateEvent;
import today.sleek.client.modules.impl.exploit.disabler.DisablerMode;
import today.sleek.client.utils.chat.ChatUtil;
import today.sleek.client.utils.math.Stopwatch;
import today.sleek.client.utils.network.PacketUtil;

import java.util.LinkedList;

public class Custom extends DisablerMode {
    public Custom() {
        super("Custom");
    }

    Stopwatch stopwatch = new Stopwatch();
    Stopwatch dreamhax = new Stopwatch();
    Stopwatch keepaliveStopwatch = new Stopwatch();
    private LinkedList<Packet> customKeepAlives = new LinkedList<>();
    private LinkedList<Packet> customTransactions = new LinkedList<>();

    @Override
    public void onEnable() {
        stopwatch.resetTime();
        dreamhax.resetTime();
        keepaliveStopwatch.resetTime();
    }

    @Override
    public void onPacket(PacketEvent event) {
        if (!(mc.thePlayer != null && mc.thePlayer.ticksExisted > 5)) return;
        if (getDisabler().getCancelKeepAlives().getValue() && event.getPacket() instanceof C00PacketKeepAlive) {
            event.setCancelled(true);
        }
        if (getDisabler().getCancelTransactions().getValue() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
            event.setCancelled(true);
        }
        if (getDisabler().getSendC0C().getValue() && event.getPacket() instanceof C03PacketPlayer) {
            if (!getDisabler().getMaxc0c().getValue()) {
                PacketUtil.sendPacketNoEvent(new C0CPacketInput());
            } else {
                PacketUtil.sendPacketNoEvent(new C0CPacketInput(Float.MIN_VALUE, Float.MIN_VALUE, false, false));
            }
        }
        if (getDisabler().getSpoofOnGround().getValue() && event.getPacket() instanceof C03PacketPlayer) {
            C03PacketPlayer c03PacketPlayer = event.getPacket();
            c03PacketPlayer.onGround = true;

            PacketUtil.sendPacketNoEvent(c03PacketPlayer);
            event.setCancelled(true);
        }

        if (getDisabler().getOffGround().getValue() && event.getPacket() instanceof C03PacketPlayer) {
            C03PacketPlayer c03PacketPlayer = event.getPacket();
            c03PacketPlayer.onGround = false;
            c03PacketPlayer.y = 0.15;

            PacketUtil.sendPacketNoEvent(c03PacketPlayer);
            event.setCancelled(true);
        }

        if (getDisabler().getDelayKeepAlives().getValue() && event.getPacket() instanceof C00PacketKeepAlive) {
            customKeepAlives.add(event.getPacket());
            event.setCancelled(true);
        }

        if (getDisabler().getDelayTransactions().getValue() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
            customTransactions.add(event.getPacket());
            event.setCancelled(true);
        }

        if (getDisabler().getSpectateSpoof().getValue() && event.getPacket() instanceof C03PacketPlayer) {
            C03PacketPlayer c03PacketPlayer = event.getPacket();
            c03PacketPlayer.onGround = false;

            PacketUtil.sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
            PacketUtil.sendPacketNoEvent(new C13PacketPlayerAbilities(mc.thePlayer.capabilities));
        }

        if (getDisabler().getAbilitiesSpoof().getValue() && event.getPacket() instanceof C13PacketPlayerAbilities) {
            C13PacketPlayerAbilities p = event.getPacket();

            p.flying = true;
            p.invulnerable = true;
            p.allowFlying = true;
            p.creativeMode = false;
        }

    }

    @Override
    public void onUpdate(UpdateEvent event) {
        if (!(mc.thePlayer != null && mc.thePlayer.ticksExisted > 5)) {
            if (mc.thePlayer == null || mc.thePlayer.ticksExisted < 5) {
                mc.timer.timerSpeed = 1.0F;
                return;
            }
        }
        if (getDisabler().getTimer().getValue()) {
            mc.timer.timerSpeed = getDisabler().getTimerSpeed().getValue().floatValue();
        }
        if (getDisabler().getVoidTeleport().getValue()) {
            if (stopwatch.timeElapsed(getDisabler().getVoidTpDelay().getValue().longValue())) {
                ChatUtil.log("teleported");
                stopwatch.resetTime();
                C03PacketPlayer packet = new C03PacketPlayer();
                packet.y = getDisabler().getVoidTpAmount().getValue().floatValue();
                PacketUtil.sendPacketNoEvent(packet);
            }
        }

        if (getDisabler().getDelayTransactions().getValue()) {
            if (dreamhax.timeElapsed(getDisabler().getDelayTransAmount().getValue().longValue())) {
                if (!customTransactions.isEmpty())
                    PacketUtil.sendPacketNoEvent(customTransactions.poll());
                dreamhax.resetTime();
            }
        }

        if (getDisabler().getDelayKeepAlives().getValue()) {
            if (keepaliveStopwatch.timeElapsed(getDisabler().getDelayKeepAliveAmount().getValue().longValue())) {
                if (!customKeepAlives.isEmpty())
                    PacketUtil.sendPacketNoEvent(customKeepAlives.poll());
                keepaliveStopwatch.resetTime();
            }
        }
    }

}
